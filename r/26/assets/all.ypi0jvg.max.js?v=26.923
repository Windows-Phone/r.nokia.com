window.typeKitConfig = {kitId: 'ypi0jvg'};/*{"version":"18469874","mac":"1:e246d82659e95c07f99ce3b4dbdb93552bb74cfc8984b11e0483eb2d726f68f6","created":"2013-08-07T11:52:35Z","k":"1.6.2"}*/
/*
 * For font license information, see the CSS file loaded by this JavaScript.
 */
;(function(window,document,undefined){
var h=!0,k=null,l=!1;function m(a){return function(){return this[a]}}var aa=this;function ca(a,b){var c=a.split("."),d=aa;!(c[0]in d)&&d.execScript&&d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)!c.length&&void 0!==b?d[e]=b:d=d[e]?d[e]:d[e]={}}function da(a,b,c){return a.call.apply(a.bind,arguments)}
function ea(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function n(a,b,c){n=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?da:ea;return n.apply(k,arguments)}var fa=Date.now||function(){return+new Date};
function q(a,b){this.Y=a;this.O=b||a;this.D=this.O.document}q.prototype.createElement=function(a,b,c){a=this.D.createElement(a);if(b)for(var d in b)b.hasOwnProperty(d)&&("style"==d?a.style.cssText=b[d]:a.setAttribute(d,b[d]));c&&a.appendChild(this.D.createTextNode(c));return a};function r(a,b,c){a=a.D.getElementsByTagName(b)[0];a||(a=document.documentElement);a&&a.lastChild&&a.insertBefore(c,a.lastChild)}function ga(a,b){function c(){a.D.body?b():setTimeout(c,0)}c()}
function s(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return;c.push(b);a.className=c.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function t(a,b){for(var c=a.className.split(/\s+/),d=[],e=0,f=c.length;e<f;e++)c[e]!=b&&d.push(c[e]);a.className=d.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function ha(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return h;return l}
function ia(a){var b=a.O.location.protocol;"about:"==b&&(b=a.Y.location.protocol);return"https:"==b?"https:":"http:"}
function ja(a,b,c){var d=a.D.getElementsByTagName("head")[0];if(d){var e=a.createElement("script",{src:b}),f=l;e.onload=e.onreadystatechange=function(){if(!f&&(!this.readyState||"loaded"==this.readyState||"complete"==this.readyState))f=h,c&&c(k),e.onload=e.onreadystatechange=k,"HEAD"==e.parentNode.tagName&&d.removeChild(e)};d.appendChild(e);window.setTimeout(function(){f||(f=h,c&&c(Error("Script load timeout")))},5E3)}}function u(a,b,c){this.La=a;this.aa=b;this.Ka=c}
ca("internalWebfont.BrowserInfo",u);u.prototype.za=m("La");u.prototype.hasWebFontSupport=u.prototype.za;u.prototype.Aa=m("aa");u.prototype.hasWebKitFallbackBug=u.prototype.Aa;u.prototype.Ba=m("Ka");u.prototype.hasWebKitMetricsBug=u.prototype.Ba;function v(a,b,c,d){this.e=a!=k?a:k;this.m=b!=k?b:k;this.C=c!=k?c:k;this.j=d!=k?d:k}var ma=/^([0-9]+)(?:[\._-]([0-9]+))?(?:[\._-]([0-9]+))?(?:[\._+-]?(.*))?$/;
function w(a,b){return a.e>b.e||a.e===b.e&&a.m>b.m||a.e===b.e&&a.m===b.m&&a.C>b.C?1:a.e<b.e||a.e===b.e&&a.m<b.m||a.e===b.e&&a.m===b.m&&a.C<b.C?-1:0}function x(a,b){return 0===w(a,b)||1===w(a,b)}v.prototype.toString=function(){return[this.e,this.m||"",this.C||"",this.j||""].join("")};
function z(a){a=ma.exec(a);var b=k,c=k,d=k,e=k;a&&(a[1]!==k&&a[1]&&(b=parseInt(a[1],10)),a[2]!==k&&a[2]&&(c=parseInt(a[2],10)),a[3]!==k&&a[3]&&(d=parseInt(a[3],10)),a[4]!==k&&a[4]&&(e=/^[0-9]+$/.test(a[4])?parseInt(a[4],10):a[4]));return new v(b,c,d,e)}function B(a,b,c,d,e,f,g,j,p,y,ba){this.P=a;this.n=b;this.Ja=c;this.u=d;this.z=e;this.pa=f;this.k=g;this.h=j;this.Ga=p;this.M=y;this.t=ba}ca("internalWebfont.UserAgent",B);B.prototype.getName=m("P");B.prototype.getName=B.prototype.getName;
B.prototype.ya=m("Ja");B.prototype.getVersion=B.prototype.ya;B.prototype.ua=m("u");B.prototype.getEngine=B.prototype.ua;B.prototype.va=m("pa");B.prototype.getEngineVersion=B.prototype.va;B.prototype.wa=m("k");B.prototype.getPlatform=B.prototype.wa;B.prototype.xa=m("Ga");B.prototype.getPlatformVersion=B.prototype.xa;B.prototype.ta=m("M");B.prototype.getDocumentMode=B.prototype.ta;B.prototype.sa=m("t");B.prototype.getBrowserInfo=B.prototype.sa;function na(a,b){this.c=a;this.L=b}
var oa=new B("Unknown",new v,"Unknown","Unknown",new v,"Unknown","Unknown",new v,"Unknown",void 0,new u(l,l,l));
na.prototype.parse=function(){var a;if(-1!=this.c.indexOf("MSIE")){a=C(this);var b=D(this),c=z(b),d=E(this.c,/MSIE ([\d\w\.]+)/,1),e=z(d);a=new B("MSIE",e,d,"MSIE",e,d,a,c,b,F(this.L),new u("Windows"==a&&6<=e.e||"Windows Phone"==a&&8<=c.e,l,l))}else if(-1!=this.c.indexOf("Opera"))a:{a="Unknown";var b=E(this.c,/Presto\/([\d\w\.]+)/,1),c=z(b),d=D(this),e=z(d),f=F(this.L);c.e!==k?a="Presto":(-1!=this.c.indexOf("Gecko")&&(a="Gecko"),b=E(this.c,/rv:([^\)]+)/,1),c=z(b));if(-1!=this.c.indexOf("Opera Mini/")){var g=
E(this.c,/Opera Mini\/([\d\.]+)/,1),j=z(g);a=new B("OperaMini",j,g,a,c,b,C(this),e,d,f,new u(l,l,l))}else{if(-1!=this.c.indexOf("Version/")&&(g=E(this.c,/Version\/([\d\.]+)/,1),j=z(g),j.e!==k)){a=new B("Opera",j,g,a,c,b,C(this),e,d,f,new u(10<=j.e,l,l));break a}g=E(this.c,/Opera[\/ ]([\d\.]+)/,1);j=z(g);a=j.e!==k?new B("Opera",j,g,a,c,b,C(this),e,d,f,new u(10<=j.e,l,l)):new B("Opera",new v,"Unknown",a,c,b,C(this),e,d,f,new u(l,l,l))}}else/OPR\/[\d.]+/.test(this.c)?a=pa(this):/AppleWeb(K|k)it/.test(this.c)?
a=pa(this):-1!=this.c.indexOf("Gecko")?(a="Unknown",b=new v,c="Unknown",d=D(this),e=z(d),f=l,-1!=this.c.indexOf("Firefox")?(a="Firefox",c=E(this.c,/Firefox\/([\d\w\.]+)/,1),b=z(c),f=3<=b.e&&5<=b.m):-1!=this.c.indexOf("Mozilla")&&(a="Mozilla"),g=E(this.c,/rv:([^\)]+)/,1),j=z(g),f||(f=1<j.e||1==j.e&&9<j.m||1==j.e&&9==j.m&&2<=j.C||g.match(/1\.9\.1b[123]/)!=k||g.match(/1\.9\.1\.[\d\.]+/)!=k),a=new B(a,b,c,"Gecko",j,g,C(this),e,d,F(this.L),new u(f,l,l))):a=oa;return a};
function C(a){var b=E(a.c,/(iPod|iPad|iPhone|Android|Windows Phone|BB\d{2}|BlackBerry)/,1);if(""!=b)return/BB\d{2}/.test(b)&&(b="BlackBerry"),b;a=E(a.c,/(Linux|Mac_PowerPC|Macintosh|Windows|CrOS)/,1);return""!=a?("Mac_PowerPC"==a&&(a="Macintosh"),a):"Unknown"}
function D(a){var b=E(a.c,/(OS X|Windows NT|Android) ([^;)]+)/,2);if(b||(b=E(a.c,/Windows Phone( OS)? ([^;)]+)/,2))||(b=E(a.c,/(iPhone )?OS ([\d_]+)/,2)))return b;if(b=E(a.c,/(?:Linux|CrOS) ([^;)]+)/,1))for(var b=b.split(/\s/),c=0;c<b.length;c+=1)if(/^[\d\._]+$/.test(b[c]))return b[c];return(a=E(a.c,/(BB\d{2}|BlackBerry).*?Version\/([^\s]*)/,2))?a:"Unknown"}
function pa(a){var b=C(a),c=D(a),d=z(c),e=E(a.c,/AppleWeb(?:K|k)it\/([\d\.\+]+)/,1),f=z(e),g="Unknown",j=new v,p="Unknown",y=l;/OPR\/[\d.]+/.test(a.c)?g="Opera":-1!=a.c.indexOf("Chrome")||-1!=a.c.indexOf("CrMo")||-1!=a.c.indexOf("CriOS")?g="Chrome":/Silk\/\d/.test(a.c)?g="Silk":"BlackBerry"==b||"Android"==b?g="BuiltinBrowser":-1!=a.c.indexOf("PhantomJS")?g="PhantomJS":-1!=a.c.indexOf("Safari")?g="Safari":-1!=a.c.indexOf("AdobeAIR")&&(g="AdobeAIR");"BuiltinBrowser"==g?p="Unknown":"Silk"==g?p=E(a.c,
/Silk\/([\d\._]+)/,1):"Chrome"==g?p=E(a.c,/(Chrome|CrMo|CriOS)\/([\d\.]+)/,2):-1!=a.c.indexOf("Version/")?p=E(a.c,/Version\/([\d\.\w]+)/,1):"AdobeAIR"==g?p=E(a.c,/AdobeAIR\/([\d\.]+)/,1):"Opera"==g?p=E(a.c,/OPR\/([\d.]+)/,1):"PhantomJS"==g&&(p=E(a.c,/PhantomJS\/([\d.]+)/,1));j=z(p);y="AdobeAIR"==g?2<j.e||2==j.e&&5<=j.m:"BlackBerry"==b?10<=d.e:"Android"==b?2<d.e||2==d.e&&1<d.m:526<=f.e||525<=f.e&&13<=f.m;return new B(g,j,p,"AppleWebKit",f,e,b,d,c,F(a.L),new u(y,536>f.e||536==f.e&&11>f.m,"iPhone"==
b||"iPad"==b||"iPod"==b||"Macintosh"==b))}function E(a,b,c){return(a=a.match(b))&&a[c]?a[c]:""}function F(a){if(a.documentMode)return a.documentMode}function qa(a){this.Ea=a||"-"}qa.prototype.j=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.Ea)};function ra(a,b,c){this.g=a;this.l=b;this.S=c;this.p="wf";this.o=new qa("-")}
function sa(a){t(a.l,a.o.j(a.p,"loading"));ha(a.l,a.o.j(a.p,"active"))||s(a.l,a.o.j(a.p,"inactive"));G(a,"inactive")}function G(a,b,c){if(a.S[b])if(c)a.S[b](c.getName(),I(c));else a.S[b]()}function J(a,b){this.P=a;this.ba=4;this.Q="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.Q=c[1],this.ba=parseInt(c[2],10))}J.prototype.getName=m("P");function I(a){return a.Q+a.ba}function K(a,b){this.g=a;this.I=b;this.w=this.g.createElement("span",{"aria-hidden":"true"},this.I)}
function ta(a,b){var c;c=[];for(var d=b.P.split(/,\s*/),e=0;e<d.length;e++){var f=d[e].replace(/['"]/g,"");-1==f.indexOf(" ")?c.push(f):c.push("'"+f+"'")}c=c.join(",");d="normal";e=b.ba+"00";"o"===b.Q?d="oblique":"i"===b.Q&&(d="italic");a.w.style.cssText="position:absolute;top:-999px;left:-999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+c+";"+("font-style:"+d+";font-weight:"+e+";")}
function ua(a){r(a.g,"body",a.w)}K.prototype.remove=function(){var a=this.w;a.parentNode&&a.parentNode.removeChild(a)};function va(a,b,c,d,e,f,g,j){this.ca=a;this.Ca=b;this.g=c;this.v=d;this.I=j||"BESbswy";this.t=e;this.J={};this.Z=f||5E3;this.ja=g||k;this.H=this.G=k;a=new K(this.g,this.I);ua(a);for(var p in L)L.hasOwnProperty(p)&&(ta(a,new J(L[p],I(this.v))),this.J[L[p]]=a.w.offsetWidth);a.remove()}var L={Sa:"serif",Ra:"sans-serif",Oa:"monospace"};
va.prototype.start=function(){this.G=new K(this.g,this.I);ua(this.G);this.H=new K(this.g,this.I);ua(this.H);this.Ha=fa();ta(this.G,new J(this.v.getName()+",serif",I(this.v)));ta(this.H,new J(this.v.getName()+",sans-serif",I(this.v)));wa(this)};function xa(a,b,c){for(var d in L)if(L.hasOwnProperty(d)&&b===a.J[L[d]]&&c===a.J[L[d]])return h;return l}
function wa(a){var b=a.G.w.offsetWidth,c=a.H.w.offsetWidth;b===a.J.serif&&c===a.J["sans-serif"]||a.t.aa&&xa(a,b,c)?fa()-a.Ha>=a.Z?a.t.aa&&xa(a,b,c)&&(a.ja===k||a.ja.hasOwnProperty(a.v.getName()))?ya(a,a.ca):ya(a,a.Ca):setTimeout(n(function(){wa(this)},a),25):ya(a,a.ca)}function ya(a,b){a.G.remove();a.H.remove();b(a.v)}function M(a,b,c,d){this.g=b;this.A=c;this.V=0;this.ma=this.ia=l;this.Z=d;this.t=a.t}
M.prototype.$=function(a,b,c,d){if(0===a.length&&d)sa(this.A);else{this.V+=a.length;d&&(this.ia=d);for(d=0;d<a.length;d++){var e=a[d],f=b[e.getName()],g=this.A,j=e;s(g.l,g.o.j(g.p,j.getName(),I(j).toString(),"loading"));G(g,"fontloading",j);(new va(n(this.qa,this),n(this.ra,this),this.g,e,this.t,this.Z,c,f)).start()}}};
M.prototype.qa=function(a){var b=this.A;t(b.l,b.o.j(b.p,a.getName(),I(a).toString(),"loading"));t(b.l,b.o.j(b.p,a.getName(),I(a).toString(),"inactive"));s(b.l,b.o.j(b.p,a.getName(),I(a).toString(),"active"));G(b,"fontactive",a);this.ma=h;za(this)};M.prototype.ra=function(a){var b=this.A;t(b.l,b.o.j(b.p,a.getName(),I(a).toString(),"loading"));ha(b.l,b.o.j(b.p,a.getName(),I(a).toString(),"active"))||s(b.l,b.o.j(b.p,a.getName(),I(a).toString(),"inactive"));G(b,"fontinactive",a);za(this)};
function za(a){0==--a.V&&a.ia&&(a.ma?(a=a.A,t(a.l,a.o.j(a.p,"loading")),t(a.l,a.o.j(a.p,"inactive")),s(a.l,a.o.j(a.p,"active")),G(a,"active")):sa(a.A))}function Aa(a){this.g=a}Aa.prototype.toString=function(){return encodeURIComponent(this.g.O.location.hostname||this.g.Y.location.hostname)};function Ba(a,b){this.q=a;this.r=b}
Ba.prototype.toString=function(){for(var a=[],b=0;b<this.r.length;b++)for(var c=this.r[b],d=c.B(),c=c.B(this.q),e=0;e<d.length;e++){var f;a:{for(f=0;f<c.length;f++)if(d[e]===c[f]){f=h;break a}f=l}a.push(f?1:0)}a=a.join("");a=a.replace(/^0+/,"");b=[];for(d=a.length;0<d;d-=4)c=a.slice(0>d-4?0:d-4,d),b.unshift(parseInt(c,2).toString(16));return b.join("")};function N(a){this.Ia=a}
N.prototype.j=function(a,b){var c=b||{},d=this.Ia.replace(/\{\/?([^*}]*)(\*?)\}/g,function(a,b,d){return d&&c[b]?"/"+c[b].join("/"):c[b]||""});d.match(/^\/\//)&&(d=(a?"https:":"http:")+d);return d.replace(/\/*\?*($|\?)/,"$1")};function O(a,b,c,d){this.F=a;this.N=b;this.Va=c;this.Wa=d;this.ga={};this.fa={}}O.prototype.B=function(a){return a?(this.ga[a]||this.N).slice(0):this.N.slice(0)};O.prototype.$=function(a,b,c){var d=[],e={};Ca(this,b,d,e);a(d,e,c)};
function Ca(a,b,c,d){c.push(a.F);d[a.F]=a.B(b);a=a.fa[b]||[];for(b=0;b<a.length;b++){for(var e=a[b],f=e.F,g=l,j=0;j<c.length;j++)c[j]==f&&(g=h);g||(c.push(f),d[f]=e.B())}}function Da(a,b){this.F=a;this.N=b}Da.prototype.B=m("N");function Ea(){this.oa=this.Ma=this.K=this.W=this.Da=h}function Q(a){return"Windows"===a.k}function R(a){return Q(a)&&0===w(a.h,new v(5,1))||Q(a)&&0===w(a.h,new v(5,2))||Q(a)&&0===w(a.h,new v(6,0))||Q(a)&&x(a.h,new v(6,1))}
function S(a){return"Macintosh"===a.k&&(x(a.h,new v(10,4))||a.h.e===k)}function Fa(a,b){return b.Da&&("iPhone"===a.k||"iPod"===a.k)}function Ga(a,b){return Fa(a,b)&&x(a.h,new v(4,2))&&-1===w(a.h,new v(5))}function Ha(a,b){return b.W&&"iPad"===a.k&&x(a.h,new v(4,2))&&-1===w(a.h,new v(5))}function T(a,b){return b.K&&"Android"===a.k}function Ia(a,b){return T(a,b)&&x(a.h,new v(2,2))&&-1===w(a.h,new v(3,1))}function Ja(a,b){return T(a,b)&&x(a.h,new v(3,1))&&-1===w(a.h,new v(4,1))}
function U(a){return"Linux"===a.k||"Ubuntu"===a.k}function Ka(a){return"Gecko"===a.u&&0===w(a.z,new v(1,9,1))&&!/^b[1-3]$/.test(a.z.j||"")}function La(a){return"Safari"===a.getName()&&"AppleWebKit"===a.u||"Unknown"===a.getName()&&"AppleWebKit"===a.u&&("iPhone"===a.k||"iPad"===a.k||"iPod"===a.k)}function Ma(a){return"Safari"===a.getName()&&"AppleWebKit"===a.u&&x(a.z,new v(525,13))&&-1===w(a.z,new v(534,50))}function Na(a){return"Opera"===a.getName()&&x(a.n,new v(10,54))&&-1===w(a.n,new v(11,10))}
function Oa(a){return"BuiltinBrowser"===a.getName()}function Pa(a){this.la=a}function Qa(a,b){return b}
var Ra={Pa:"a",Qa:"b",Ua:"d",Ta:"f",Na:"i"},Sa={a:function(a,b){return Ma(a)&&R(a)||Oa(a)&&(Ia(a,b)||T(a,b)&&x(a.h,new v(4,1)))||b.K&&"Silk"===a.getName()&&-1===w(a.n,new v(2))&&(Ia(a,b)||S)||b.K&&"Silk"===a.getName()&&x(a.n,new v(2))&&T(a,b)&&x(a.h,new v(4,1))||La(a)&&(Ha(a,b)||Ga(a,b))||Ka(a)&&(R(a)||U(a))||Na(a)&&(R(a)||U(a))||("Chrome"===a.getName()&&1===w(a.n,new v(4,0,249))&&-1===w(a.n,new v(6))||0===w(a.n,new v(4,0,249))&&(a.n.j===k||4<=a.n.j))&&(R(a)||U(a)||S(a))||"Chrome"===a.getName()&&
x(a.n,new v(6))&&(Ha(a,b)||Ga(a,b))||"AdobeAIR"===a.getName()&&x(a.n,new v(2,5))&&(Q(a)&&a.h.e===k||U(a))},b:function(a){return Ka(a)&&S(a)||Ma(a)&&S(a)||Na(a)&&S(a)||"AdobeAIR"===a.getName()&&x(a.n,new v(2,5))&&S(a)},d:function(a,b){return"Chrome"===a.getName()&&x(a.n,new v(6))&&(R(a)||U(a)||S(a)||T(a,b)||"CrOS"===a.k||b.W&&"iPad"===a.k&&x(a.h,new v(5))||Fa(a,b)&&x(a.h,new v(5)))||"Gecko"===a.u&&1===w(a.z,new v(1,9,1))&&(R(a)||U(a)||S(a)||T(a,b))||"Safari"===a.getName()&&("AppleWebKit"===a.u&&x(a.z,
new v(534,50)))&&(R(a)||S(a))||La(a)&&(b.W&&"iPad"===a.k&&x(a.h,new v(5))||Fa(a,b)&&x(a.h,new v(5)))||"Opera"===a.getName()&&x(a.n,new v(11,10))&&(R(a)||U(a)||S(a)||T(a,b))||"MSIE"===a.getName()&&9<=a.M&&(Q(a)&&x(a.h,new v(6,1))||Q(a)&&0===w(a.h,new v(6,0)))||"MSIE"===a.getName()&&b.Ma&&"Windows Phone"===a.k&&x(a.h,new v(8))||Oa(a)&&b.oa&&"BlackBerry"===a.k&&x(a.h,new v(10))},f:function(a,b){return Oa(a)&&Ja(a,b)||b.K&&"Silk"===a.getName()&&x(a.n,new v(2))&&(Ja(a,b)||U(a))},i:function(a){return"MSIE"===
a.getName()&&(x(a.n,new v(6,0))&&(void 0===a.M||9>a.M))&&R(a)}};function Ta(a,b){var c=b||new Ea,d;for(d in Ra){var e=Ra[d];if(Sa[e](a,c))return e}return k}var Ua={};
Ua.i=new Pa(function(a,b,c){for(var d=0;d<b.length;d+=1){var e=b[d],f=a.replace(/(-1|-2)$/,"").slice(0,28)+"-"+e;c.push(new Da(f,[e]))}a={};for(e=0;e<b.length;e++)c=b[e],d=c.charAt(1),(a[d]||(a[d]=[])).push(c);c=[[4,3,2,1,5,6,7,8,9],[7,8,9,6,5,4,3,2,1]];d=[];for(e=0;e<c.length;e++)for(var f=c[e],g=0;g<f.length;g++){var j=f[g];if(a[j]){d=d.concat(a[j]);break}}c=d;d={};a=[];for(e=0;e<c.length;e++)f=c[e],d[f]||(d[f]=h,a.push(f));c=[];for(d=0;d<b.length;d++){e=b[d];for(f=0;f<a.length;f++)g=a[f],g==e&&
c.push(g)}return c});var V={};V.a=V.b=V.d=function(){return[]};V.f=function(a){return[new Aa(a)]};V.i=function(a,b,c){return[new Aa(a),new Ba(b,c)]};function W(a){this.g=a;this.ea=this.c=this.q=k;this.r=[];this.T=[];this.na=this.U=k}W.prototype.supportsConfiguredBrowser=function(){return!!this.q};
W.prototype.init=function(){if(0<this.T.length){for(var a=[],b=0;b<this.T.length;b++)a.push(this.T[b].Xa());var b=this.g,a=a.join(""),c=this.g.createElement("style");c.setAttribute("type","text/css");c.styleSheet?c.styleSheet.cssText=a:c.appendChild(document.createTextNode(a));r(b,"head",c)}};
W.prototype.load=function(a,b){if(this.q){for(var c=Ua[this.q]||new Pa(Qa),d=0;d<this.r.length;d++){for(var e=this.r[d],f=this.q,g=c,j=[],p=e.F.split(",")[0].replace(/"|'/g,""),y=e.B(),ba=j,A=void 0,P=[],H={},ka=0;ka<y.length;ka++)A=y[ka],0<A.length&&!H[A]&&(H[A]=h,P.push(A));y=P;g=g.la?g.la(p,y,ba):y;e.ga[f]=g;e.fa[f]=j}if(this.U){c=V[this.q](this.g,this.q,this.r);d=this.q;e=[];for(f=0;f<c.length;f++)e.push(c[f].toString());var d=this.U.j("https:"===ia(this.g),{format:d,extras:e}),c=this.g,d=c.createElement("link",
{rel:"stylesheet",href:d}),X=l;d.onload=function(){X||(X=h)};d.onerror=function(){X||(X=h)};r(c,"head",d)}if(a){var la=this,bb=this.q;ga(this.g,function(){for(var c=0;c<la.r.length;c++)la.r[c].$(a,bb,b&&c==la.r.length-1)})}}};W.prototype.collectFontFamilies=function(a,b){if(this.q)for(var c=0;c<this.r.length;c++)Ca(this.r[c],this.q,a,b)};
W.prototype.performOptionalActions=function(){if(this.X){var a=this,b=this.c,c=this.g;ga(this.g,function(){var d=a.X;if(d.ka){var e=window.__adobewebfontsappname__,e=e?e.toString().substr(0,20):"",d=d.ka.j("https:"===ia(c),{host:encodeURIComponent(c.O.location.hostname||c.Y.location.hostname),app:encodeURIComponent(e),_:(+new Date).toString()}),f={};f.src=d;f.onload=function(){f.onload=k}}d=a.X;d.da&&(d=d.da.j(b,c),r(c,"body",d))})}};
function Va(a,b,c,d){this.Fa=a;this.g=b;this.c=c;this.l=d;this.s=[]}Va.prototype.R=function(a){this.s.push(a)};Va.prototype.load=function(a,b){var c=a,d=b||{};if("string"==typeof c)c=[c];else if(!c||!c.length)d=c||{},c=[];if(c.length)for(var e=this,f=c.length,g=0;g<c.length;g++){var j=this.Fa.j("https:"===ia(this.g),{id:encodeURIComponent(c[g])});ja(this.g,j,function(){0==--f&&Wa(e,d)})}else Wa(this,d)};
function Wa(a,b){if(0!=a.s.length){for(var c=new ra(a.g,a.l,b),d=l,e=0;e<a.s.length;e++)a.s[e].init(),d=d||a.s[e].supportsConfiguredBrowser();if(d){s(c.l,c.o.j(c.p,"loading"));G(c,"loading");for(var f=new M(a.c,a.g,c),c=function(a,b,c){for(var d=[],e=0;e<a.length;e+=1){var A=a[e];if(b[A])for(var P=b[A],H=0;H<P.length;H+=1)d.push(new J(A,P[H]));else d.push(new J(A))}f.$(d,{},k,c)},d=0;d<a.s.length;d++)e=a.s[d],e.supportsConfiguredBrowser()&&(e.load(c,d==a.s.length-1),e.performOptionalActions(window))}else sa(c);
a.s=[]}}function Xa(a){this.ha=a;this.s=[]}Xa.prototype.R=function(a){this.s.push(a)};Xa.prototype.load=function(){var a=this.ha.__webfonttypekitmodule__;if(a)for(var b=0;b<this.s.length;b++){var c=this.s[b],d=a[c.na];d&&d(function(a,b,d){a=[];b={};var j=(new na(navigator.userAgent,document)).parse(),p=c;p.c=j;p.q=Ta(p.c,p.ea);c.supportsConfiguredBrowser()&&(c.init(),c.load(k),c.collectFontFamilies(a,b),c.performOptionalActions(window));d(c.supportsConfiguredBrowser(),a,b)})}};
var Ya=(new na(navigator.userAgent,document)).parse();window.Typekit||(window.Typekit={});if(!window.Typekit.load){var Y=new Va(new N("//fonts.nokia.com/{id}.js"),new q(window),Ya,document.documentElement),Z=new Xa(window);window.Typekit.load=function(){Y.load.apply(Y,arguments)};window.Typekit.addKit=function(){Y.R.apply(Y,arguments)}}var Za=k,$a,$,Za=new N("//p.typekit.net/p.gif?a=533731&f=14762.14763.14764.14765.14766.14767.14768.14769&h={host}&ht=sh&k=ypi0jvg&s=1&_={_}");
$a=new function(){var a=Za;this.da=k;this.ka=a};$=new W(new q(window));$.na="ypi0jvg";$.U=new N("//fonts.nokia.com/k/ypi0jvg-{format}.css?3bb2a6e53c9684ffdc9a9bf41d5b2a62183a574751fd848f787439a977a54620814ca199afa669250281a910753f3cfc440d3fb397cc7048350ca6a32fd5c09ccc7d58c3301adfe14b0b00120529ea55b8c2a1b121641906e86d170ea02dc53f4600739ac242095fee3af3b8aab2c45af29734bb5fcc40371e0fb7e0c254b0");$.X=$a;$.r.push(new O("nokia-pure-headline",["n2","n3","n4","n7","n8"]));
$.r.push(new O("nokia-pure-text",["n3","n4","n7"]));var ab;if(ab=Z)ab=!!Z.ha.__webfonttypekitmodule__;ab?(Z.R($),Z.load()):($.c=Ya,$.q=Ta($.c,$.ea),window.Typekit.addKit($));
})(this,document);
if (window.performance) {
  var t = window.performance.timing, start = t.fetchStart, loaded = t.domLoading;
  if (t.domContentLoaded) { loaded = Math.max(loaded, t.domContentLoaded); }
  if (t.domContentLoadedEventStart) { loaded = Math.max(loaded, t.domContentLoadedEventStart); }
  if (t.domInteractive) { loaded = Math.max(loaded, t.domInteractive); }
  // if browser took longer than 5 seconds to reach this point set a flag to optimize site for slow connections
  if (start > 0 && loaded > 0) {
    var a = document.getElementById('html-tag');
    a = a.attributes.getNamedItem('slowConnectionTimeout');
    var timeout = 5000;
    if (a) { timeout = a.value }
    window.slowConnection = loaded - start > timeout;
  }
}
if (window.location.search.indexOf("debugmode=screenshot")>0) {
  window.slowConnection = false;
}
if (window.location.search.indexOf("debugslow=")>0) {
  window.slowConnection = true;
}

{
  var fontsFailed = function() {
    var h = document.getElementById('html-tag');
    h.className = h.className.replace(/(\s|^)wf-loading(\s|$)/g, ' ');
  };
  if (window.slowConnection != true && window.typeKitConfig !== undefined) {
    // give typekit 2 seconds to load all fonts before forcefully viewing the site
    setTimeout(function() { fontsFailed(); }, 2000);
    try { Typekit.load(window.typeKitConfig); } catch (e) { fontsFailed(); }
  } else {
    fontsFailed();
  }
}
;
/* Modernizr 2.6.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-csscolumns-csstransitions-history-touch-mq-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes-cssclassprefix:feature!
 */

;window.Modernizr=function(a,b,c){function A(a){j.cssText=a}function B(a,b){return A(m.join(a+";")+(b||""))}function C(a,b){return typeof a===b}function D(a,b){return!!~(""+a).indexOf(b)}function E(a,b){for(var d in a){var e=a[d];if(!D(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function F(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:C(f,"function")?f.bind(d||b):f}return!1}function G(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+o.join(d+" ")+d).split(" ");return C(b,"string")||C(b,"undefined")?E(e,b):(e=(a+" "+p.join(d+" ")+d).split(" "),F(e,b,c))}var d="2.6.3",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k,l={}.toString,m=" -webkit- -moz- -o- -ms- ".split(" "),n="Webkit Moz O ms",o=n.split(" "),p=n.toLowerCase().split(" "),q={},r={},s={},t=[],u=t.slice,v,w=function(a,c,d,e){var f,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=["&#173;",'<style id="s',h,'">',a,"</style>"].join(""),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=g.style.overflow,g.style.overflow="hidden",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},x=function(b){var c=a.matchMedia||a.msMatchMedia;if(c)return c(b).matches;var d;return w("@media "+b+" { #"+h+" { position: absolute; } }",function(b){d=(a.getComputedStyle?getComputedStyle(b,null):b.currentStyle)["position"]=="absolute"}),d},y={}.hasOwnProperty,z;!C(y,"undefined")&&!C(y.call,"undefined")?z=function(a,b){return y.call(a,b)}:z=function(a,b){return b in a&&C(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=u.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(u.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(u.call(arguments)))};return e}),q.touch=function(){var c;return"ontouchstart"in a||a.DocumentTouch&&b instanceof DocumentTouch?c=!0:w(["@media (",m.join("touch-enabled),("),h,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(a){c=a.offsetTop===9}),c},q.history=function(){return!!a.history&&!!history.pushState},q.csscolumns=function(){return G("columnCount")},q.csstransitions=function(){return G("transition")};for(var H in q)z(q,H)&&(v=H.toLowerCase(),e[v]=q[H](),t.push((e[v]?"":"no-")+v));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)z(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" feature-"+(b?"":"no-")+a),e[a]=b}return e},A(""),i=k=null,e._version=d,e._prefixes=m,e._domPrefixes=p,e._cssomPrefixes=o,e.mq=x,e.testProp=function(a){return E([a])},e.testAllProps=G,e.testStyles=w,e.prefixed=function(a,b,c){return b?G(a,b,c):G(a,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" feature-js feature-"+t.join(" feature-"):""),e}(this,this.document);
;(function(Modernizr, window) {
  Modernizr.addTest('positionfixed', function () {
    var test  = document.createElement('div'),
    control = test.cloneNode(false),
    fake = false,
    root = document.body || (function () {
      fake = true;
      return document.documentElement.appendChild(document.createElement('body'));
    }());

    var oldCssText = root.style.cssText;
    root.style.cssText = 'padding:0;margin:0';
    test.style.cssText = 'position:fixed;top:42px';
    root.appendChild(test);
    root.appendChild(control);

    var ret = test.offsetTop !== control.offsetTop;

    root.removeChild(test);
    root.removeChild(control);
    root.style.cssText = oldCssText;

    if (fake) {
      document.documentElement.removeChild(root);
    }

    return ret;
  });

  Modernizr.addTest('iospositionfixed', function () {
    var test  = document.createElement('div'),
    ret,
    fake = false,
    root = document.body || (function () {
    fake = true;
    return document.documentElement.appendChild(document.createElement('body'));
  }());

  if (typeof document.body.scrollIntoViewIfNeeded === 'function') {

    var oldCssText = root.style.cssText,
    testScrollTop = 20,
    originalScrollTop = window.pageYOffset;

    root.appendChild(test);

    test.style.cssText = 'position:fixed;top:0px;height:10px;';

    root.style.height="3000px";

    /* avoided hoisting for clarity */
    var testScroll = function() {
      if (ret === undefined) {
        test.scrollIntoViewIfNeeded();
        if (window.pageYOffset === testScrollTop) {
          ret = true;
        } else {
          ret = false;
        }
      }
      window.removeEventListener('scroll', testScroll, false);
    };

    window.addEventListener('scroll', testScrollTop, false);
    window.setTimeout(testScroll, 20); // ios 4 does'nt publish the scroll event on scrollto
    window.scrollTo(0, testScrollTop);
    testScroll();

    root.removeChild(test);
    root.style.cssText = oldCssText;
    window.scrollTo(0, originalScrollTop);

    } else {
      ret = Modernizr.positionfixed; // firefox and IE doesnt have document.body.scrollIntoViewIfNeeded, so we test with the original modernizr test
    }

    if (fake) {
    document.documentElement.removeChild(root);
    }

    return ret;
  });
})(Modernizr, window);
;(function(Modernizr, window) {
Modernizr.addTest('fullscreen',function(){
	var ancelFullScreen = 'ancelFullScreen'; //make string minifiable

	//FF9 pre-check
	if(document.mozCancelFullScreen && !document.mozFullScreenEnabled) return false;

	var limit = Modernizr._domPrefixes.length;
	for(var i = 0; i < limit; ++i) {
	  if( document[[Modernizr._domPrefixes[i].toLowerCase(),'C',ancelFullScreen].join('')])
	      return true;
	}
	return !!document[['c',ancelFullScreen].join('')] || false;
});
})(Modernizr, window);
// http://www.quirksmode.org/js/detect.html
var BrowserDetect = {
	init: function() {
		this.browser = this.searchString(this.dataBrowser) || 'An unknown browser';
		this.version = this.searchVersion(navigator.userAgent)
			|| this.searchVersion(navigator.appVersion)
			|| 'an unknown version';
		this.OS = this.searchString(this.dataOS) || 'an unknown OS';
	},
	searchString: function(data) {
		for (var i=0;i<data.length;i++) {
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) {
				if (dataString.indexOf(data[i].subString) != -1)
					return data[i].identity;
			} else if (dataProp) {
				return data[i].identity;
			}
		}
	},
	searchVersion: function(dataString) {
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return;
		return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
	},
	dataBrowser: [
		{
			string: navigator.userAgent,
			subString: 'Chrome',
			identity: 'Chrome'
		},
		{
			string: navigator.userAgent,
			subString: 'OmniWeb',
			identity: 'OmniWeb',
			versionSearch: 'OmniWeb/'
		},
        {
            string: navigator.userAgent,
            subString: 'SymbianOS',
            identity: 'Symbian',
            versionSearch: 'SymbianOS'
        },
		{
			string: navigator.userAgent,
			subString: 'Symbian',
			identity: 'Symbian',
			versionSearch: 'Symbian'
		},
        {
            string: navigator.userAgent,
            subString: 'Profile/MIDP',
            identity: 'Symbian'
        },
		{
			string: navigator.vendor,
			subString: 'Apple',
			identity: 'Safari',
			versionSearch: 'Version'
		},
		{
			prop: window.opera,
			identity: 'Opera',
			versionSearch: 'Version'
		},
		{
			string: navigator.vendor,
			subString: 'iCab',
			identity: 'iCab'
		},
		{
			string: navigator.vendor,
			subString: 'KDE',
			identity: 'Konqueror'
		},
		{
			string: navigator.userAgent,
			subString: 'Firefox',
			identity: 'Firefox'
		},
		{
			string: navigator.vendor,
			subString: 'Camino',
			identity: 'Camino'
		},
		{
			// for newer Netscapes (6+)
			string: navigator.userAgent,
			subString: 'Netscape',
			identity: 'Netscape'
		},
		{
			string: navigator.userAgent,
			subString: 'IEMobile',
			identity: 'IEMobile'
		},
		{
			string: navigator.userAgent,
			subString: 'XBLWP7',
			identity: 'IEMobile',
			versionSearch: 'MSIE'
		},
		{
			string: navigator.userAgent,
			subString: 'WPDesktop',
			identity: 'IEMobile',
			versionSearch: 'MSIE'
		},
		{
			string: navigator.userAgent,
			subString: 'MSIE',
			identity: 'Explorer',
			versionSearch: 'MSIE'
		},
        {
            string: navigator.userAgent,
            subString: 'OSRE',
            identity: 'Symbian'
        },
		{
			string: navigator.userAgent,
			subString: 'Gecko',
			identity: 'Mozilla',
			versionSearch: 'rv'
		},
		{
			// for older Netscapes (4-)
			string: navigator.userAgent,
			subString: 'Mozilla',
			identity: 'Netscape',
			versionSearch: 'Mozilla'
		}
	],
	dataOS: [
		{
			string: navigator.platform,
			subString: 'Win',
			identity: 'Windows'
		},
		{
			string: navigator.platform,
			subString: 'Mac',
			identity: 'Mac'
		},
		{
			string: navigator.userAgent,
			subString: 'iPhone',
			identity: 'iPhone/iPod'
		},
		{
			string: navigator.userAgent,
			subString: 'iPad',
			identity: 'iPad'
		},
        {
			string: navigator.platform,
        	subString: 'Android',
        	identity: 'Android'
		},
		{
			string: navigator.platform,
			subString: 'Linux',
			identity: 'Linux'
		},
		{
			string: navigator.platform,
			subString: 'Symbian',
			identity: 'Symbian'
                }
	]
};

BrowserDetect.init();
/**
 * @fileoverview Main function src.
 */

// HTML5 Shiv. Must be in <head> to support older browsers.
document.createElement('video');
document.createElement('audio');
document.createElement('track');

/**
 * Doubles as the main function for users to create a player instance and also
 * the main library object.
 *
 * @param  {String|Element} id      Video element or video element ID
 * @param  {Object=} options        Optional options object for config/settings
 * @param  {Function=} ready        Optional ready callback
 * @return {vjs.Player}             A player instance
 */
var vjs = function(id, options, ready){
  var tag; // Element of ID

  // Allow for element or ID to be passed in
  // String ID
  if (typeof id === 'string') {

    // Adjust for jQuery ID syntax
    if (id.indexOf('#') === 0) {
      id = id.slice(1);
    }

    // If a player instance has already been created for this ID return it.
    if (vjs.players[id]) {
      return vjs.players[id];

    // Otherwise get element for ID
    } else {
      tag = vjs.el(id);
    }

  // ID is a media element
  } else {
    tag = id;
  }

  // Check for a useable element
  if (!tag || !tag.nodeName) { // re: nodeName, could be a box div also
    throw new TypeError('The element or ID supplied is not valid. (videojs)'); // Returns
  }

  // Element may have a player attr referring to an already created player instance.
  // If not, set up a new player and return the instance.
  return tag['player'] || new vjs.Player(tag, options, ready);
};

// Extended name, also available externally, window.videojs
var videojs = vjs;
window.videojs = window.vjs = vjs;

// CDN Version. Used to target right flash swf.
vjs.CDN_VERSION = '4.2';
vjs.ACCESS_PROTOCOL = ('https:' == document.location.protocol ? 'https://' : 'http://');

/**
 * Global Player instance options, surfaced from vjs.Player.prototype.options_
 * vjs.options = vjs.Player.prototype.options_
 * All options should use string keys so they avoid
 * renaming by closure compiler
 * @type {Object}
 */
vjs.options = {
  // Default order of fallback technology
  'techOrder': ['html5','flash'],
  // techOrder: ['flash','html5'],

  'html5': {},
  'flash': {},

  // Default of web browser is 300x150. Should rely on source width/height.
  'width': 300,
  'height': 150,
  // defaultVolume: 0.85,
  'defaultVolume': 0.00, // The freakin seaguls are driving me crazy!

  // Included control sets
  'children': {
    'mediaLoader': {},
    'posterImage': {},
    'textTrackDisplay': {},
    'loadingSpinner': {},
    'bigPlayButton': {},
    'controlBar': {}
  },

  // Default message to show when a video cannot be played.
  'notSupportedMessage': 'Sorry, no compatible source and playback ' +
      'technology were found for this video. Try using another browser ' +
      'like <a href="http://bit.ly/ccMUEC">Chrome</a> or download the ' +
      'latest <a href="http://adobe.ly/mwfN1">Adobe Flash Player</a>.'
};

// Set CDN Version of swf
// The added (+) blocks the replace from changing this 4.2 string
if (vjs.CDN_VERSION !== 'GENERATED'+'_CDN_VSN') {
  videojs.options['flash']['swf'] = vjs.ACCESS_PROTOCOL + 'vjs.zencdn.net/'+vjs.CDN_VERSION+'/video-js.swf';
}

/**
 * Global player list
 * @type {Object}
 */
vjs.players = {};
/**
 * Core Object/Class for objects that use inheritance + contstructors
 * @constructor
 */
vjs.CoreObject = vjs['CoreObject'] = function(){};
// Manually exporting vjs['CoreObject'] here for Closure Compiler
// because of the use of the extend/create class methods
// If we didn't do this, those functions would get flattend to something like
// `a = ...` and `this.prototype` would refer to the global object instead of
// CoreObject

/**
 * Create a new object that inherits from this Object
 * @param {Object} props Functions and properties to be applied to the
 *                       new object's prototype
 * @return {vjs.CoreObject} Returns an object that inherits from CoreObject
 * @this {*}
 */
vjs.CoreObject.extend = function(props){
  var init, subObj;

  props = props || {};
  // Set up the constructor using the supplied init method
  // or using the init of the parent object
  // Make sure to check the unobfuscated version for external libs
  init = props['init'] || props.init || this.prototype['init'] || this.prototype.init || function(){};
  // In Resig's simple class inheritance (previously used) the constructor
  //  is a function that calls `this.init.apply(arguments)`
  // However that would prevent us from using `ParentObject.call(this);`
  //  in a Child constuctor because the `this` in `this.init`
  //  would still refer to the Child and cause an inifinite loop.
  // We would instead have to do
  //    `ParentObject.prototype.init.apply(this, argumnents);`
  //  Bleh. We're not creating a _super() function, so it's good to keep
  //  the parent constructor reference simple.
  subObj = function(){
    init.apply(this, arguments);
  };

  // Inherit from this object's prototype
  subObj.prototype = vjs.obj.create(this.prototype);
  // Reset the constructor property for subObj otherwise
  // instances of subObj would have the constructor of the parent Object
  subObj.prototype.constructor = subObj;

  // Make the class extendable
  subObj.extend = vjs.CoreObject.extend;
  // Make a function for creating instances
  subObj.create = vjs.CoreObject.create;

  // Extend subObj's prototype with functions and other properties from props
  for (var name in props) {
    if (props.hasOwnProperty(name)) {
      subObj.prototype[name] = props[name];
    }
  }

  return subObj;
};

/**
 * Create a new instace of this Object class
 * @return {vjs.CoreObject} Returns an instance of a CoreObject subclass
 * @this {*}
 */
vjs.CoreObject.create = function(){
  // Create a new object that inherits from this object's prototype
  var inst = vjs.obj.create(this.prototype);

  // Apply this constructor function to the new object
  this.apply(inst, arguments);

  // Return the new object
  return inst;
};
/**
 * @fileoverview Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
 * robust as jquery's, so there's probably some differences.
 */

/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 * @param  {Element|Object}   elem Element or object to bind listeners to
 * @param  {String}   type Type of event to bind to.
 * @param  {Function} fn   Event listener.
 */
vjs.on = function(elem, type, fn){
  var data = vjs.getData(elem);

  // We need a place to store all our handler data
  if (!data.handlers) data.handlers = {};

  if (!data.handlers[type]) data.handlers[type] = [];

  if (!fn.guid) fn.guid = vjs.guid++;

  data.handlers[type].push(fn);

  if (!data.dispatcher) {
    data.disabled = false;

    data.dispatcher = function (event){

      if (data.disabled) return;
      event = vjs.fixEvent(event);

      var handlers = data.handlers[event.type];

      if (handlers) {
        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
        var handlersCopy = handlers.slice(0);

        for (var m = 0, n = handlersCopy.length; m < n; m++) {
          if (event.isImmediatePropagationStopped()) {
            break;
          } else {
            handlersCopy[m].call(elem, event);
          }
        }
      }
    };
  }

  if (data.handlers[type].length == 1) {
    if (document.addEventListener) {
      elem.addEventListener(type, data.dispatcher, false);
    } else if (document.attachEvent) {
      elem.attachEvent('on' + type, data.dispatcher);
    }
  }
};

/**
 * Removes event listeners from an element
 * @param  {Element|Object}   elem Object to remove listeners from
 * @param  {String=}   type Type of listener to remove. Don't include to remove all events from element.
 * @param  {Function} fn   Specific listener to remove. Don't incldue to remove listeners for an event type.
 */
vjs.off = function(elem, type, fn) {
  // Don't want to add a cache object through getData if not needed
  if (!vjs.hasData(elem)) return;

  var data = vjs.getData(elem);

  // If no events exist, nothing to unbind
  if (!data.handlers) { return; }

  // Utility function
  var removeType = function(t){
     data.handlers[t] = [];
     vjs.cleanUpEvents(elem,t);
  };

  // Are we removing all bound events?
  if (!type) {
    for (var t in data.handlers) removeType(t);
    return;
  }

  var handlers = data.handlers[type];

  // If no handlers exist, nothing to unbind
  if (!handlers) return;

  // If no listener was provided, remove all listeners for type
  if (!fn) {
    removeType(type);
    return;
  }

  // We're only removing a single handler
  if (fn.guid) {
    for (var n = 0; n < handlers.length; n++) {
      if (handlers[n].guid === fn.guid) {
        handlers.splice(n--, 1);
      }
    }
  }

  vjs.cleanUpEvents(elem, type);
};

/**
 * Clean up the listener cache and dispatchers
 * @param  {Element|Object} elem Element to clean up
 * @param  {String} type Type of event to clean up
 */
vjs.cleanUpEvents = function(elem, type) {
  var data = vjs.getData(elem);

  // Remove the events of a particular type if there are none left
  if (data.handlers[type].length === 0) {
    delete data.handlers[type];
    // data.handlers[type] = null;
    // Setting to null was causing an error with data.handlers

    // Remove the meta-handler from the element
    if (document.removeEventListener) {
      elem.removeEventListener(type, data.dispatcher, false);
    } else if (document.detachEvent) {
      elem.detachEvent('on' + type, data.dispatcher);
    }
  }

  // Remove the events object if there are no types left
  if (vjs.isEmpty(data.handlers)) {
    delete data.handlers;
    delete data.dispatcher;
    delete data.disabled;

    // data.handlers = null;
    // data.dispatcher = null;
    // data.disabled = null;
  }

  // Finally remove the expando if there is no data left
  if (vjs.isEmpty(data)) {
    vjs.removeData(elem);
  }
};

/**
 * Fix a native event to have standard property values
 * @param  {Object} event Event object to fix
 * @return {Object}
 */
vjs.fixEvent = function(event) {

  function returnTrue() { return true; }
  function returnFalse() { return false; }

  // Test if fixing up is needed
  // Used to check if !event.stopPropagation instead of isPropagationStopped
  // But native events return true for stopPropagation, but don't have
  // other expected methods like isPropagationStopped. Seems to be a problem
  // with the Javascript Ninja code. So we're just overriding all events now.
  if (!event || !event.isPropagationStopped) {
    var old = event || window.event;

    event = {};
    // Clone the old object so that we can modify the values event = {};
    // IE8 Doesn't like when you mess with native event properties
    // Firefox returns false for event.hasOwnProperty('type') and other props
    //  which makes copying more difficult.
    // TODO: Probably best to create a whitelist of event props
    for (var key in old) {
      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
      if (key !== 'layerX' && key !== 'layerY') {
        event[key] = old[key];
      }
    }

    // The event occurred on this element
    if (!event.target) {
      event.target = event.srcElement || document;
    }

    // Handle which other element the event is related to
    event.relatedTarget = event.fromElement === event.target ?
      event.toElement :
      event.fromElement;

    // Stop the default browser action
    event.preventDefault = function () {
      if (old.preventDefault) {
        old.preventDefault();
      }
      event.returnValue = false;
      event.isDefaultPrevented = returnTrue;
    };

    event.isDefaultPrevented = returnFalse;

    // Stop the event from bubbling
    event.stopPropagation = function () {
      if (old.stopPropagation) {
        old.stopPropagation();
      }
      event.cancelBubble = true;
      event.isPropagationStopped = returnTrue;
    };

    event.isPropagationStopped = returnFalse;

    // Stop the event from bubbling and executing other handlers
    event.stopImmediatePropagation = function () {
      if (old.stopImmediatePropagation) {
        old.stopImmediatePropagation();
      }
      event.isImmediatePropagationStopped = returnTrue;
      event.stopPropagation();
    };

    event.isImmediatePropagationStopped = returnFalse;

    // Handle mouse position
    if (event.clientX != null) {
      var doc = document.documentElement, body = document.body;

      event.pageX = event.clientX +
        (doc && doc.scrollLeft || body && body.scrollLeft || 0) -
        (doc && doc.clientLeft || body && body.clientLeft || 0);
      event.pageY = event.clientY +
        (doc && doc.scrollTop || body && body.scrollTop || 0) -
        (doc && doc.clientTop || body && body.clientTop || 0);
    }

    // Handle key presses
    event.which = event.charCode || event.keyCode;

    // Fix button for mouse clicks:
    // 0 == left; 1 == middle; 2 == right
    if (event.button != null) {
      event.button = (event.button & 1 ? 0 :
        (event.button & 4 ? 1 :
          (event.button & 2 ? 2 : 0)));
    }
  }

  // Returns fixed-up instance
  return event;
};

/**
 * Trigger an event for an element
 * @param  {Element|Object} elem  Element to trigger an event on
 * @param  {String} event Type of event to trigger
 */
vjs.trigger = function(elem, event) {
  // Fetches element data and a reference to the parent (for bubbling).
  // Don't want to add a data object to cache for every parent,
  // so checking hasData first.
  var elemData = (vjs.hasData(elem)) ? vjs.getData(elem) : {};
  var parent = elem.parentNode || elem.ownerDocument;
      // type = event.type || event,
      // handler;

  // If an event name was passed as a string, creates an event out of it
  if (typeof event === 'string') {
    event = { type:event, target:elem };
  }
  // Normalizes the event properties.
  event = vjs.fixEvent(event);

  // If the passed element has a dispatcher, executes the established handlers.
  if (elemData.dispatcher) {
    elemData.dispatcher.call(elem, event);
  }

  // Unless explicitly stopped or the event does not bubble (e.g. media events)
    // recursively calls this function to bubble the event up the DOM.
    if (parent && !event.isPropagationStopped() && event.bubbles !== false) {
    vjs.trigger(parent, event);

  // If at the top of the DOM, triggers the default action unless disabled.
  } else if (!parent && !event.isDefaultPrevented()) {
    var targetData = vjs.getData(event.target);

    // Checks if the target has a default action for this event.
    if (event.target[event.type]) {
      // Temporarily disables event dispatching on the target as we have already executed the handler.
      targetData.disabled = true;
      // Executes the default action.
      if (typeof event.target[event.type] === 'function') {
        event.target[event.type]();
      }
      // Re-enables event dispatching.
      targetData.disabled = false;
    }
  }

  // Inform the triggerer if the default was prevented by returning false
  return !event.isDefaultPrevented();
  /* Original version of js ninja events wasn't complete.
   * We've since updated to the latest version, but keeping this around
   * for now just in case.
   */
  // // Added in attion to book. Book code was broke.
  // event = typeof event === 'object' ?
  //   event[vjs.expando] ?
  //     event :
  //     new vjs.Event(type, event) :
  //   new vjs.Event(type);

  // event.type = type;
  // if (handler) {
  //   handler.call(elem, event);
  // }

  // // Clean up the event in case it is being reused
  // event.result = undefined;
  // event.target = elem;
};

/**
 * Trigger a listener only once for an event
 * @param  {Element|Object}   elem Element or object to
 * @param  {[type]}   type [description]
 * @param  {Function} fn   [description]
 * @return {[type]}
 */
vjs.one = function(elem, type, fn) {
  var func = function(){
    vjs.off(elem, type, func);
    fn.apply(this, arguments);
  };
  func.guid = fn.guid = fn.guid || vjs.guid++;
  vjs.on(elem, type, func);
};
var hasOwnProp = Object.prototype.hasOwnProperty;

/**
 * Creates an element and applies properties.
 * @param  {String=} tagName    Name of tag to be created.
 * @param  {Object=} properties Element properties to be applied.
 * @return {Element}
 */
vjs.createEl = function(tagName, properties){
  var el, propName;

  el = document.createElement(tagName || 'div');

  for (propName in properties){
    if (hasOwnProp.call(properties, propName)) {
      //el[propName] = properties[propName];
      // Not remembering why we were checking for dash
      // but using setAttribute means you have to use getAttribute

      // The check for dash checks for the aria-* attributes, like aria-label, aria-valuemin.
      // The additional check for "role" is because the default method for adding attributes does not
      // add the attribute "role". My guess is because it's not a valid attribute in some namespaces, although
      // browsers handle the attribute just fine. The W3C allows for aria-* attributes to be used in pre-HTML5 docs.
      // http://www.w3.org/TR/wai-aria-primer/#ariahtml. Using setAttribute gets around this problem.

       if (propName.indexOf('aria-') !== -1 || propName=='role') {
         el.setAttribute(propName, properties[propName]);
       } else {
         el[propName] = properties[propName];
       }
    }
  }
  return el;
};

/**
 * Uppercase the first letter of a string
 * @param  {String} string String to be uppercased
 * @return {String}
 */
vjs.capitalize = function(string){
  return string.charAt(0).toUpperCase() + string.slice(1);
};

/**
 * Object functions container
 * @type {Object}
 */
vjs.obj = {};

/**
 * Object.create shim for prototypal inheritance.
 * https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create
 * @param  {Object}   obj Object to use as prototype
 */
 vjs.obj.create = Object.create || function(obj){
  //Create a new function called 'F' which is just an empty object.
  function F() {}

  //the prototype of the 'F' function should point to the
  //parameter of the anonymous function.
  F.prototype = obj;

  //create a new constructor function based off of the 'F' function.
  return new F();
};

/**
 * Loop through each property in an object and call a function
 * whose arguments are (key,value)
 * @param  {Object}   obj Object of properties
 * @param  {Function} fn  Function to be called on each property.
 * @this {*}
 */
vjs.obj.each = function(obj, fn, context){
  for (var key in obj) {
    if (hasOwnProp.call(obj, key)) {
      fn.call(context || this, key, obj[key]);
    }
  }
};

/**
 * Merge two objects together and return the original.
 * @param  {Object} obj1
 * @param  {Object} obj2
 * @return {Object}
 */
vjs.obj.merge = function(obj1, obj2){
  if (!obj2) { return obj1; }
  for (var key in obj2){
    if (hasOwnProp.call(obj2, key)) {
      obj1[key] = obj2[key];
    }
  }
  return obj1;
};

/**
 * Merge two objects, and merge any properties that are objects
 * instead of just overwriting one. Uses to merge options hashes
 * where deeper default settings are important.
 * @param  {Object} obj1 Object to override
 * @param  {Object} obj2 Overriding object
 * @return {Object}      New object. Obj1 and Obj2 will be untouched.
 */
vjs.obj.deepMerge = function(obj1, obj2){
  var key, val1, val2;

  // make a copy of obj1 so we're not ovewriting original values.
  // like prototype.options_ and all sub options objects
  obj1 = vjs.obj.copy(obj1);

  for (key in obj2){
    if (hasOwnProp.call(obj2, key)) {
      val1 = obj1[key];
      val2 = obj2[key];

      // Check if both properties are pure objects and do a deep merge if so
      if (vjs.obj.isPlain(val1) && vjs.obj.isPlain(val2)) {
        obj1[key] = vjs.obj.deepMerge(val1, val2);
      } else {
        obj1[key] = obj2[key];
      }
    }
  }
  return obj1;
};

/**
 * Make a copy of the supplied object
 * @param  {Object} obj Object to copy
 * @return {Object}     Copy of object
 */
vjs.obj.copy = function(obj){
  return vjs.obj.merge({}, obj);
};

/**
 * Check if an object is plain, and not a dom node or any object sub-instance
 * @param  {Object} obj Object to check
 * @return {Boolean}     True if plain, false otherwise
 */
vjs.obj.isPlain = function(obj){
  return !!obj
    && typeof obj === 'object'
    && obj.toString() === '[object Object]'
    && obj.constructor === Object;
};

/**
 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
   It also stores a unique id on the function so it can be easily removed from events
 * @param  {*}   context The object to bind as scope
 * @param  {Function} fn      The function to be bound to a scope
 * @param  {Number=}   uid     An optional unique ID for the function to be set
 * @return {Function}
 */
vjs.bind = function(context, fn, uid) {
  // Make sure the function has a unique ID
  if (!fn.guid) { fn.guid = vjs.guid++; }

  // Create the new function that changes the context
  var ret = function() {
    return fn.apply(context, arguments);
  };

  // Allow for the ability to individualize this function
  // Needed in the case where multiple objects might share the same prototype
  // IF both items add an event listener with the same function, then you try to remove just one
  // it will remove both because they both have the same guid.
  // when using this, you need to use the bind method when you remove the listener as well.
  // currently used in text tracks
  ret.guid = (uid) ? uid + '_' + fn.guid : fn.guid;

  return ret;
};

/**
 * Element Data Store. Allows for binding data to an element without putting it directly on the element.
 * Ex. Event listneres are stored here.
 * (also from jsninja.com, slightly modified and updated for closure compiler)
 * @type {Object}
 */
vjs.cache = {};

/**
 * Unique ID for an element or function
 * @type {Number}
 */
vjs.guid = 1;

/**
 * Unique attribute name to store an element's guid in
 * @type {String}
 * @constant
 */
vjs.expando = 'vdata' + (new Date()).getTime();

/**
 * Returns the cache object where data for an element is stored
 * @param  {Element} el Element to store data for.
 * @return {Object}
 */
vjs.getData = function(el){
  var id = el[vjs.expando];
  if (!id) {
    id = el[vjs.expando] = vjs.guid++;
    vjs.cache[id] = {};
  }
  return vjs.cache[id];
};

/**
 * Returns the cache object where data for an element is stored
 * @param  {Element} el Element to store data for.
 * @return {Object}
 */
vjs.hasData = function(el){
  var id = el[vjs.expando];
  return !(!id || vjs.isEmpty(vjs.cache[id]));
};

/**
 * Delete data for the element from the cache and the guid attr from getElementById
 * @param  {Element} el Remove data for an element
 */
vjs.removeData = function(el){
  var id = el[vjs.expando];
  if (!id) { return; }
  // Remove all stored data
  // Changed to = null
  // http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/
  // vjs.cache[id] = null;
  delete vjs.cache[id];

  // Remove the expando property from the DOM node
  try {
    delete el[vjs.expando];
  } catch(e) {
    if (el.removeAttribute) {
      el.removeAttribute(vjs.expando);
    } else {
      // IE doesn't appear to support removeAttribute on the document element
      el[vjs.expando] = null;
    }
  }
};

vjs.isEmpty = function(obj) {
  for (var prop in obj) {
    // Inlude null properties as empty.
    if (obj[prop] !== null) {
      return false;
    }
  }
  return true;
};

/**
 * Add a CSS class name to an element
 * @param {Element} element    Element to add class name to
 * @param {String} classToAdd Classname to add
 */
vjs.addClass = function(element, classToAdd){
  if ((' '+element.className+' ').indexOf(' '+classToAdd+' ') == -1) {
    element.className = element.className === '' ? classToAdd : element.className + ' ' + classToAdd;
  }
};

/**
 * Remove a CSS class name from an element
 * @param {Element} element    Element to remove from class name
 * @param {String} classToAdd Classname to remove
 */
vjs.removeClass = function(element, classToRemove){
  var classNames, i;

  if (element.className.indexOf(classToRemove) == -1) { return; }

  classNames = element.className.split(' ');

  // no arr.indexOf in ie8, and we don't want to add a big shim
  for (i = classNames.length - 1; i >= 0; i--) {
    if (classNames[i] === classToRemove) {
      classNames.splice(i,1);
    }
  }

  element.className = classNames.join(' ');
};

/**
 * Element for testing browser HTML5 video capabilities
 * @type {Element}
 * @constant
 */
vjs.TEST_VID = vjs.createEl('video');

/**
 * Useragent for browser testing.
 * @type {String}
 * @constant
 */
vjs.USER_AGENT = navigator.userAgent;

/**
 * Device is an iPhone
 * @type {Boolean}
 * @constant
 */
vjs.IS_IPHONE = (/iPhone/i).test(vjs.USER_AGENT);
vjs.IS_IPAD = (/iPad/i).test(vjs.USER_AGENT);
vjs.IS_IPOD = (/iPod/i).test(vjs.USER_AGENT);
vjs.IS_IOS = vjs.IS_IPHONE || vjs.IS_IPAD || vjs.IS_IPOD;

vjs.IOS_VERSION = (function(){
  var match = vjs.USER_AGENT.match(/OS (\d+)_/i);
  if (match && match[1]) { return match[1]; }
})();

vjs.IS_ANDROID = (/Android/i).test(vjs.USER_AGENT);
vjs.ANDROID_VERSION = (function() {
  // This matches Android Major.Minor.Patch versions
  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
  var match = vjs.USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i),
    major,
    minor;

  if (!match) {
    return null;
  }

  major = match[1] && parseFloat(match[1]);
  minor = match[2] && parseFloat(match[2]);

  if (major && minor) {
    return parseFloat(match[1] + '.' + match[2]);
  } else if (major) {
    return major;
  } else {
    return null;
  }
})();
// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
vjs.IS_OLD_ANDROID = vjs.IS_ANDROID && (/webkit/i).test(vjs.USER_AGENT) && vjs.ANDROID_VERSION < 2.3;

vjs.IS_FIREFOX = (/Firefox/i).test(vjs.USER_AGENT);
vjs.IS_CHROME = (/Chrome/i).test(vjs.USER_AGENT);

vjs.TOUCH_ENABLED = ('ontouchstart' in window);

/**
 * Get an element's attribute values, as defined on the HTML tag
 * Attributs are not the same as properties. They're defined on the tag
 * or with setAttribute (which shouldn't be used with HTML)
 * This will return true or false for boolean attributes.
 * @param  {Element} tag Element from which to get tag attributes
 * @return {Object}
 */
vjs.getAttributeValues = function(tag){
  var obj, knownBooleans, attrs, attrName, attrVal;

  obj = {};

  // known boolean attributes
  // we can check for matching boolean properties, but older browsers
  // won't know about HTML5 boolean attributes that we still read from
  knownBooleans = ','+'autoplay,controls,loop,muted,default'+',';

  if (tag && tag.attributes && tag.attributes.length > 0) {
    attrs = tag.attributes;

    for (var i = attrs.length - 1; i >= 0; i--) {
      attrName = attrs[i].name;
      attrVal = attrs[i].value;

      // check for known booleans
      // the matching element property will return a value for typeof
      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(','+attrName+',') !== -1) {
        // the value of an included boolean attribute is typically an empty
        // string ('') which would equal false if we just check for a false value.
        // we also don't want support bad code like autoplay='false'
        attrVal = (attrVal !== null) ? true : false;
      }

      obj[attrName] = attrVal;
    }
  }

  return obj;
};

/**
 * Get the computed style value for an element
 * From http://robertnyman.com/2006/04/24/get-the-rendered-style-of-an-element/
 * @param  {Element} el        Element to get style value for
 * @param  {String} strCssRule Style name
 * @return {String}            Style value
 */
vjs.getComputedDimension = function(el, strCssRule){
  var strValue = '';
  if(document.defaultView && document.defaultView.getComputedStyle){
    strValue = document.defaultView.getComputedStyle(el, '').getPropertyValue(strCssRule);

  } else if(el.currentStyle){
    // IE8 Width/Height support
    strValue = el['client'+strCssRule.substr(0,1).toUpperCase() + strCssRule.substr(1)] + 'px';
  }
  return strValue;
};

/**
 * Insert an element as the first child node of another
 * @param  {Element} child   Element to insert
 * @param  {[type]} parent Element to insert child into
 */
vjs.insertFirst = function(child, parent){
  if (parent.firstChild) {
    parent.insertBefore(child, parent.firstChild);
  } else {
    parent.appendChild(child);
  }
};

/**
 * Object to hold browser support information
 * @type {Object}
 */
vjs.support = {};

/**
 * Shorthand for document.getElementById()
 * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
 * @param  {String} id  Element ID
 * @return {Element}    Element with supplied ID
 */
vjs.el = function(id){
  if (id.indexOf('#') === 0) {
    id = id.slice(1);
  }

  return document.getElementById(id);
};

/**
 * Format seconds as a time string, H:MM:SS or M:SS
 * Supplying a guide (in seconds) will force a number of leading zeros
 * to cover the length of the guide
 * @param  {Number} seconds Number of seconds to be turned into a string
 * @param  {Number} guide   Number (in seconds) to model the string after
 * @return {String}         Time formatted as H:MM:SS or M:SS
 */
vjs.formatTime = function(seconds, guide) {
  // Default to using seconds as guide
  guide = guide || seconds;
  var s = Math.floor(seconds % 60),
      m = Math.floor(seconds / 60 % 60),
      h = Math.floor(seconds / 3600),
      gm = Math.floor(guide / 60 % 60),
      gh = Math.floor(guide / 3600);

  // handle invalid times
  if (isNaN(seconds) || seconds === Infinity) {
    // '-' is false for all relational operators (e.g. <, >=) so this setting
    // will add the minimum number of fields specified by the guide
    h = m = s = '-';
  }

  // Check if we need to show hours
  h = (h > 0 || gh > 0) ? h + ':' : '';

  // If hours are showing, we may need to add a leading zero.
  // Always show at least one digit of minutes.
  m = (((h || gm >= 10) && m < 10) ? '0' + m : m) + ':';

  // Check if leading zero is need for seconds
  s = (s < 10) ? '0' + s : s;

  return h + m + s;
};

// Attempt to block the ability to select text while dragging controls
vjs.blockTextSelection = function(){
  document.body.focus();
  document.onselectstart = function () { return false; };
};
// Turn off text selection blocking
vjs.unblockTextSelection = function(){ document.onselectstart = function () { return true; }; };

/**
 * Trim whitespace from the ends of a string.
 * @param  {String} string String to trim
 * @return {String}        Trimmed string
 */
vjs.trim = function(str){
  return (str+'').replace(/^\s+|\s+$/g, '');
};

/**
 * Should round off a number to a decimal place
 * @param  {Number} num Number to round
 * @param  {Number} dec Number of decimal places to round to
 * @return {Number}     Rounded number
 */
vjs.round = function(num, dec) {
  if (!dec) { dec = 0; }
  return Math.round(num*Math.pow(10,dec))/Math.pow(10,dec);
};

/**
 * Should create a fake TimeRange object
 * Mimics an HTML5 time range instance, which has functions that
 * return the start and end times for a range
 * TimeRanges are returned by the buffered() method
 * @param  {Number} start Start time in seconds
 * @param  {Number} end   End time in seconds
 * @return {Object}       Fake TimeRange object
 */
vjs.createTimeRange = function(start, end){
  return {
    length: 1,
    start: function() { return start; },
    end: function() { return end; }
  };
};

/**
 * Simple http request for retrieving external files (e.g. text tracks)
 * @param  {String} url           URL of resource
 * @param  {Function=} onSuccess  Success callback
 * @param  {Function=} onError    Error callback
 */
vjs.get = function(url, onSuccess, onError){
  var local, request;

  if (typeof XMLHttpRequest === 'undefined') {
    window.XMLHttpRequest = function () {
      try { return new window.ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch (e) {}
      try { return new window.ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch (f) {}
      try { return new window.ActiveXObject('Msxml2.XMLHTTP'); } catch (g) {}
      throw new Error('This browser does not support XMLHttpRequest.');
    };
  }

  request = new XMLHttpRequest();
  try {
    request.open('GET', url);
  } catch(e) {
    onError(e);
  }

  local = (url.indexOf('file:') === 0 || (window.location.href.indexOf('file:') === 0 && url.indexOf('http') === -1));

  request.onreadystatechange = function() {
    if (request.readyState === 4) {
      if (request.status === 200 || local && request.status === 0) {
        onSuccess(request.responseText);
      } else {
        if (onError) {
          onError();
        }
      }
    }
  };

  try {
    request.send();
  } catch(e) {
    if (onError) {
      onError(e);
    }
  }
};

/* Local Storage
================================================================================ */
vjs.setLocalStorage = function(key, value){
  try {
    // IE was throwing errors referencing the var anywhere without this
    var localStorage = window.localStorage || false;
    if (!localStorage) { return; }
    localStorage[key] = value;
  } catch(e) {
    if (e.code == 22 || e.code == 1014) { // Webkit == 22 / Firefox == 1014
      vjs.log('LocalStorage Full (VideoJS)', e);
    } else {
      if (e.code == 18) {
        vjs.log('LocalStorage not allowed (VideoJS)', e);
      } else {
        vjs.log('LocalStorage Error (VideoJS)', e);
      }
    }
  }
};

/**
 * Get abosolute version of relative URL. Used to tell flash correct URL.
 * http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
 * @param  {String} url URL to make absolute
 * @return {String}     Absolute URL
 */
vjs.getAbsoluteURL = function(url){

  // Check if absolute URL
  if (!url.match(/^https?:\/\//)) {
    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
    url = vjs.createEl('div', {
      innerHTML: '<a href="'+url+'">x</a>'
    }).firstChild.href;
  }

  return url;
};

// usage: log('inside coolFunc',this,arguments);
// http://paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
vjs.log = function(){
  vjs.log.history = vjs.log.history || [];   // store logs to an array for reference
  vjs.log.history.push(arguments);
  if(window.console){
    window.console.log(Array.prototype.slice.call(arguments));
  }
};

// Offset Left
// getBoundingClientRect technique from John Resig http://ejohn.org/blog/getboundingclientrect-is-awesome/
vjs.findPosition = function(el) {
    var box, docEl, body, clientLeft, scrollLeft, left, clientTop, scrollTop, top;

    if (el.getBoundingClientRect && el.parentNode) {
      box = el.getBoundingClientRect();
    }

    if (!box) {
      return {
        left: 0,
        top: 0
      };
    }

    docEl = document.documentElement;
    body = document.body;

    clientLeft = docEl.clientLeft || body.clientLeft || 0;
    scrollLeft = window.pageXOffset || body.scrollLeft;
    left = box.left + scrollLeft - clientLeft;

    clientTop = docEl.clientTop || body.clientTop || 0;
    scrollTop = window.pageYOffset || body.scrollTop;
    top = box.top + scrollTop - clientTop;

    return {
      left: left,
      top: top
    };
};
/**
 * @fileoverview Player Component - Base class for all UI objects
 *
 */

/**
 * Base UI Component class
 * @param {Object} player  Main Player
 * @param {Object=} options
 * @constructor
 */
vjs.Component = vjs.CoreObject.extend({
  /** @constructor */
  init: function(player, options, ready){
    this.player_ = player;

    // Make a copy of prototype.options_ to protect against overriding global defaults
    this.options_ = vjs.obj.copy(this.options_);

    // Updated options with supplied options
    options = this.options(options);

    // Get ID from options, element, or create using player ID and unique ID
    this.id_ = options['id'] || ((options['el'] && options['el']['id']) ? options['el']['id'] : player.id() + '_component_' + vjs.guid++ );

    this.name_ = options['name'] || null;

    // Create element if one wasn't provided in options
    this.el_ = options['el'] || this.createEl();

    this.children_ = [];
    this.childIndex_ = {};
    this.childNameIndex_ = {};

    // Add any child components in options
    this.initChildren();

    this.ready(ready);
    // Don't want to trigger ready here or it will before init is actually
    // finished for all children that run this constructor
  }
});

/**
 * Dispose of the component and all child components.
 */
vjs.Component.prototype.dispose = function(){
  this.trigger('dispose');

  // Dispose all children.
  if (this.children_) {
    for (var i = this.children_.length - 1; i >= 0; i--) {
      if (this.children_[i].dispose) {
        this.children_[i].dispose();
      }
    }
  }

  // Delete child references
  this.children_ = null;
  this.childIndex_ = null;
  this.childNameIndex_ = null;

  // Remove all event listeners.
  this.off();

  // Remove element from DOM
  if (this.el_.parentNode) {
    this.el_.parentNode.removeChild(this.el_);
  }

  vjs.removeData(this.el_);
  this.el_ = null;
};

/**
 * Reference to main player instance.
 * @type {vjs.Player}
 * @private
 */
vjs.Component.prototype.player_;

/**
 * Return the component's player.
 * @return {vjs.Player}
 */
vjs.Component.prototype.player = function(){
  return this.player_;
};

/**
 * Component options object.
 * @type {Object}
 * @private
 */
vjs.Component.prototype.options_;

/**
 * Deep merge of options objects
 * Whenever a property is an object on both options objects
 * the two properties will be merged using vjs.obj.deepMerge.
 *
 * This is used for merging options for child components. We
 * want it to be easy to override individual options on a child
 * component without having to rewrite all the other default options.
 *
 * Parent.prototype.options_ = {
 *   children: {
 *     'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },
 *     'childTwo': {},
 *     'childThree': {}
 *   }
 * }
 * newOptions = {
 *   children: {
 *     'childOne': { 'foo': 'baz', 'abc': '123' }
 *     'childTwo': null,
 *     'childFour': {}
 *   }
 * }
 *
 * this.options(newOptions);
 *
 * RESULT
 *
 * {
 *   children: {
 *     'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },
 *     'childTwo': null, // Disabled. Won't be initialized.
 *     'childThree': {},
 *     'childFour': {}
 *   }
 * }
 *
 * @param  {Object} obj Object whose values will be overwritten
 * @return {Object}      NEW merged object. Does not return obj1.
 */
vjs.Component.prototype.options = function(obj){
  if (obj === undefined) return this.options_;

  return this.options_ = vjs.obj.deepMerge(this.options_, obj);
};

/**
 * The DOM element for the component.
 * @type {Element}
 * @private
 */
vjs.Component.prototype.el_;

/**
 * Create the component's DOM element.
 * @param  {String=} tagName  Element's node type. e.g. 'div'
 * @param  {Object=} attributes An object of element attributes that should be set on the element.
 * @return {Element}
 */
vjs.Component.prototype.createEl = function(tagName, attributes){
  return vjs.createEl(tagName, attributes);
};

/**
 * Return the component's DOM element.
 * @return {Element}
 */
vjs.Component.prototype.el = function(){
  return this.el_;
};

/**
 * An optional element where, if defined, children will be inserted
 *   instead of directly in el_
 * @type {Element}
 * @private
 */
vjs.Component.prototype.contentEl_;

/**
 * Return the component's DOM element for embedding content.
 *   will either be el_ or a new element defined in createEl
 * @return {Element}
 */
vjs.Component.prototype.contentEl = function(){
  return this.contentEl_ || this.el_;
};

/**
 * The ID for the component.
 * @type {String}
 * @private
 */
vjs.Component.prototype.id_;

/**
 * Return the component's ID.
 * @return {String}
 */
vjs.Component.prototype.id = function(){
  return this.id_;
};

/**
 * The name for the component. Often used to reference the component.
 * @type {String}
 * @private
 */
vjs.Component.prototype.name_;

/**
 * Return the component's ID.
 * @return {String}
 */
vjs.Component.prototype.name = function(){
  return this.name_;
};

/**
 * Array of child components
 * @type {Array}
 * @private
 */
vjs.Component.prototype.children_;

/**
 * Returns array of all child components.
 * @return {Array}
 */
vjs.Component.prototype.children = function(){
  return this.children_;
};

/**
 * Object of child components by ID
 * @type {Object}
 * @private
 */
vjs.Component.prototype.childIndex_;

/**
 * Returns a child component with the provided ID.
 * @return {Array}
 */
vjs.Component.prototype.getChildById = function(id){
  return this.childIndex_[id];
};

/**
 * Object of child components by Name
 * @type {Object}
 * @private
 */
vjs.Component.prototype.childNameIndex_;

/**
 * Returns a child component with the provided ID.
 * @return {Array}
 */
vjs.Component.prototype.getChild = function(name){
  return this.childNameIndex_[name];
};

/**
 * Adds a child component inside this component.
 * @param {String|vjs.Component} child The class name or instance of a child to add.
 * @param {Object=} options Optional options, including options to be passed to
 *  children of the child.
 * @return {vjs.Component} The child component, because it might be created in this process.
 * @suppress {accessControls|checkRegExp|checkTypes|checkVars|const|constantProperty|deprecated|duplicate|es5Strict|fileoverviewTags|globalThis|invalidCasts|missingProperties|nonStandardJsDocs|strictModuleDepCheck|undefinedNames|undefinedVars|unknownDefines|uselessCode|visibility}
 */
vjs.Component.prototype.addChild = function(child, options){
  var component, componentClass, componentName, componentId;

  // If string, create new component with options
  if (typeof child === 'string') {

    componentName = child;

    // Make sure options is at least an empty object to protect against errors
    options = options || {};

    // Assume name of set is a lowercased name of the UI Class (PlayButton, etc.)
    componentClass = options['componentClass'] || vjs.capitalize(componentName);

    // Set name through options
    options['name'] = componentName;

    // Create a new object & element for this controls set
    // If there's no .player_, this is a player
    // Closure Compiler throws an 'incomplete alias' warning if we use the vjs variable directly.
    // Every class should be exported, so this should never be a problem here.
    component = new window['videojs'][componentClass](this.player_ || this, options);

  // child is a component instance
  } else {
    component = child;
  }

  this.children_.push(component);

  if (typeof component.id === 'function') {
    this.childIndex_[component.id()] = component;
  }

  // If a name wasn't used to create the component, check if we can use the
  // name function of the component
  componentName = componentName || (component.name && component.name());

  if (componentName) {
    this.childNameIndex_[componentName] = component;
  }

  // Add the UI object's element to the container div (box)
  // Having an element is not required
  if (typeof component['el'] === 'function' && component['el']()) {
    this.contentEl().appendChild(component['el']());
  }

  // Return so it can stored on parent object if desired.
  return component;
};

vjs.Component.prototype.removeChild = function(component){
  if (typeof component === 'string') {
    component = this.getChild(component);
  }

  if (!component || !this.children_) return;

  var childFound = false;
  for (var i = this.children_.length - 1; i >= 0; i--) {
    if (this.children_[i] === component) {
      childFound = true;
      this.children_.splice(i,1);
      break;
    }
  }

  if (!childFound) return;

  this.childIndex_[component.id] = null;
  this.childNameIndex_[component.name] = null;

  var compEl = component.el();
  if (compEl && compEl.parentNode === this.contentEl()) {
    this.contentEl().removeChild(component.el());
  }
};

/**
 * Initialize default child components from options
 */
vjs.Component.prototype.initChildren = function(){
  var options = this.options_;

  if (options && options['children']) {
    var self = this;

    // Loop through components and add them to the player
    vjs.obj.each(options['children'], function(name, opts){
      // Allow for disabling default components
      // e.g. vjs.options['children']['posterImage'] = false
      if (opts === false) return;

      // Allow waiting to add components until a specific event is called
      var tempAdd = function(){
        // Set property name on player. Could cause conflicts with other prop names, but it's worth making refs easy.
        self[name] = self.addChild(name, opts);
      };

      if (opts['loadEvent']) {
        // this.one(opts.loadEvent, tempAdd)
      } else {
        tempAdd();
      }
    });
  }
};

vjs.Component.prototype.buildCSSClass = function(){
    // Child classes can include a function that does:
    // return 'CLASS NAME' + this._super();
    return '';
};

/* Events
============================================================================= */

/**
 * Add an event listener to this component's element. Context will be the component.
 * @param  {String}   type Event type e.g. 'click'
 * @param  {Function} fn   Event listener
 * @return {vjs.Component}
 */
vjs.Component.prototype.on = function(type, fn){
  vjs.on(this.el_, type, vjs.bind(this, fn));
  return this;
};

/**
 * Remove an event listener from the component's element
 * @param  {String=}   type Optional event type. Without type it will remove all listeners.
 * @param  {Function=} fn   Optional event listener. Without fn it will remove all listeners for a type.
 * @return {vjs.Component}
 */
vjs.Component.prototype.off = function(type, fn){
  vjs.off(this.el_, type, fn);
  return this;
};

/**
 * Add an event listener to be triggered only once and then removed
 * @param  {String}   type Event type
 * @param  {Function} fn   Event listener
 * @return {vjs.Component}
 */
vjs.Component.prototype.one = function(type, fn) {
  vjs.one(this.el_, type, vjs.bind(this, fn));
  return this;
};

/**
 * Trigger an event on an element
 * @param  {String} type  Event type to trigger
 * @param  {Event|Object} event Event object to be passed to the listener
 * @return {vjs.Component}
 */
vjs.Component.prototype.trigger = function(type, event){
  vjs.trigger(this.el_, type, event);
  return this;
};

/* Ready
================================================================================ */
/**
 * Is the component loaded.
 * @type {Boolean}
 * @private
 */
vjs.Component.prototype.isReady_;

/**
 * Trigger ready as soon as initialization is finished.
 *   Allows for delaying ready. Override on a sub class prototype.
 *   If you set this.isReadyOnInitFinish_ it will affect all components.
 *   Specially used when waiting for the Flash player to asynchrnously load.
 *   @type {Boolean}
 *   @private
 */
vjs.Component.prototype.isReadyOnInitFinish_ = true;

/**
 * List of ready listeners
 * @type {Array}
 * @private
 */
vjs.Component.prototype.readyQueue_;

/**
 * Bind a listener to the component's ready state.
 *   Different from event listeners in that if the ready event has already happend
 *   it will trigger the function immediately.
 * @param  {Function} fn Ready listener
 * @return {vjs.Component}
 */
vjs.Component.prototype.ready = function(fn){
  if (fn) {
    if (this.isReady_) {
      fn.call(this);
    } else {
      if (this.readyQueue_ === undefined) {
        this.readyQueue_ = [];
      }
      this.readyQueue_.push(fn);
    }
  }
  return this;
};

/**
 * Trigger the ready listeners
 * @return {vjs.Component}
 */
vjs.Component.prototype.triggerReady = function(){
  this.isReady_ = true;

  var readyQueue = this.readyQueue_;

  if (readyQueue && readyQueue.length > 0) {

    for (var i = 0, j = readyQueue.length; i < j; i++) {
      readyQueue[i].call(this);
    }

    // Reset Ready Queue
    this.readyQueue_ = [];

    // Allow for using event listeners also, in case you want to do something everytime a source is ready.
    this.trigger('ready');
  }
};

/* Display
============================================================================= */

/**
 * Add a CSS class name to the component's element
 * @param {String} classToAdd Classname to add
 * @return {vjs.Component}
 */
vjs.Component.prototype.addClass = function(classToAdd){
  vjs.addClass(this.el_, classToAdd);
  return this;
};

/**
 * Remove a CSS class name from the component's element
 * @param {String} classToRemove Classname to remove
 * @return {vjs.Component}
 */
vjs.Component.prototype.removeClass = function(classToRemove){
  vjs.removeClass(this.el_, classToRemove);
  return this;
};

/**
 * Show the component element if hidden
 * @return {vjs.Component}
 */
vjs.Component.prototype.show = function(){
  this.el_.style.display = 'block';
  return this;
};

/**
 * Hide the component element if hidden
 * @return {vjs.Component}
 */
vjs.Component.prototype.hide = function(){
  this.el_.style.display = 'none';
  return this;
};

/**
 * Lock an item in its visible state. To be used with fadeIn/fadeOut.
 * @return {vjs.Component}
 */
vjs.Component.prototype.lockShowing = function(){
  this.addClass('vjs-lock-showing');
  return this;
};

/**
 * Unlock an item to be hidden. To be used with fadeIn/fadeOut.
 * @return {vjs.Component}
 */
vjs.Component.prototype.unlockShowing = function(){
  this.removeClass('vjs-lock-showing');
  return this;
};

/**
 * Disable component by making it unshowable
 */
vjs.Component.prototype.disable = function(){
  this.hide();
  this.show = function(){};
};

/**
 * If a value is provided it will change the width of the player to that value
 * otherwise the width is returned
 * http://dev.w3.org/html5/spec/dimension-attributes.html#attr-dim-height
 * Video tag width/height only work in pixels. No percents.
 * But allowing limited percents use. e.g. width() will return number+%, not computed width
 * @param  {Number|String=} num   Optional width number
 * @param  {[type]} skipListeners Skip the 'resize' event trigger
 * @return {vjs.Component|Number|String} Returns 'this' if dimension was set.
 *   Otherwise it returns the dimension.
 */
vjs.Component.prototype.width = function(num, skipListeners){
  return this.dimension('width', num, skipListeners);
};

/**
 * Get or set the height of the player
 * @param  {Number|String=} num     Optional new player height
 * @param  {Boolean=} skipListeners Optional skip resize event trigger
 * @return {vjs.Component|Number|String} The player, or the dimension
 */
vjs.Component.prototype.height = function(num, skipListeners){
  return this.dimension('height', num, skipListeners);
};

/**
 * Set both width and height at the same time.
 * @param  {Number|String} width
 * @param  {Number|String} height
 * @return {vjs.Component}   The player.
 */
vjs.Component.prototype.dimensions = function(width, height){
  // Skip resize listeners on width for optimization
  return this.width(width, true).height(height);
};

/**
 * Get or set width or height.
 * All for an integer, integer + 'px' or integer + '%';
 * Known issue: hidden elements. Hidden elements officially have a width of 0.
 * So we're defaulting to the style.width value and falling back to computedStyle
 * which has the hidden element issue.
 * Info, but probably not an efficient fix:
 * http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/
 * @param  {String=} widthOrHeight 'width' or 'height'
 * @param  {Number|String=} num           New dimension
 * @param  {Boolean=} skipListeners Skip resize event trigger
 * @return {vjs.Component|Number|String} Return the player if setting a dimension.
 *                                         Otherwise it returns the dimension.
 */
vjs.Component.prototype.dimension = function(widthOrHeight, num, skipListeners){
  if (num !== undefined) {

    // Check if using css width/height (% or px) and adjust
    if ((''+num).indexOf('%') !== -1 || (''+num).indexOf('px') !== -1) {
      this.el_.style[widthOrHeight] = num;
    } else if (num === 'auto') {
      this.el_.style[widthOrHeight] = '';
    } else {
      this.el_.style[widthOrHeight] = num+'px';
    }

    // skipListeners allows us to avoid triggering the resize event when setting both width and height
    if (!skipListeners) { this.trigger('resize'); }

    // Return component
    return this;
  }

  // Not setting a value, so getting it
  // Make sure element exists
  if (!this.el_) return 0;

  // Get dimension value from style
  var val = this.el_.style[widthOrHeight];
  var pxIndex = val.indexOf('px');
  if (pxIndex !== -1) {
    // Return the pixel value with no 'px'
    return parseInt(val.slice(0,pxIndex), 10);

  // No px so using % or no style was set, so falling back to offsetWidth/height
  // If component has display:none, offset will return 0
  // TODO: handle display:none and no dimension style using px
  } else {

    return parseInt(this.el_['offset'+vjs.capitalize(widthOrHeight)], 10);

    // ComputedStyle version.
    // Only difference is if the element is hidden it will return
    // the percent value (e.g. '100%'')
    // instead of zero like offsetWidth returns.
    // var val = vjs.getComputedStyleValue(this.el_, widthOrHeight);
    // var pxIndex = val.indexOf('px');

    // if (pxIndex !== -1) {
    //   return val.slice(0, pxIndex);
    // } else {
    //   return val;
    // }
  }
};

/**
 * Emit 'tap' events when touch events are supported. We're requireing them to
 * be enabled because otherwise every component would have this extra overhead
 * unnecessarily, on mobile devices where extra overhead is especially bad.
 *
 * This is being implemented so we can support taps on the video element
 * toggling the controls.
 */
vjs.Component.prototype.emitTapEvents = function(){
  var touchStart, touchTime, couldBeTap, noTap;

  // Track the start time so we can determine how long the touch lasted
  touchStart = 0;

  this.on('touchstart', function(event) {
    // Record start time so we can detect a tap vs. "touch and hold"
    touchStart = new Date().getTime();
    // Reset couldBeTap tracking
    couldBeTap = true;
  });

  noTap = function(){
    couldBeTap = false;
  };
  // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
  this.on('touchmove', noTap);
  this.on('touchleave', noTap);
  this.on('touchcancel', noTap);

  // When the touch ends, measure how long it took and trigger the appropriate
  // event
  this.on('touchend', function() {
    // Proceed only if the touchmove/leave/cancel event didn't happen
    if (couldBeTap === true) {
      // Measure how long the touch lasted
      touchTime = new Date().getTime() - touchStart;
      // The touch needs to be quick in order to consider it a tap
      if (touchTime < 250) {
        this.trigger('tap');
        // It may be good to copy the touchend event object and change the
        // type to tap, if the other event properties aren't exact after
        // vjs.fixEvent runs (e.g. event.target)
      }
    }
  });
};
/* Button - Base class for all buttons
================================================================================ */
/**
 * Base class for all buttons
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.Button = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);

    var touchstart = false;
    this.on('touchstart', function(event) {
      // Stop click and other mouse events from triggering also
      event.preventDefault();
      touchstart = true;
    });
    this.on('touchmove', function() {
      touchstart = false;
    });
    var self = this;
    this.on('touchend', function(event) {
      if (touchstart) {
        self.onClick(event);
      }
      event.preventDefault();
    });

    this.on('click', this.onClick);
    this.on('focus', this.onFocus);
    this.on('blur', this.onBlur);
  }
});

vjs.Button.prototype.createEl = function(type, props){
  // Add standard Aria and Tabindex info
  props = vjs.obj.merge({
    className: this.buildCSSClass(),
    innerHTML: '<div class="vjs-control-content"><span class="vjs-control-text">' + (this.buttonText || 'Need Text') + '</span></div>',
    role: 'button',
    'aria-live': 'polite', // let the screen reader user know that the text of the button may change
    tabIndex: 0
  }, props);

  return vjs.Component.prototype.createEl.call(this, type, props);
};

vjs.Button.prototype.buildCSSClass = function(){
  // TODO: Change vjs-control to vjs-button?
  return 'vjs-control ' + vjs.Component.prototype.buildCSSClass.call(this);
};

  // Click - Override with specific functionality for button
vjs.Button.prototype.onClick = function(){};

  // Focus - Add keyboard functionality to element
vjs.Button.prototype.onFocus = function(){
  vjs.on(document, 'keyup', vjs.bind(this, this.onKeyPress));
};

  // KeyPress (document level) - Trigger click when keys are pressed
vjs.Button.prototype.onKeyPress = function(event){
  // Check for space bar (32) or enter (13) keys
  if (event.which == 32 || event.which == 13) {
    event.preventDefault();
    this.onClick();
  }
};

// Blur - Remove keyboard triggers
vjs.Button.prototype.onBlur = function(){
  vjs.off(document, 'keyup', vjs.bind(this, this.onKeyPress));
};
/* Slider
================================================================================ */
/**
 * Parent for seek bar and volume slider
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.Slider = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);

    // Set property names to bar and handle to match with the child Slider class is looking for
    this.bar = this.getChild(this.options_['barName']);
    this.handle = this.getChild(this.options_['handleName']);

    player.on(this.playerEvent, vjs.bind(this, this.update));

    this.on('mousedown', this.onMouseDown);
    this.on('touchstart', this.onMouseDown);
    this.on('focus', this.onFocus);
    this.on('blur', this.onBlur);
    this.on('click', this.onClick);

    this.player_.on('controlsvisible', vjs.bind(this, this.update));

    // This is actually to fix the volume handle position. http://twitter.com/#!/gerritvanaaken/status/159046254519787520
    // this.player_.one('timeupdate', vjs.bind(this, this.update));

    player.ready(vjs.bind(this, this.update));

    this.boundEvents = {};
  }
});

vjs.Slider.prototype.createEl = function(type, props) {
  props = props || {};
  // Add the slider element class to all sub classes
  props.className = props.className + ' vjs-slider';
  props = vjs.obj.merge({
    role: 'slider',
    'aria-valuenow': 0,
    'aria-valuemin': 0,
    'aria-valuemax': 100,
    tabIndex: 0
  }, props);

  return vjs.Component.prototype.createEl.call(this, type, props);
};

vjs.Slider.prototype.onMouseDown = function(event){
  event.preventDefault();
  vjs.blockTextSelection();

  this.boundEvents.move = vjs.bind(this, this.onMouseMove);
  this.boundEvents.end = vjs.bind(this, this.onMouseUp);

  vjs.on(document, 'mousemove', this.boundEvents.move);
  vjs.on(document, 'mouseup', this.boundEvents.end);
  vjs.on(document, 'touchmove', this.boundEvents.move);
  vjs.on(document, 'touchend', this.boundEvents.end);

  this.onMouseMove(event);
};

vjs.Slider.prototype.onMouseUp = function() {
  vjs.unblockTextSelection();
  vjs.off(document, 'mousemove', this.boundEvents.move, false);
  vjs.off(document, 'mouseup', this.boundEvents.end, false);
  vjs.off(document, 'touchmove', this.boundEvents.move, false);
  vjs.off(document, 'touchend', this.boundEvents.end, false);

  this.update();
};

vjs.Slider.prototype.update = function(){
  // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
  // execution stack. The player is destroyed before then update will cause an error
  if (!this.el_) return;

  // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
  // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
  // var progress =  (this.player_.scrubbing) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();

  var barProgress,
      progress = this.getPercent(),
      handle = this.handle,
      bar = this.bar;

  // Protect against no duration and other division issues
  if (isNaN(progress)) { progress = 0; }

  barProgress = progress;

  // If there is a handle, we need to account for the handle in our calculation for progress bar
  // so that it doesn't fall short of or extend past the handle.
  if (handle) {

    var box = this.el_,
        boxWidth = box.offsetWidth,

        handleWidth = handle.el().offsetWidth,

        // The width of the handle in percent of the containing box
        // In IE, widths may not be ready yet causing NaN
        handlePercent = (handleWidth) ? handleWidth / boxWidth : 0,

        // Get the adjusted size of the box, considering that the handle's center never touches the left or right side.
        // There is a margin of half the handle's width on both sides.
        boxAdjustedPercent = 1 - handlePercent,

        // Adjust the progress that we'll use to set widths to the new adjusted box width
        adjustedProgress = progress * boxAdjustedPercent;

    // The bar does reach the left side, so we need to account for this in the bar's width
    barProgress = adjustedProgress + (handlePercent / 2);

    // Move the handle from the left based on the adjected progress
    handle.el().style.left = vjs.round(adjustedProgress * 100, 2) + '%';
  }

  // Set the new bar width
  bar.el().style.width = vjs.round(barProgress * 100, 2) + '%';
};

vjs.Slider.prototype.calculateDistance = function(event){
  var el, box, boxX, boxY, boxW, boxH, handle, pageX, pageY;

  el = this.el_;
  box = vjs.findPosition(el);
  boxW = boxH = el.offsetWidth;
  handle = this.handle;

  if (this.options_.vertical) {
    boxY = box.top;

    if (event.changedTouches) {
      pageY = event.changedTouches[0].pageY;
    } else {
      pageY = event.pageY;
    }

    if (handle) {
      var handleH = handle.el().offsetHeight;
      // Adjusted X and Width, so handle doesn't go outside the bar
      boxY = boxY + (handleH / 2);
      boxH = boxH - handleH;
    }

    // Percent that the click is through the adjusted area
    return Math.max(0, Math.min(1, ((boxY - pageY) + boxH) / boxH));

  } else {
    boxX = box.left;

    if (event.changedTouches) {
      pageX = event.changedTouches[0].pageX;
    } else {
      pageX = event.pageX;
    }

    if (handle) {
      var handleW = handle.el().offsetWidth;

      // Adjusted X and Width, so handle doesn't go outside the bar
      boxX = boxX + (handleW / 2);
      boxW = boxW - handleW;
    }

    // Percent that the click is through the adjusted area
    return Math.max(0, Math.min(1, (pageX - boxX) / boxW));
  }
};

vjs.Slider.prototype.onFocus = function(){
  vjs.on(document, 'keyup', vjs.bind(this, this.onKeyPress));
};

vjs.Slider.prototype.onKeyPress = function(event){
  if (event.which == 37) { // Left Arrow
    event.preventDefault();
    this.stepBack();
  } else if (event.which == 39) { // Right Arrow
    event.preventDefault();
    this.stepForward();
  }
};

vjs.Slider.prototype.onBlur = function(){
  vjs.off(document, 'keyup', vjs.bind(this, this.onKeyPress));
};

/**
 * Listener for click events on slider, used to prevent clicks
 *   from bubbling up to parent elements like button menus.
 * @param  {Object} event Event object
 */
vjs.Slider.prototype.onClick = function(event){
  event.stopImmediatePropagation();
  event.preventDefault();
};

/**
 * SeekBar Behavior includes play progress bar, and seek handle
 * Needed so it can determine seek position based on handle position/size
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.SliderHandle = vjs.Component.extend();

/**
 * Default value of the slider
 * @type {Number}
 */
vjs.SliderHandle.prototype.defaultValue = 0;

/** @inheritDoc */
vjs.SliderHandle.prototype.createEl = function(type, props) {
  props = props || {};
  // Add the slider element class to all sub classes
  props.className = props.className + ' vjs-slider-handle';
  props = vjs.obj.merge({
    innerHTML: '<span class="vjs-control-text">'+this.defaultValue+'</span>'
  }, props);

  return vjs.Component.prototype.createEl.call(this, 'div', props);
};
/* Menu
================================================================================ */
/**
 * The base for text track and settings menu buttons.
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.Menu = vjs.Component.extend();

/**
 * Add a menu item to the menu
 * @param {Object|String} component Component or component type to add
 */
vjs.Menu.prototype.addItem = function(component){
  this.addChild(component);
  component.on('click', vjs.bind(this, function(){
    this.unlockShowing();
  }));
};

/** @inheritDoc */
vjs.Menu.prototype.createEl = function(){
  var contentElType = this.options().contentElType || 'ul';
  this.contentEl_ = vjs.createEl(contentElType, {
    className: 'vjs-menu-content'
  });
  var el = vjs.Component.prototype.createEl.call(this, 'div', {
    append: this.contentEl_,
    className: 'vjs-menu'
  });
  el.appendChild(this.contentEl_);

  // Prevent clicks from bubbling up. Needed for Menu Buttons,
  // where a click on the parent is significant
  vjs.on(el, 'click', function(event){
    event.preventDefault();
    event.stopImmediatePropagation();
  });

  return el;
};

/**
 * Menu item
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.MenuItem = vjs.Button.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Button.call(this, player, options);
    this.selected(options['selected']);
  }
});

/** @inheritDoc */
vjs.MenuItem.prototype.createEl = function(type, props){
  return vjs.Button.prototype.createEl.call(this, 'li', vjs.obj.merge({
    className: 'vjs-menu-item',
    innerHTML: this.options_['label']
  }, props));
};

/** @inheritDoc */
vjs.MenuItem.prototype.onClick = function(){
  this.selected(true);
};

/**
 * Set this menu item as selected or not
 * @param  {Boolean} selected
 */
vjs.MenuItem.prototype.selected = function(selected){
  if (selected) {
    this.addClass('vjs-selected');
    this.el_.setAttribute('aria-selected',true);
  } else {
    this.removeClass('vjs-selected');
    this.el_.setAttribute('aria-selected',false);
  }
};


/**
 * A button class with a popup menu
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.MenuButton = vjs.Button.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Button.call(this, player, options);

    this.menu = this.createMenu();

    // Add list to element
    this.addChild(this.menu);

    // Automatically hide empty menu buttons
    if (this.items && this.items.length === 0) {
      this.hide();
    }

    this.on('keyup', this.onKeyPress);
    this.el_.setAttribute('aria-haspopup', true);
    this.el_.setAttribute('role', 'button');
  }
});

/**
 * Track the state of the menu button
 * @type {Boolean}
 */
vjs.MenuButton.prototype.buttonPressed_ = false;

vjs.MenuButton.prototype.createMenu = function(){
  var menu = new vjs.Menu(this.player_);

  // Add a title list item to the top
  if (this.options().title) {
    menu.el().appendChild(vjs.createEl('li', {
      className: 'vjs-menu-title',
      innerHTML: vjs.capitalize(this.kind_),
      tabindex: -1
    }));
  }

  this.items = this['createItems']();

  if (this.items) {
    // Add menu items to the menu
    for (var i = 0; i < this.items.length; i++) {
      menu.addItem(this.items[i]);
    }
  }

  return menu;
};

/**
 * Create the list of menu items. Specific to each subclass.
 */
vjs.MenuButton.prototype.createItems = function(){};

/** @inheritDoc */
vjs.MenuButton.prototype.buildCSSClass = function(){
  return this.className + ' vjs-menu-button ' + vjs.Button.prototype.buildCSSClass.call(this);
};

// Focus - Add keyboard functionality to element
// This function is not needed anymore. Instead, the keyboard functionality is handled by
// treating the button as triggering a submenu. When the button is pressed, the submenu
// appears. Pressing the button again makes the submenu disappear.
vjs.MenuButton.prototype.onFocus = function(){};
// Can't turn off list display that we turned on with focus, because list would go away.
vjs.MenuButton.prototype.onBlur = function(){};

vjs.MenuButton.prototype.onClick = function(){
  // When you click the button it adds focus, which will show the menu indefinitely.
  // So we'll remove focus when the mouse leaves the button.
  // Focus is needed for tab navigation.
  this.one('mouseout', vjs.bind(this, function(){
    this.menu.unlockShowing();
    this.el_.blur();
  }));
  if (this.buttonPressed_){
    this.unpressButton();
  } else {
    this.pressButton();
  }
};

vjs.MenuButton.prototype.onKeyPress = function(event){
  event.preventDefault();

  // Check for space bar (32) or enter (13) keys
  if (event.which == 32 || event.which == 13) {
    if (this.buttonPressed_){
      this.unpressButton();
    } else {
      this.pressButton();
    }
  // Check for escape (27) key
  } else if (event.which == 27){
    if (this.buttonPressed_){
      this.unpressButton();
    }
  }
};

vjs.MenuButton.prototype.pressButton = function(){
  this.buttonPressed_ = true;
  this.menu.lockShowing();
  this.el_.setAttribute('aria-pressed', true);
  if (this.items && this.items.length > 0) {
    this.items[0].el().focus(); // set the focus to the title of the submenu
  }
};

vjs.MenuButton.prototype.unpressButton = function(){
  this.buttonPressed_ = false;
  this.menu.unlockShowing();
  this.el_.setAttribute('aria-pressed', false);
};

/**
 * Main player class. A player instance is returned by _V_(id);
 * @param {Element} tag        The original video tag used for configuring options
 * @param {Object=} options    Player options
 * @param {Function=} ready    Ready callback function
 * @constructor
 */
vjs.Player = vjs.Component.extend({
  /** @constructor */
  init: function(tag, options, ready){
    this.tag = tag; // Store the original tag used to set options

    // Set Options
    // The options argument overrides options set in the video tag
    // which overrides globally set options.
    // This latter part coincides with the load order
    // (tag must exist before Player)
    options = vjs.obj.merge(this.getTagSettings(tag), options);

    // Cache for video property values.
    this.cache_ = {};

    // Set poster
    this.poster_ = options['poster'];
    // Set controls
    this.controls_ = options['controls'];
    // Original tag settings stored in options
    // now remove immediately so native controls don't flash.
    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
    tag.controls = false;

    // Run base component initializing with new options.
    // Builds the element through createEl()
    // Inits and embeds any child components in opts
    vjs.Component.call(this, this, options, ready);

    // Update controls className. Can't do this when the controls are initially
    // set because the element doesn't exist yet.
    if (this.controls()) {
      this.addClass('vjs-controls-enabled');
    } else {
      this.addClass('vjs-controls-disabled');
    }

    // TODO: Make this smarter. Toggle user state between touching/mousing
    // using events, since devices can have both touch and mouse events.
    // if (vjs.TOUCH_ENABLED) {
    //   this.addClass('vjs-touch-enabled');
    // }

    // Firstplay event implimentation. Not sold on the event yet.
    // Could probably just check currentTime==0?
    this.one('play', function(e){
      var fpEvent = { type: 'firstplay', target: this.el_ };
      // Using vjs.trigger so we can check if default was prevented
      var keepGoing = vjs.trigger(this.el_, fpEvent);

      if (!keepGoing) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    });

    this.on('ended', this.onEnded);
    this.on('play', this.onPlay);
    this.on('firstplay', this.onFirstPlay);
    this.on('pause', this.onPause);
    this.on('progress', this.onProgress);
    this.on('durationchange', this.onDurationChange);
    this.on('error', this.onError);
    this.on('fullscreenchange', this.onFullscreenChange);

    // Make player easily findable by ID
    vjs.players[this.id_] = this;

    if (options['plugins']) {
      vjs.obj.each(options['plugins'], function(key, val){
        this[key](val);
      }, this);
    }

    this.listenForUserActivity();
  }
});

/**
 * Player instance options, surfaced using vjs.options
 * vjs.options = vjs.Player.prototype.options_
 * Make changes in vjs.options, not here.
 * All options should use string keys so they avoid
 * renaming by closure compiler
 * @type {Object}
 * @private
 */
vjs.Player.prototype.options_ = vjs.options;

vjs.Player.prototype.dispose = function(){
  this.trigger('dispose');
  // prevent dispose from being called twice
  this.off('dispose');

  // Kill reference to this player
  vjs.players[this.id_] = null;
  if (this.tag && this.tag['player']) { this.tag['player'] = null; }
  if (this.el_ && this.el_['player']) { this.el_['player'] = null; }

  // Ensure that tracking progress and time progress will stop and plater deleted
  this.stopTrackingProgress();
  this.stopTrackingCurrentTime();

  if (this.tech) { this.tech.dispose(); }

  // Component dispose
  vjs.Component.prototype.dispose.call(this);
};

vjs.Player.prototype.getTagSettings = function(tag){
  var options = {
    'sources': [],
    'tracks': []
  };

  vjs.obj.merge(options, vjs.getAttributeValues(tag));

  // Get tag children settings
  if (tag.hasChildNodes()) {
    var children, child, childName, i, j;

    children = tag.childNodes;

    for (i=0,j=children.length; i<j; i++) {
      child = children[i];
      // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
      childName = child.nodeName.toLowerCase();
      if (childName === 'source') {
        options['sources'].push(vjs.getAttributeValues(child));
      } else if (childName === 'track') {
        options['tracks'].push(vjs.getAttributeValues(child));
      }
    }
  }

  return options;
};

vjs.Player.prototype.createEl = function(){
  var el = this.el_ = vjs.Component.prototype.createEl.call(this, 'div');
  var tag = this.tag;

  // Remove width/height attrs from tag so CSS can make it 100% width/height
  tag.removeAttribute('width');
  tag.removeAttribute('height');
  // Empty video tag sources and tracks so the built-in player doesn't use them also.
  // This may not be fast enough to stop HTML5 browsers from reading the tags
  // so we'll need to turn off any default tracks if we're manually doing
  // captions and subtitles. videoElement.textTracks
  if (tag.hasChildNodes()) {
    var nodes, nodesLength, i, node, nodeName, removeNodes;

    nodes = tag.childNodes;
    nodesLength = nodes.length;
    removeNodes = [];

    while (nodesLength--) {
      node = nodes[nodesLength];
      nodeName = node.nodeName.toLowerCase();
      if (nodeName === 'source' || nodeName === 'track') {
        removeNodes.push(node);
      }
    }

    for (i=0; i<removeNodes.length; i++) {
      tag.removeChild(removeNodes[i]);
    }
  }

  // Make sure tag ID exists
  tag.id = tag.id || 'vjs_video_' + vjs.guid++;

  // Give video tag ID and class to player div
  // ID will now reference player box, not the video tag
  el.id = tag.id;
  el.className = tag.className;

  // Update tag id/class for use as HTML5 playback tech
  // Might think we should do this after embedding in container so .vjs-tech class
  // doesn't flash 100% width/height, but class only applies with .video-js parent
  tag.id += '_html5_api';
  tag.className = 'vjs-tech';

  // Make player findable on elements
  tag['player'] = el['player'] = this;
  // Default state of video is paused
  this.addClass('vjs-paused');

  // Make box use width/height of tag, or rely on default implementation
  // Enforce with CSS since width/height attrs don't work on divs
  this.width(this.options_['width'], true); // (true) Skip resize listener on load
  this.height(this.options_['height'], true);

  // Wrap video tag in div (el/box) container
  if (tag.parentNode) {
    tag.parentNode.insertBefore(el, tag);
  }
  vjs.insertFirst(tag, el); // Breaks iPhone, fixed in HTML5 setup.

  return el;
};

// /* Media Technology (tech)
// ================================================================================ */
// Load/Create an instance of playback technlogy including element and API methods
// And append playback element in player div.
vjs.Player.prototype.loadTech = function(techName, source){

  // Pause and remove current playback technology
  if (this.tech) {
    this.unloadTech();

  // If the first time loading, HTML5 tag will exist but won't be initialized
  // So we need to remove it if we're not loading HTML5
  } else if (techName !== 'Html5' && this.tag) {
    this.el_.removeChild(this.tag);
    this.tag['player'] = null;
    this.tag = null;
  }

  this.techName = techName;

  // Turn off API access because we're loading a new tech that might load asynchronously
  this.isReady_ = false;

  var techReady = function(){
    this.player_.triggerReady();

    // Manually track progress in cases where the browser/flash player doesn't report it.
    if (!this.features['progressEvents']) {
      this.player_.manualProgressOn();
    }

    // Manually track timeudpates in cases where the browser/flash player doesn't report it.
    if (!this.features['timeupdateEvents']) {
      this.player_.manualTimeUpdatesOn();
    }
  };

  // Grab tech-specific options from player options and add source and parent element to use.
  var techOptions = vjs.obj.merge({ 'source': source, 'parentEl': this.el_ }, this.options_[techName.toLowerCase()]);

  if (source) {
    if (source.src == this.cache_.src && this.cache_.currentTime > 0) {
      techOptions['startTime'] = this.cache_.currentTime;
    }

    this.cache_.src = source.src;
  }

  // Initialize tech instance
  this.tech = new window['videojs'][techName](this, techOptions);

  this.tech.ready(techReady);
};

vjs.Player.prototype.unloadTech = function(){
  this.isReady_ = false;
  this.tech.dispose();

  // Turn off any manual progress or timeupdate tracking
  if (this.manualProgress) { this.manualProgressOff(); }

  if (this.manualTimeUpdates) { this.manualTimeUpdatesOff(); }

  this.tech = false;
};

// There's many issues around changing the size of a Flash (or other plugin) object.
// First is a plugin reload issue in Firefox that has been around for 11 years: https://bugzilla.mozilla.org/show_bug.cgi?id=90268
// Then with the new fullscreen API, Mozilla and webkit browsers will reload the flash object after going to fullscreen.
// To get around this, we're unloading the tech, caching source and currentTime values, and reloading the tech once the plugin is resized.
// reloadTech: function(betweenFn){
//   vjs.log('unloadingTech')
//   this.unloadTech();
//   vjs.log('unloadedTech')
//   if (betweenFn) { betweenFn.call(); }
//   vjs.log('LoadingTech')
//   this.loadTech(this.techName, { src: this.cache_.src })
//   vjs.log('loadedTech')
// },

/* Fallbacks for unsupported event types
================================================================================ */
// Manually trigger progress events based on changes to the buffered amount
// Many flash players and older HTML5 browsers don't send progress or progress-like events
vjs.Player.prototype.manualProgressOn = function(){
  this.manualProgress = true;

  // Trigger progress watching when a source begins loading
  this.trackProgress();

  // Watch for a native progress event call on the tech element
  // In HTML5, some older versions don't support the progress event
  // So we're assuming they don't, and turning off manual progress if they do.
  // As opposed to doing user agent detection
  this.tech.one('progress', function(){

    // Update known progress support for this playback technology
    this.features['progressEvents'] = true;

    // Turn off manual progress tracking
    this.player_.manualProgressOff();
  });
};

vjs.Player.prototype.manualProgressOff = function(){
  this.manualProgress = false;
  this.stopTrackingProgress();
};

vjs.Player.prototype.trackProgress = function(){

  this.progressInterval = setInterval(vjs.bind(this, function(){
    // Don't trigger unless buffered amount is greater than last time
    // log(this.cache_.bufferEnd, this.buffered().end(0), this.duration())
    /* TODO: update for multiple buffered regions */
    if (this.cache_.bufferEnd < this.buffered().end(0)) {
      this.trigger('progress');
    } else if (this.bufferedPercent() == 1) {
      this.stopTrackingProgress();
      this.trigger('progress'); // Last update
    }
  }), 500);
};
vjs.Player.prototype.stopTrackingProgress = function(){ clearInterval(this.progressInterval); };

/* Time Tracking -------------------------------------------------------------- */
vjs.Player.prototype.manualTimeUpdatesOn = function(){
  this.manualTimeUpdates = true;

  this.on('play', this.trackCurrentTime);
  this.on('pause', this.stopTrackingCurrentTime);
  // timeupdate is also called by .currentTime whenever current time is set

  // Watch for native timeupdate event
  this.tech.one('timeupdate', function(){
    // Update known progress support for this playback technology
    this.features['timeupdateEvents'] = true;
    // Turn off manual progress tracking
    this.player_.manualTimeUpdatesOff();
  });
};

vjs.Player.prototype.manualTimeUpdatesOff = function(){
  this.manualTimeUpdates = false;
  this.stopTrackingCurrentTime();
  this.off('play', this.trackCurrentTime);
  this.off('pause', this.stopTrackingCurrentTime);
};

vjs.Player.prototype.trackCurrentTime = function(){
  if (this.currentTimeInterval) { this.stopTrackingCurrentTime(); }
  this.currentTimeInterval = setInterval(vjs.bind(this, function(){
    this.trigger('timeupdate');
  }), 250); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
};

// Turn off play progress tracking (when paused or dragging)
vjs.Player.prototype.stopTrackingCurrentTime = function(){ clearInterval(this.currentTimeInterval); };

// /* Player event handlers (how the player reacts to certain events)
// ================================================================================ */
vjs.Player.prototype.onEnded = function(){
  if (this.options_['loop']) {
    this.currentTime(0);
    this.play();
  }
};

vjs.Player.prototype.onPlay = function(){
  vjs.removeClass(this.el_, 'vjs-paused');
  vjs.addClass(this.el_, 'vjs-playing');
};

vjs.Player.prototype.onFirstPlay = function(){
    //If the first starttime attribute is specified
    //then we will start at the given offset in seconds
    if(this.options_['starttime']){
      this.currentTime(this.options_['starttime']);
    }

    this.addClass('vjs-has-started');
};

vjs.Player.prototype.onPause = function(){
  vjs.removeClass(this.el_, 'vjs-playing');
  vjs.addClass(this.el_, 'vjs-paused');
};

vjs.Player.prototype.onProgress = function(){
  // Add custom event for when source is finished downloading.
  if (this.bufferedPercent() == 1) {
    this.trigger('loadedalldata');
  }
};

// Update duration with durationchange event
// Allows for cacheing value instead of asking player each time.
vjs.Player.prototype.onDurationChange = function(){
  this.duration(this.techGet('duration'));
};

vjs.Player.prototype.onError = function(e) {
  vjs.log('Video Error', e);
};

vjs.Player.prototype.onFullscreenChange = function() {
  if (this.isFullScreen) {
    this.addClass('vjs-fullscreen');
  } else {
    this.removeClass('vjs-fullscreen');
  }
};

// /* Player API
// ================================================================================ */

/**
 * Object for cached values.
 * @private
 */
vjs.Player.prototype.cache_;

vjs.Player.prototype.getCache = function(){
  return this.cache_;
};

// Pass values to the playback tech
vjs.Player.prototype.techCall = function(method, arg){
  // If it's not ready yet, call method when it is
  if (this.tech && !this.tech.isReady_) {
    this.tech.ready(function(){
      this[method](arg);
    });

  // Otherwise call method now
  } else {
    try {
      this.tech[method](arg);
    } catch(e) {
      vjs.log(e);
      throw e;
    }
  }
};

// Get calls can't wait for the tech, and sometimes don't need to.
vjs.Player.prototype.techGet = function(method){

  if (this.tech && this.tech.isReady_) {

    // Flash likes to die and reload when you hide or reposition it.
    // In these cases the object methods go away and we get errors.
    // When that happens we'll catch the errors and inform tech that it's not ready any more.
    try {
      return this.tech[method]();
    } catch(e) {
      // When building additional tech libs, an expected method may not be defined yet
      if (this.tech[method] === undefined) {
        vjs.log('Video.js: ' + method + ' method not defined for '+this.techName+' playback technology.', e);
      } else {
        // When a method isn't available on the object it throws a TypeError
        if (e.name == 'TypeError') {
          vjs.log('Video.js: ' + method + ' unavailable on '+this.techName+' playback technology element.', e);
          this.tech.isReady_ = false;
        } else {
          vjs.log(e);
        }
      }
      throw e;
    }
  }

  return;
};

/**
 * Start media playback
 * http://dev.w3.org/html5/spec/video.html#dom-media-play
 * We're triggering the 'play' event here instead of relying on the
 * media element to allow using event.preventDefault() to stop
 * play from happening if desired. Usecase: preroll ads.
 */
vjs.Player.prototype.play = function(){
  this.techCall('play');
  return this;
};

// http://dev.w3.org/html5/spec/video.html#dom-media-pause
vjs.Player.prototype.pause = function(){
  this.techCall('pause');
  return this;
};

// http://dev.w3.org/html5/spec/video.html#dom-media-paused
// The initial state of paused should be true (in Safari it's actually false)
vjs.Player.prototype.paused = function(){
  return (this.techGet('paused') === false) ? false : true;
};

// http://dev.w3.org/html5/spec/video.html#dom-media-currenttime
vjs.Player.prototype.currentTime = function(seconds){
  if (seconds !== undefined) {

    // Cache the last set value for smoother scrubbing.
    this.cache_.lastSetCurrentTime = seconds;

    this.techCall('setCurrentTime', seconds);

    // Improve the accuracy of manual timeupdates
    if (this.manualTimeUpdates) { this.trigger('timeupdate'); }

    return this;
  }

  // Cache last currentTime and return
  // Default to 0 seconds
  return this.cache_.currentTime = (this.techGet('currentTime') || 0);
};

// http://dev.w3.org/html5/spec/video.html#dom-media-duration
// Duration should return NaN if not available. ParseFloat will turn false-ish values to NaN.
vjs.Player.prototype.duration = function(seconds){
  if (seconds !== undefined) {

    // Cache the last set value for optimiized scrubbing (esp. Flash)
    this.cache_.duration = parseFloat(seconds);

    return this;
  }

  return this.cache_.duration;
};

// Calculates how much time is left. Not in spec, but useful.
vjs.Player.prototype.remainingTime = function(){
  return this.duration() - this.currentTime();
};

// http://dev.w3.org/html5/spec/video.html#dom-media-buffered
// Buffered returns a timerange object.
// Kind of like an array of portions of the video that have been downloaded.
// So far no browsers return more than one range (portion)
vjs.Player.prototype.buffered = function(){
  var buffered = this.techGet('buffered'),
      start = 0,
      buflast = buffered.length - 1,
      // Default end to 0 and store in values
      end = this.cache_.bufferEnd = this.cache_.bufferEnd || 0;

  if (buffered && buflast >= 0 && buffered.end(buflast) !== end) {
    end = buffered.end(buflast);
    // Storing values allows them be overridden by setBufferedFromProgress
    this.cache_.bufferEnd = end;
  }

  return vjs.createTimeRange(start, end);
};

// Calculates amount of buffer is full. Not in spec but useful.
vjs.Player.prototype.bufferedPercent = function(){
  return (this.duration()) ? this.buffered().end(0) / this.duration() : 0;
};

// http://dev.w3.org/html5/spec/video.html#dom-media-volume
vjs.Player.prototype.volume = function(percentAsDecimal){
  var vol;

  if (percentAsDecimal !== undefined) {
    vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal))); // Force value to between 0 and 1
    this.cache_.volume = vol;
    this.techCall('setVolume', vol);
    vjs.setLocalStorage('volume', vol);
    return this;
  }

  // Default to 1 when returning current volume.
  vol = parseFloat(this.techGet('volume'));
  return (isNaN(vol)) ? 1 : vol;
};

// http://dev.w3.org/html5/spec/video.html#attr-media-muted
vjs.Player.prototype.muted = function(muted){
  if (muted !== undefined) {
    this.techCall('setMuted', muted);
    return this;
  }
  return this.techGet('muted') || false; // Default to false
};

// Check if current tech can support native fullscreen (e.g. with built in controls lik iOS, so not our flash swf)
vjs.Player.prototype.supportsFullScreen = function(){ return this.techGet('supportsFullScreen') || false; };

// Turn on fullscreen (or window) mode
vjs.Player.prototype.requestFullScreen = function(){
  var requestFullScreen = vjs.support.requestFullScreen;
  this.isFullScreen = true;

  if (requestFullScreen) {
    // the browser supports going fullscreen at the element level so we can
    // take the controls fullscreen as well as the video

    // Trigger fullscreenchange event after change
    // We have to specifically add this each time, and remove
    // when cancelling fullscreen. Otherwise if there's multiple
    // players on a page, they would all be reacting to the same fullscreen
    // events
    vjs.on(document, requestFullScreen.eventName, vjs.bind(this, function(e){
      this.isFullScreen = document[requestFullScreen.isFullScreen];

      // If cancelling fullscreen, remove event listener.
      if (this.isFullScreen === false) {
        vjs.off(document, requestFullScreen.eventName, arguments.callee);
      }

      this.trigger('fullscreenchange');
    }));

    this.el_[requestFullScreen.requestFn]();

  } else if (this.tech.supportsFullScreen()) {
    // we can't take the video.js controls fullscreen but we can go fullscreen
    // with native controls
    this.techCall('enterFullScreen');
  } else {
    // fullscreen isn't supported so we'll just stretch the video element to
    // fill the viewport
    this.enterFullWindow();
    this.trigger('fullscreenchange');
  }

  return this;
};

vjs.Player.prototype.cancelFullScreen = function(){
  var requestFullScreen = vjs.support.requestFullScreen;
  this.isFullScreen = false;

  // Check for browser element fullscreen support
  if (requestFullScreen) {
    document[requestFullScreen.cancelFn]();
  } else if (this.tech.supportsFullScreen()) {
   this.techCall('exitFullScreen');
  } else {
   this.exitFullWindow();
   this.trigger('fullscreenchange');
  }

  return this;
};

// When fullscreen isn't supported we can stretch the video container to as wide as the browser will let us.
vjs.Player.prototype.enterFullWindow = function(){
  this.isFullWindow = true;

  // Storing original doc overflow value to return to when fullscreen is off
  this.docOrigOverflow = document.documentElement.style.overflow;

  // Add listener for esc key to exit fullscreen
  vjs.on(document, 'keydown', vjs.bind(this, this.fullWindowOnEscKey));

  // Hide any scroll bars
  document.documentElement.style.overflow = 'hidden';

  // Apply fullscreen styles
  vjs.addClass(document.body, 'vjs-full-window');

  this.trigger('enterFullWindow');
};
vjs.Player.prototype.fullWindowOnEscKey = function(event){
  if (event.keyCode === 27) {
    if (this.isFullScreen === true) {
      this.cancelFullScreen();
    } else {
      this.exitFullWindow();
    }
  }
};

vjs.Player.prototype.exitFullWindow = function(){
  this.isFullWindow = false;
  vjs.off(document, 'keydown', this.fullWindowOnEscKey);

  // Unhide scroll bars.
  document.documentElement.style.overflow = this.docOrigOverflow;

  // Remove fullscreen styles
  vjs.removeClass(document.body, 'vjs-full-window');

  // Resize the box, controller, and poster to original sizes
  // this.positionAll();
  this.trigger('exitFullWindow');
};

vjs.Player.prototype.selectSource = function(sources){

  // Loop through each playback technology in the options order
  for (var i=0,j=this.options_['techOrder'];i<j.length;i++) {
    var techName = vjs.capitalize(j[i]),
        tech = window['videojs'][techName];

    // Check if the browser supports this technology
    if (tech.isSupported()) {
      // Loop through each source object
      for (var a=0,b=sources;a<b.length;a++) {
        var source = b[a];

        // Check if source can be played with this technology
        if (tech['canPlaySource'](source)) {
          return { source: source, tech: techName };
        }
      }
    }
  }

  return false;
};

// src is a pretty powerful function
// If you pass it an array of source objects, it will find the best source to play and use that object.src
//   If the new source requires a new playback technology, it will switch to that.
// If you pass it an object, it will set the source to object.src
// If you pass it anything else (url string) it will set the video source to that
vjs.Player.prototype.src = function(source){
  // Case: Array of source objects to choose from and pick the best to play
  if (source instanceof Array) {

    var sourceTech = this.selectSource(source),
        techName;

    if (sourceTech) {
        source = sourceTech.source;
        techName = sourceTech.tech;

      // If this technology is already loaded, set source
      if (techName == this.techName) {
        this.src(source); // Passing the source object
      // Otherwise load this technology with chosen source
      } else {
        this.loadTech(techName, source);
      }
    } else {
      this.el_.appendChild(vjs.createEl('p', {
        innerHTML: this.options()['notSupportedMessage']
      }));
    }

  // Case: Source object { src: '', type: '' ... }
  } else if (source instanceof Object) {

    if (window['videojs'][this.techName]['canPlaySource'](source)) {
      this.src(source.src);
    } else {
      // Send through tech loop to check for a compatible technology.
      this.src([source]);
    }

  // Case: URL String (http://myvideo...)
  } else {
    // Cache for getting last set source
    this.cache_.src = source;

    if (!this.isReady_) {
      this.ready(function(){
        this.src(source);
      });
    } else {
      this.techCall('src', source);
      if (this.options_['preload'] == 'auto') {
        this.load();
      }
      if (this.options_['autoplay']) {
        this.play();
      }
    }
  }
  return this;
};

// Begin loading the src data
// http://dev.w3.org/html5/spec/video.html#dom-media-load
vjs.Player.prototype.load = function(){
  this.techCall('load');
  return this;
};

// http://dev.w3.org/html5/spec/video.html#dom-media-currentsrc
vjs.Player.prototype.currentSrc = function(){
  return this.techGet('currentSrc') || this.cache_.src || '';
};

// Attributes/Options
vjs.Player.prototype.preload = function(value){
  if (value !== undefined) {
    this.techCall('setPreload', value);
    this.options_['preload'] = value;
    return this;
  }
  return this.techGet('preload');
};
vjs.Player.prototype.autoplay = function(value){
  if (value !== undefined) {
    this.techCall('setAutoplay', value);
    this.options_['autoplay'] = value;
    return this;
  }
  return this.techGet('autoplay', value);
};
vjs.Player.prototype.loop = function(value){
  if (value !== undefined) {
    this.techCall('setLoop', value);
    this.options_['loop'] = value;
    return this;
  }
  return this.techGet('loop');
};

/**
 * The url of the poster image source.
 * @type {String}
 * @private
 */
vjs.Player.prototype.poster_;

/**
 * Get or set the poster image source url.
 * @param  {String} src Poster image source URL
 * @return {String}    Poster image source URL or null
 */
vjs.Player.prototype.poster = function(src){
  if (src !== undefined) {
    this.poster_ = src;
  }
  return this.poster_;
};

/**
 * Whether or not the controls are showing
 * @type {Boolean}
 * @private
 */
vjs.Player.prototype.controls_;

/**
 * Get or set whether or not the controls are showing.
 * @param  {Boolean} controls Set controls to showing or not
 * @return {Boolean}    Controls are showing
 */
vjs.Player.prototype.controls = function(bool){
  if (bool !== undefined) {
    bool = !!bool; // force boolean
    // Don't trigger a change event unless it actually changed
    if (this.controls_ !== bool) {
      this.controls_ = bool;
      if (bool) {
        this.removeClass('vjs-controls-disabled');
        this.addClass('vjs-controls-enabled');
        this.trigger('controlsenabled');
      } else {
        this.removeClass('vjs-controls-enabled');
        this.addClass('vjs-controls-disabled');
        this.trigger('controlsdisabled');
      }
    }
    return this;
  }
  return this.controls_;
};

vjs.Player.prototype.usingNativeControls_;

/**
 * Toggle native controls on/off. Native controls are the controls built into
 * devices (e.g. default iPhone controls), Flash, or other techs
 * (e.g. Vimeo Controls)
 *
 * **This should only be set by the current tech, because only the tech knows
 * if it can support native controls**
 *
 * @param  {Boolean} bool    True signals that native controls are on
 * @return {vjs.Player}      Returns the player
 */
vjs.Player.prototype.usingNativeControls = function(bool){
  if (bool !== undefined) {
    bool = !!bool; // force boolean
    // Don't trigger a change event unless it actually changed
    if (this.usingNativeControls_ !== bool) {
      this.usingNativeControls_ = bool;
      if (bool) {
        this.addClass('vjs-using-native-controls');
        this.trigger('usingnativecontrols');
      } else {
        this.removeClass('vjs-using-native-controls');
        this.trigger('usingcustomcontrols');
      }
    }
    return this;
  }
  return this.usingNativeControls_;
};

vjs.Player.prototype.error = function(){ return this.techGet('error'); };
vjs.Player.prototype.ended = function(){ return this.techGet('ended'); };
vjs.Player.prototype.seeking = function(){ return this.techGet('seeking'); };

// When the player is first initialized, trigger activity so components
// like the control bar show themselves if needed
vjs.Player.prototype.userActivity_ = true;
vjs.Player.prototype.reportUserActivity = function(event){
  this.userActivity_ = true;
};

vjs.Player.prototype.userActive_ = true;
vjs.Player.prototype.userActive = function(bool){
  if (bool !== undefined) {
    bool = !!bool;
    if (bool !== this.userActive_) {
      this.userActive_ = bool;
      if (bool) {
        // If the user was inactive and is now active we want to reset the
        // inactivity timer
        this.userActivity_ = true;
        this.removeClass('vjs-user-inactive');
        this.addClass('vjs-user-active');
        this.trigger('useractive');
      } else {
        // We're switching the state to inactive manually, so erase any other
        // activity
        this.userActivity_ = false;

        // Chrome/Safari/IE have bugs where when you change the cursor it can
        // trigger a mousemove event. This causes an issue when you're hiding
        // the cursor when the user is inactive, and a mousemove signals user
        // activity. Making it impossible to go into inactive mode. Specifically
        // this happens in fullscreen when we really need to hide the cursor.
        //
        // When this gets resolved in ALL browsers it can be removed
        // https://code.google.com/p/chromium/issues/detail?id=103041
        this.tech.one('mousemove', function(e){
          e.stopPropagation();
          e.preventDefault();
        });
        this.removeClass('vjs-user-active');
        this.addClass('vjs-user-inactive');
        this.trigger('userinactive');
      }
    }
    return this;
  }
  return this.userActive_;
};

vjs.Player.prototype.listenForUserActivity = function(){
  var onMouseActivity, onMouseDown, mouseInProgress, onMouseUp,
      activityCheck, inactivityTimeout;

  onMouseActivity = this.reportUserActivity;

  onMouseDown = function() {
    onMouseActivity();
    // For as long as the they are touching the device or have their mouse down,
    // we consider them active even if they're not moving their finger or mouse.
    // So we want to continue to update that they are active
    clearInterval(mouseInProgress);
    // Setting userActivity=true now and setting the interval to the same time
    // as the activityCheck interval (250) should ensure we never miss the
    // next activityCheck
    mouseInProgress = setInterval(vjs.bind(this, onMouseActivity), 250);
  };

  onMouseUp = function(event) {
    onMouseActivity();
    // Stop the interval that maintains activity if the mouse/touch is down
    clearInterval(mouseInProgress);
  };

  // Any mouse movement will be considered user activity
  this.on('mousedown', onMouseDown);
  this.on('mousemove', onMouseActivity);
  this.on('mouseup', onMouseUp);

  // Listen for keyboard navigation
  // Shouldn't need to use inProgress interval because of key repeat
  this.on('keydown', onMouseActivity);
  this.on('keyup', onMouseActivity);

  // Consider any touch events that bubble up to be activity
  // Certain touches on the tech will be blocked from bubbling because they
  // toggle controls
  this.on('touchstart', onMouseDown);
  this.on('touchmove', onMouseActivity);
  this.on('touchend', onMouseUp);
  this.on('touchcancel', onMouseUp);

  // Run an interval every 250 milliseconds instead of stuffing everything into
  // the mousemove/touchmove function itself, to prevent performance degradation.
  // `this.reportUserActivity` simply sets this.userActivity_ to true, which
  // then gets picked up by this loop
  // http://ejohn.org/blog/learning-from-twitter/
  activityCheck = setInterval(vjs.bind(this, function() {
    // Check to see if mouse/touch activity has happened
    if (this.userActivity_) {
      // Reset the activity tracker
      this.userActivity_ = false;

      // If the user state was inactive, set the state to active
      this.userActive(true);

      // Clear any existing inactivity timeout to start the timer over
      clearTimeout(inactivityTimeout);

      // In X seconds, if no more activity has occurred the user will be
      // considered inactive
      inactivityTimeout = setTimeout(vjs.bind(this, function() {
        // Protect against the case where the inactivityTimeout can trigger just
        // before the next user activity is picked up by the activityCheck loop
        // causing a flicker
        if (!this.userActivity_) {
          this.userActive(false);
        }
      }), 2000);
    }
  }), 250);

  // Clean up the intervals when we kill the player
  this.on('dispose', function(){
    clearInterval(activityCheck);
    clearTimeout(inactivityTimeout);
  });
};

// Methods to add support for
// networkState: function(){ return this.techCall('networkState'); },
// readyState: function(){ return this.techCall('readyState'); },
// seeking: function(){ return this.techCall('seeking'); },
// initialTime: function(){ return this.techCall('initialTime'); },
// startOffsetTime: function(){ return this.techCall('startOffsetTime'); },
// played: function(){ return this.techCall('played'); },
// seekable: function(){ return this.techCall('seekable'); },
// videoTracks: function(){ return this.techCall('videoTracks'); },
// audioTracks: function(){ return this.techCall('audioTracks'); },
// videoWidth: function(){ return this.techCall('videoWidth'); },
// videoHeight: function(){ return this.techCall('videoHeight'); },
// defaultPlaybackRate: function(){ return this.techCall('defaultPlaybackRate'); },
// playbackRate: function(){ return this.techCall('playbackRate'); },
// mediaGroup: function(){ return this.techCall('mediaGroup'); },
// controller: function(){ return this.techCall('controller'); },
// defaultMuted: function(){ return this.techCall('defaultMuted'); }

// TODO
// currentSrcList: the array of sources including other formats and bitrates
// playList: array of source lists in order of playback

// RequestFullscreen API
(function(){
  var prefix, requestFS, div;

  div = document.createElement('div');

  requestFS = {};

  // Current W3C Spec
  // http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html#api
  // Mozilla Draft: https://wiki.mozilla.org/Gecko:FullScreenAPI#fullscreenchange_event
  // New: https://dvcs.w3.org/hg/fullscreen/raw-file/529a67b8d9f3/Overview.html
  if (div.cancelFullscreen !== undefined) {
    requestFS.requestFn = 'requestFullscreen';
    requestFS.cancelFn = 'exitFullscreen';
    requestFS.eventName = 'fullscreenchange';
    requestFS.isFullScreen = 'fullScreen';

  // Webkit (Chrome/Safari) and Mozilla (Firefox) have working implementations
  // that use prefixes and vary slightly from the new W3C spec. Specifically,
  // using 'exit' instead of 'cancel', and lowercasing the 'S' in Fullscreen.
  // Other browsers don't have any hints of which version they might follow yet,
  // so not going to try to predict by looping through all prefixes.
  } else {

    if (document.mozCancelFullScreen) {
      prefix = 'moz';
      requestFS.isFullScreen = prefix + 'FullScreen';
    } else {
      prefix = 'webkit';
      requestFS.isFullScreen = prefix + 'IsFullScreen';
    }

    if (div[prefix + 'RequestFullScreen']) {
      requestFS.requestFn = prefix + 'RequestFullScreen';
      requestFS.cancelFn = prefix + 'CancelFullScreen';
    }
    requestFS.eventName = prefix + 'fullscreenchange';
  }

  if (document[requestFS.cancelFn]) {
    vjs.support.requestFullScreen = requestFS;
  }

})();


/**
 * Container of main controls
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.ControlBar = vjs.Component.extend();

vjs.ControlBar.prototype.options_ = {
  loadEvent: 'play',
  children: {
    'playToggle': {},
    'currentTimeDisplay': {},
    'timeDivider': {},
    'durationDisplay': {},
    'remainingTimeDisplay': {},
    'progressControl': {},
    'fullscreenToggle': {},
    'volumeControl': {},
    'muteToggle': {}
    // 'volumeMenuButton': {}
  }
};

vjs.ControlBar.prototype.createEl = function(){
  return vjs.createEl('div', {
    className: 'vjs-control-bar'
  });
};
/**
 * Button to toggle between play and pause
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.PlayToggle = vjs.Button.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Button.call(this, player, options);

    player.on('play', vjs.bind(this, this.onPlay));
    player.on('pause', vjs.bind(this, this.onPause));
  }
});

vjs.PlayToggle.prototype.buttonText = 'Play';

vjs.PlayToggle.prototype.buildCSSClass = function(){
  return 'vjs-play-control ' + vjs.Button.prototype.buildCSSClass.call(this);
};

  // OnClick - Toggle between play and pause
vjs.PlayToggle.prototype.onClick = function(){
  if (this.player_.paused()) {
    this.player_.play();
  } else {
    this.player_.pause();
  }
};

  // OnPlay - Add the vjs-playing class to the element so it can change appearance
vjs.PlayToggle.prototype.onPlay = function(){
  vjs.removeClass(this.el_, 'vjs-paused');
  vjs.addClass(this.el_, 'vjs-playing');
  this.el_.children[0].children[0].innerHTML = 'Pause'; // change the button text to "Pause"
};

  // OnPause - Add the vjs-paused class to the element so it can change appearance
vjs.PlayToggle.prototype.onPause = function(){
  vjs.removeClass(this.el_, 'vjs-playing');
  vjs.addClass(this.el_, 'vjs-paused');
  this.el_.children[0].children[0].innerHTML = 'Play'; // change the button text to "Play"
};/**
 * Displays the current time
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.CurrentTimeDisplay = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);

    player.on('timeupdate', vjs.bind(this, this.updateContent));
  }
});

vjs.CurrentTimeDisplay.prototype.createEl = function(){
  var el = vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-current-time vjs-time-controls vjs-control'
  });

  this.content = vjs.createEl('div', {
    className: 'vjs-current-time-display',
    innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00', // label the current time for screen reader users
    'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
  });

  el.appendChild(vjs.createEl('div').appendChild(this.content));
  return el;
};

vjs.CurrentTimeDisplay.prototype.updateContent = function(){
  // Allows for smooth scrubbing, when player can't keep up.
  var time = (this.player_.scrubbing) ? this.player_.getCache().currentTime : this.player_.currentTime();
  this.content.innerHTML = '<span class="vjs-control-text">Current Time </span>' + vjs.formatTime(time, this.player_.duration());
};

/**
 * Displays the duration
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.DurationDisplay = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);

    player.on('timeupdate', vjs.bind(this, this.updateContent)); // this might need to be changes to 'durationchange' instead of 'timeupdate' eventually, however the durationchange event fires before this.player_.duration() is set, so the value cannot be written out using this method. Once the order of durationchange and this.player_.duration() being set is figured out, this can be updated.
  }
});

vjs.DurationDisplay.prototype.createEl = function(){
  var el = vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-duration vjs-time-controls vjs-control'
  });

  this.content = vjs.createEl('div', {
    className: 'vjs-duration-display',
    innerHTML: '<span class="vjs-control-text">Duration Time </span>' + '0:00', // label the duration time for screen reader users
    'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
  });

  el.appendChild(vjs.createEl('div').appendChild(this.content));
  return el;
};

vjs.DurationDisplay.prototype.updateContent = function(){
  var duration = this.player_.duration();
  if (duration) {
      this.content.innerHTML = '<span class="vjs-control-text">Duration Time </span>' + vjs.formatTime(duration); // label the duration time for screen reader users
  }
};

/**
 * Time Separator (Not used in main skin, but still available, and could be used as a 'spare element')
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.TimeDivider = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);
  }
});

vjs.TimeDivider.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-time-divider',
    innerHTML: '<div><span>/</span></div>'
  });
};

/**
 * Displays the time left in the video
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.RemainingTimeDisplay = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);

    player.on('timeupdate', vjs.bind(this, this.updateContent));
  }
});

vjs.RemainingTimeDisplay.prototype.createEl = function(){
  var el = vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-remaining-time vjs-time-controls vjs-control'
  });

  this.content = vjs.createEl('div', {
    className: 'vjs-remaining-time-display',
    innerHTML: '<span class="vjs-control-text">Remaining Time </span>' + '-0:00', // label the remaining time for screen reader users
    'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
  });

  el.appendChild(vjs.createEl('div').appendChild(this.content));
  return el;
};

vjs.RemainingTimeDisplay.prototype.updateContent = function(){
  if (this.player_.duration()) {
    this.content.innerHTML = '<span class="vjs-control-text">Remaining Time </span>' + '-'+ vjs.formatTime(this.player_.remainingTime());
  }

  // Allows for smooth scrubbing, when player can't keep up.
  // var time = (this.player_.scrubbing) ? this.player_.getCache().currentTime : this.player_.currentTime();
  // this.content.innerHTML = vjs.formatTime(time, this.player_.duration());
};
/**
 * Toggle fullscreen video
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.FullscreenToggle = vjs.Button.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Button.call(this, player, options);
  }
});

vjs.FullscreenToggle.prototype.buttonText = 'Fullscreen';

vjs.FullscreenToggle.prototype.buildCSSClass = function(){
  return 'vjs-fullscreen-control ' + vjs.Button.prototype.buildCSSClass.call(this);
};

vjs.FullscreenToggle.prototype.onClick = function(){
  if (!this.player_.isFullScreen) {
    this.player_.requestFullScreen();
    this.el_.children[0].children[0].innerHTML = 'Non-Fullscreen'; // change the button text to "Non-Fullscreen"
  } else {
    this.player_.cancelFullScreen();
    this.el_.children[0].children[0].innerHTML = 'Fullscreen'; // change the button to "Fullscreen"
  }
};/**
 * Seek, Load Progress, and Play Progress
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.ProgressControl = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);
  }
});

vjs.ProgressControl.prototype.options_ = {
  children: {
    'seekBar': {}
  }
};

vjs.ProgressControl.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-progress-control vjs-control'
  });
};

/**
 * Seek Bar and holder for the progress bars
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.SeekBar = vjs.Slider.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Slider.call(this, player, options);
    player.on('timeupdate', vjs.bind(this, this.updateARIAAttributes));
    player.ready(vjs.bind(this, this.updateARIAAttributes));
  }
});

vjs.SeekBar.prototype.options_ = {
  children: {
    'loadProgressBar': {},
    'playProgressBar': {},
    'seekHandle': {}
  },
  'barName': 'playProgressBar',
  'handleName': 'seekHandle'
};

vjs.SeekBar.prototype.playerEvent = 'timeupdate';

vjs.SeekBar.prototype.createEl = function(){
  return vjs.Slider.prototype.createEl.call(this, 'div', {
    className: 'vjs-progress-holder',
    'aria-label': 'video progress bar'
  });
};

vjs.SeekBar.prototype.updateARIAAttributes = function(){
    // Allows for smooth scrubbing, when player can't keep up.
    var time = (this.player_.scrubbing) ? this.player_.getCache().currentTime : this.player_.currentTime();
    this.el_.setAttribute('aria-valuenow',vjs.round(this.getPercent()*100, 2)); // machine readable value of progress bar (percentage complete)
    this.el_.setAttribute('aria-valuetext',vjs.formatTime(time, this.player_.duration())); // human readable value of progress bar (time complete)
};

vjs.SeekBar.prototype.getPercent = function(){
  var currentTime;
  // Flash RTMP provider will not report the correct time
  // immediately after a seek. This isn't noticeable if you're
  // seeking while the video is playing, but it is if you seek
  // while the video is paused.
  if (this.player_.techName === 'Flash' && this.player_.seeking()) {
    var cache = this.player_.getCache();
    if (cache.lastSetCurrentTime) {
      currentTime = cache.lastSetCurrentTime;
    }
    else {
      currentTime = this.player_.currentTime();
    }
  }
  else {
    currentTime = this.player_.currentTime();
  }

  return currentTime / this.player_.duration();
};

vjs.SeekBar.prototype.onMouseDown = function(event){
  vjs.Slider.prototype.onMouseDown.call(this, event);

  this.player_.scrubbing = true;

  this.videoWasPlaying = !this.player_.paused();
  this.player_.pause();
};

vjs.SeekBar.prototype.onMouseMove = function(event){
  var newTime = this.calculateDistance(event) * this.player_.duration();

  // Don't let video end while scrubbing.
  if (newTime == this.player_.duration()) { newTime = newTime - 0.1; }

  // Set new time (tell player to seek to new time)
  this.player_.currentTime(newTime);
};

vjs.SeekBar.prototype.onMouseUp = function(event){
  vjs.Slider.prototype.onMouseUp.call(this, event);

  this.player_.scrubbing = false;
  if (this.videoWasPlaying) {
    this.player_.play();
  }
};

vjs.SeekBar.prototype.stepForward = function(){
  this.player_.currentTime(this.player_.currentTime() + 5); // more quickly fast forward for keyboard-only users
};

vjs.SeekBar.prototype.stepBack = function(){
  this.player_.currentTime(this.player_.currentTime() - 5); // more quickly rewind for keyboard-only users
};


/**
 * Shows load progres
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.LoadProgressBar = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);
    player.on('progress', vjs.bind(this, this.update));
  }
});

vjs.LoadProgressBar.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-load-progress',
    innerHTML: '<span class="vjs-control-text">Loaded: 0%</span>'
  });
};

vjs.LoadProgressBar.prototype.update = function(){
  if (this.el_.style) { this.el_.style.width = vjs.round(this.player_.bufferedPercent() * 100, 2) + '%'; }
};


/**
 * Shows play progress
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.PlayProgressBar = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);
  }
});

vjs.PlayProgressBar.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-play-progress',
    innerHTML: '<span class="vjs-control-text">Progress: 0%</span>'
  });
};

/**
 * SeekBar component includes play progress bar, and seek handle
 * Needed so it can determine seek position based on handle position/size
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.SeekHandle = vjs.SliderHandle.extend();

/** @inheritDoc */
vjs.SeekHandle.prototype.defaultValue = '00:00';

/** @inheritDoc */
vjs.SeekHandle.prototype.createEl = function(){
  return vjs.SliderHandle.prototype.createEl.call(this, 'div', {
    className: 'vjs-seek-handle'
  });
};/**
 * Control the volume
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.VolumeControl = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);

    // hide volume controls when they're not supported by the current tech
    if (player.tech && player.tech.features && player.tech.features['volumeControl'] === false) {
      this.addClass('vjs-hidden');
    }
    player.on('loadstart', vjs.bind(this, function(){
      if (player.tech.features && player.tech.features['volumeControl'] === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    }));
  }
});

vjs.VolumeControl.prototype.options_ = {
  children: {
    'volumeBar': {}
  }
};

vjs.VolumeControl.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-volume-control vjs-control'
  });
};

/**
 * Contains volume level
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.VolumeBar = vjs.Slider.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Slider.call(this, player, options);
    player.on('volumechange', vjs.bind(this, this.updateARIAAttributes));
    player.ready(vjs.bind(this, this.updateARIAAttributes));
    setTimeout(vjs.bind(this, this.update), 0); // update when elements is in DOM
  }
});

vjs.VolumeBar.prototype.updateARIAAttributes = function(){
  // Current value of volume bar as a percentage
  this.el_.setAttribute('aria-valuenow',vjs.round(this.player_.volume()*100, 2));
  this.el_.setAttribute('aria-valuetext',vjs.round(this.player_.volume()*100, 2)+'%');
};

vjs.VolumeBar.prototype.options_ = {
  children: {
    'volumeLevel': {},
    'volumeHandle': {}
  },
  'barName': 'volumeLevel',
  'handleName': 'volumeHandle'
};

vjs.VolumeBar.prototype.playerEvent = 'volumechange';

vjs.VolumeBar.prototype.createEl = function(){
  return vjs.Slider.prototype.createEl.call(this, 'div', {
    className: 'vjs-volume-bar',
    'aria-label': 'volume level'
  });
};

vjs.VolumeBar.prototype.onMouseMove = function(event) {
  this.player_.volume(this.calculateDistance(event));
};

vjs.VolumeBar.prototype.getPercent = function(){
  if (this.player_.muted()) {
    return 0;
  } else {
    return this.player_.volume();
  }
};

vjs.VolumeBar.prototype.stepForward = function(){
  this.player_.volume(this.player_.volume() + 0.1);
};

vjs.VolumeBar.prototype.stepBack = function(){
  this.player_.volume(this.player_.volume() - 0.1);
};

/**
 * Shows volume level
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.VolumeLevel = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);
  }
});

vjs.VolumeLevel.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-volume-level',
    innerHTML: '<span class="vjs-control-text"></span>'
  });
};

/**
 * Change volume level
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
 vjs.VolumeHandle = vjs.SliderHandle.extend();

 /** @inheritDoc */
 vjs.VolumeHandle.prototype.defaultValue = '00:00';

 /** @inheritDoc */
 vjs.VolumeHandle.prototype.createEl = function(){
   return vjs.SliderHandle.prototype.createEl.call(this, 'div', {
     className: 'vjs-volume-handle'
   });
 };
/**
 * Mute the audio
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.MuteToggle = vjs.Button.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Button.call(this, player, options);

    player.on('volumechange', vjs.bind(this, this.update));

    // hide mute toggle if the current tech doesn't support volume control
    if (player.tech && player.tech.features && player.tech.features['volumeControl'] === false) {
      this.addClass('vjs-hidden');
    }
    player.on('loadstart', vjs.bind(this, function(){
      if (player.tech.features && player.tech.features['volumeControl'] === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    }));
  }
});

vjs.MuteToggle.prototype.createEl = function(){
  return vjs.Button.prototype.createEl.call(this, 'div', {
    className: 'vjs-mute-control vjs-control',
    innerHTML: '<div><span class="vjs-control-text">Mute</span></div>'
  });
};

vjs.MuteToggle.prototype.onClick = function(){
  this.player_.muted( this.player_.muted() ? false : true );
};

vjs.MuteToggle.prototype.update = function(){
  var vol = this.player_.volume(),
      level = 3;

  if (vol === 0 || this.player_.muted()) {
    level = 0;
  } else if (vol < 0.33) {
    level = 1;
  } else if (vol < 0.67) {
    level = 2;
  }

  // Don't rewrite the button text if the actual text doesn't change.
  // This causes unnecessary and confusing information for screen reader users.
  // This check is needed because this function gets called every time the volume level is changed.
  if(this.player_.muted()){
      if(this.el_.children[0].children[0].innerHTML!='Unmute'){
          this.el_.children[0].children[0].innerHTML = 'Unmute'; // change the button text to "Unmute"
      }
  } else {
      if(this.el_.children[0].children[0].innerHTML!='Mute'){
          this.el_.children[0].children[0].innerHTML = 'Mute'; // change the button text to "Mute"
      }
  }

  /* TODO improve muted icon classes */
  for (var i = 0; i < 4; i++) {
    vjs.removeClass(this.el_, 'vjs-vol-'+i);
  }
  vjs.addClass(this.el_, 'vjs-vol-'+level);
};
/**
 * Menu button with a popup for showing the volume slider.
 * @constructor
 */
vjs.VolumeMenuButton = vjs.MenuButton.extend({
  /** @constructor */
  init: function(player, options){
    vjs.MenuButton.call(this, player, options);

    // Same listeners as MuteToggle
    player.on('volumechange', vjs.bind(this, this.update));

    // hide mute toggle if the current tech doesn't support volume control
    if (player.tech && player.tech.features && player.tech.features.volumeControl === false) {
      this.addClass('vjs-hidden');
    }
    player.on('loadstart', vjs.bind(this, function(){
      if (player.tech.features && player.tech.features.volumeControl === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    }));
    this.addClass('vjs-menu-button');
  }
});

vjs.VolumeMenuButton.prototype.createMenu = function(){
  var menu = new vjs.Menu(this.player_, {
    contentElType: 'div'
  });
  var vc = new vjs.VolumeBar(this.player_, vjs.obj.merge({vertical: true}, this.options_.volumeBar));
  menu.addChild(vc);
  return menu;
};

vjs.VolumeMenuButton.prototype.onClick = function(){
  vjs.MuteToggle.prototype.onClick.call(this);
  vjs.MenuButton.prototype.onClick.call(this);
};

vjs.VolumeMenuButton.prototype.createEl = function(){
  return vjs.Button.prototype.createEl.call(this, 'div', {
    className: 'vjs-volume-menu-button vjs-menu-button vjs-control',
    innerHTML: '<div><span class="vjs-control-text">Mute</span></div>'
  });
};
vjs.VolumeMenuButton.prototype.update = vjs.MuteToggle.prototype.update;
/* Poster Image
================================================================================ */
/**
 * Poster image. Shows before the video plays.
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.PosterImage = vjs.Button.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Button.call(this, player, options);

    if (!player.poster() || !player.controls()) {
      this.hide();
    }

    player.on('play', vjs.bind(this, this.hide));
  }
});

vjs.PosterImage.prototype.createEl = function(){
  var el = vjs.createEl('div', {
        className: 'vjs-poster',

        // Don't want poster to be tabbable.
        tabIndex: -1
      }),
      poster = this.player_.poster();

  if (poster) {
    if ('backgroundSize' in el.style) {
      el.style.backgroundImage = 'url("' + poster + '")';
    } else {
      el.appendChild(vjs.createEl('img', { src: poster }));
    }
  }

  return el;
};

vjs.PosterImage.prototype.onClick = function(){
  // Only accept clicks when controls are enabled
  if (this.player().controls()) {
    this.player_.play();
  }
};
/* Loading Spinner
================================================================================ */
/**
 * Loading spinner for waiting events
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.LoadingSpinner = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);

    player.on('canplay', vjs.bind(this, this.hide));
    player.on('canplaythrough', vjs.bind(this, this.hide));
    player.on('playing', vjs.bind(this, this.hide));
    player.on('seeked', vjs.bind(this, this.hide));

    player.on('seeking', vjs.bind(this, this.show));

    // in some browsers seeking does not trigger the 'playing' event,
    // so we also need to trap 'seeked' if we are going to set a
    // 'seeking' event
    player.on('seeked', vjs.bind(this, this.hide));

    player.on('error', vjs.bind(this, this.show));

    // Not showing spinner on stalled any more. Browsers may stall and then not trigger any events that would remove the spinner.
    // Checked in Chrome 16 and Safari 5.1.2. http://help.videojs.com/discussions/problems/883-why-is-the-download-progress-showing
    // player.on('stalled', vjs.bind(this, this.show));

    player.on('waiting', vjs.bind(this, this.show));
  }
});

vjs.LoadingSpinner.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-loading-spinner'
  });
};
/* Big Play Button
================================================================================ */
/**
 * Initial play button. Shows before the video has played. The hiding of the
 * big play button is done via CSS and player states.
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.BigPlayButton = vjs.Button.extend();

vjs.BigPlayButton.prototype.createEl = function(){
  return vjs.Button.prototype.createEl.call(this, 'div', {
    className: 'vjs-big-play-button',
    innerHTML: '<span></span>',
    'aria-label': 'play video'
  });
};

vjs.BigPlayButton.prototype.onClick = function(){
  this.player_.play();
};
/**
 * @fileoverview Media Technology Controller - Base class for media playback
 * technology controllers like Flash and HTML5
 */

/**
 * Base class for media (HTML5 Video, Flash) controllers
 * @param {vjs.Player|Object} player  Central player instance
 * @param {Object=} options Options object
 * @constructor
 */
vjs.MediaTechController = vjs.Component.extend({
  /** @constructor */
  init: function(player, options, ready){
    vjs.Component.call(this, player, options, ready);

    this.initControlsListeners();
  }
});

/**
 * Set up click and touch listeners for the playback element
 * On desktops, a click on the video itself will toggle playback,
 * on a mobile device a click on the video toggles controls.
 * (toggling controls is done by toggling the user state between active and
 * inactive)
 *
 * A tap can signal that a user has become active, or has become inactive
 * e.g. a quick tap on an iPhone movie should reveal the controls. Another
 * quick tap should hide them again (signaling the user is in an inactive
 * viewing state)
 *
 * In addition to this, we still want the user to be considered inactive after
 * a few seconds of inactivity.
 *
 * Note: the only part of iOS interaction we can't mimic with this setup
 * is a touch and hold on the video element counting as activity in order to
 * keep the controls showing, but that shouldn't be an issue. A touch and hold on
 * any controls will still keep the user active
 */
vjs.MediaTechController.prototype.initControlsListeners = function(){
  var player, tech, activateControls, deactivateControls;

  tech = this;
  player = this.player();

  var activateControls = function(){
    if (player.controls() && !player.usingNativeControls()) {
      tech.addControlsListeners();
    }
  };

  deactivateControls = vjs.bind(tech, tech.removeControlsListeners);

  // Set up event listeners once the tech is ready and has an element to apply
  // listeners to
  this.ready(activateControls);
  player.on('controlsenabled', activateControls);
  player.on('controlsdisabled', deactivateControls);
};

vjs.MediaTechController.prototype.addControlsListeners = function(){
  var preventBubble, userWasActive;

  // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
  // trigger mousedown/up.
  // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
  // Any touch events are set to block the mousedown event from happening
  this.on('mousedown', this.onClick);

  // We need to block touch events on the video element from bubbling up,
  // otherwise they'll signal activity prematurely. The specific use case is
  // when the video is playing and the controls have faded out. In this case
  // only a tap (fast touch) should toggle the user active state and turn the
  // controls back on. A touch and move or touch and hold should not trigger
  // the controls (per iOS as an example at least)
  //
  // We always want to stop propagation on touchstart because touchstart
  // at the player level starts the touchInProgress interval. We can still
  // report activity on the other events, but won't let them bubble for
  // consistency. We don't want to bubble a touchend without a touchstart.
  this.on('touchstart', function(event) {
    // Stop the mouse events from also happening
    event.preventDefault();
    event.stopPropagation();
    // Record if the user was active now so we don't have to keep polling it
    userWasActive = this.player_.userActive();
  });

  preventBubble = function(event){
    event.stopPropagation();
    if (userWasActive) {
      this.player_.reportUserActivity();
    }
  };

  // Treat all touch events the same for consistency
  this.on('touchmove', preventBubble);
  this.on('touchleave', preventBubble);
  this.on('touchcancel', preventBubble);
  this.on('touchend', preventBubble);

  // Turn on component tap events
  this.emitTapEvents();

  // The tap listener needs to come after the touchend listener because the tap
  // listener cancels out any reportedUserActivity when setting userActive(false)
  this.on('tap', this.onTap);
};

/**
 * Remove the listeners used for click and tap controls. This is needed for
 * toggling to controls disabled, where a tap/touch should do nothing.
 */
vjs.MediaTechController.prototype.removeControlsListeners = function(){
  // We don't want to just use `this.off()` because there might be other needed
  // listeners added by techs that extend this.
  this.off('tap');
  this.off('touchstart');
  this.off('touchmove');
  this.off('touchleave');
  this.off('touchcancel');
  this.off('touchend');
  this.off('click');
  this.off('mousedown');
};

/**
 * Handle a click on the media element. By default will play/pause the media.
 */
vjs.MediaTechController.prototype.onClick = function(event){
  // We're using mousedown to detect clicks thanks to Flash, but mousedown
  // will also be triggered with right-clicks, so we need to prevent that
  if (event.button !== 0) return;

  // When controls are disabled a click should not toggle playback because
  // the click is considered a control
  if (this.player().controls()) {
    if (this.player().paused()) {
      this.player().play();
    } else {
      this.player().pause();
    }
  }
};

/**
 * Handle a tap on the media element. By default it will toggle the user
 * activity state, which hides and shows the controls.
 */

vjs.MediaTechController.prototype.onTap = function(){
  this.player().userActive(!this.player().userActive());
};

vjs.MediaTechController.prototype.features = {
  'volumeControl': true,

  // Resizing plugins using request fullscreen reloads the plugin
  'fullscreenResize': false,

  // Optional events that we can manually mimic with timers
  // currently not triggered by video-js-swf
  'progressEvents': false,
  'timeupdateEvents': false
};

vjs.media = {};

/**
 * List of default API methods for any MediaTechController
 * @type {String}
 */
vjs.media.ApiMethods = 'play,pause,paused,currentTime,setCurrentTime,duration,buffered,volume,setVolume,muted,setMuted,width,height,supportsFullScreen,enterFullScreen,src,load,currentSrc,preload,setPreload,autoplay,setAutoplay,loop,setLoop,error,networkState,readyState,seeking,initialTime,startOffsetTime,played,seekable,ended,videoTracks,audioTracks,videoWidth,videoHeight,textTracks,defaultPlaybackRate,playbackRate,mediaGroup,controller,controls,defaultMuted'.split(',');
// Create placeholder methods for each that warn when a method isn't supported by the current playback technology

function createMethod(methodName){
  return function(){
    throw new Error('The "'+methodName+'" method is not available on the playback technology\'s API');
  };
}

for (var i = vjs.media.ApiMethods.length - 1; i >= 0; i--) {
  var methodName = vjs.media.ApiMethods[i];
  vjs.MediaTechController.prototype[vjs.media.ApiMethods[i]] = createMethod(methodName);
}
/**
 * @fileoverview HTML5 Media Controller - Wrapper for HTML5 Media API
 */

/**
 * HTML5 Media Controller - Wrapper for HTML5 Media API
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @param {Function=} ready
 * @constructor
 */
vjs.Html5 = vjs.MediaTechController.extend({
  /** @constructor */
  init: function(player, options, ready){
    // volume cannot be changed from 1 on iOS
    this.features['volumeControl'] = vjs.Html5.canControlVolume();

    // In iOS, if you move a video element in the DOM, it breaks video playback.
    this.features['movingMediaElementInDOM'] = !vjs.IS_IOS;

    // HTML video is able to automatically resize when going to fullscreen
    this.features['fullscreenResize'] = true;

    vjs.MediaTechController.call(this, player, options, ready);

    var source = options['source'];

    // If the element source is already set, we may have missed the loadstart event, and want to trigger it.
    // We don't want to set the source again and interrupt playback.
    if (source && this.el_.currentSrc == source.src) {
      player.trigger('loadstart');

    // Otherwise set the source if one was provided.
    } else if (source) {
      this.el_.src = source.src;
    }

    // Determine if native controls should be used
    // Our goal should be to get the custom controls on mobile solid everywhere
    // so we can remove this all together. Right now this will block custom
    // controls on touch enabled laptops like the Chrome Pixel
    if (vjs.TOUCH_ENABLED && player.options()['nativeControlsForTouch'] !== false) {
      this.useNativeControls();
    }

    // Chrome and Safari both have issues with autoplay.
    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
    // This fixes both issues. Need to wait for API, so it updates displays correctly
    player.ready(function(){
      if (this.tag && this.options_['autoplay'] && this.paused()) {
        delete this.tag['poster']; // Chrome Fix. Fixed in Chrome v16.
        this.play();
      }
    });

    this.setupTriggers();
    this.triggerReady();
  }
});

vjs.Html5.prototype.dispose = function(){
  vjs.MediaTechController.prototype.dispose.call(this);
};

vjs.Html5.prototype.createEl = function(){
  var player = this.player_,
      // If possible, reuse original tag for HTML5 playback technology element
      el = player.tag,
      newEl;

  // Check if this browser supports moving the element into the box.
  // On the iPhone video will break if you move the element,
  // So we have to create a brand new element.
  if (!el || this.features['movingMediaElementInDOM'] === false) {

    // If the original tag is still there, remove it.
    if (el) {
      el['player'] = null;
      player.tag = null;
      player.el().removeChild(el);
      el = el.cloneNode(false);
    } else {
      el = vjs.createEl('video', {
        id:player.id() + '_html5_api',
        className:'vjs-tech'
      });
    }
    // associate the player with the new tag
    el['player'] = player;

    vjs.insertFirst(el, player.el());
  }

  // Update specific tag settings, in case they were overridden
  var attrs = ['autoplay','preload','loop','muted'];
  for (var i = attrs.length - 1; i >= 0; i--) {
    var attr = attrs[i];
    if (player.options_[attr] !== null) {
      el[attr] = player.options_[attr];
    }
  }

  return el;
  // jenniisawesome = true;
};

// Make video events trigger player events
// May seem verbose here, but makes other APIs possible.
vjs.Html5.prototype.setupTriggers = function(){
  for (var i = vjs.Html5.Events.length - 1; i >= 0; i--) {
    vjs.on(this.el_, vjs.Html5.Events[i], vjs.bind(this.player_, this.eventHandler));
  }
};
// Triggers removed using this.off when disposed

vjs.Html5.prototype.eventHandler = function(e){
  this.trigger(e);

  // No need for media events to bubble up.
  e.stopPropagation();
};

vjs.Html5.prototype.useNativeControls = function(){
  var tech, player, controlsOn, controlsOff, cleanUp;

  tech = this;
  player = this.player();

  // If the player controls are enabled turn on the native controls
  tech.setControls(player.controls());

  // Update the native controls when player controls state is updated
  controlsOn = function(){
    tech.setControls(true);
  };
  controlsOff = function(){
    tech.setControls(false);
  };
  player.on('controlsenabled', controlsOn);
  player.on('controlsdisabled', controlsOff);

  // Clean up when not using native controls anymore
  cleanUp = function(){
    player.off('controlsenabled', controlsOn);
    player.off('controlsdisabled', controlsOff);
  };
  tech.on('dispose', cleanUp);
  player.on('usingcustomcontrols', cleanUp);

  // Update the state of the player to using native controls
  player.usingNativeControls(true);
};


vjs.Html5.prototype.play = function(){ this.el_.play(); };
vjs.Html5.prototype.pause = function(){ this.el_.pause(); };
vjs.Html5.prototype.paused = function(){ return this.el_.paused; };

vjs.Html5.prototype.currentTime = function(){ return this.el_.currentTime; };
vjs.Html5.prototype.setCurrentTime = function(seconds){
  try {
    this.el_.currentTime = seconds;
  } catch(e) {
    vjs.log(e, 'Video is not ready. (Video.js)');
    // this.warning(VideoJS.warnings.videoNotReady);
  }
};

vjs.Html5.prototype.duration = function(){ return this.el_.duration || 0; };
vjs.Html5.prototype.buffered = function(){ return this.el_.buffered; };

vjs.Html5.prototype.volume = function(){ return this.el_.volume; };
vjs.Html5.prototype.setVolume = function(percentAsDecimal){ this.el_.volume = percentAsDecimal; };
vjs.Html5.prototype.muted = function(){ return this.el_.muted; };
vjs.Html5.prototype.setMuted = function(muted){ this.el_.muted = muted; };

vjs.Html5.prototype.width = function(){ return this.el_.offsetWidth; };
vjs.Html5.prototype.height = function(){ return this.el_.offsetHeight; };

vjs.Html5.prototype.supportsFullScreen = function(){
  if (typeof this.el_.webkitEnterFullScreen == 'function') {

    // Seems to be broken in Chromium/Chrome && Safari in Leopard
    if (/Android/.test(vjs.USER_AGENT) || !/Chrome|Mac OS X 10.5/.test(vjs.USER_AGENT)) {
      return true;
    }
  }
  return false;
};

vjs.Html5.prototype.enterFullScreen = function(){
  var video = this.el_;
  if (video.paused && video.networkState <= video.HAVE_METADATA) {
    // attempt to prime the video element for programmatic access
    // this isn't necessary on the desktop but shouldn't hurt
    this.el_.play();

    // playing and pausing synchronously during the transition to fullscreen
    // can get iOS ~6.1 devices into a play/pause loop
    setTimeout(function(){
      video.pause();
      video.webkitEnterFullScreen();
    }, 0);
  } else {
    video.webkitEnterFullScreen();
  }
};
vjs.Html5.prototype.exitFullScreen = function(){
  this.el_.webkitExitFullScreen();
};
vjs.Html5.prototype.src = function(src){ this.el_.src = src; };
vjs.Html5.prototype.load = function(){ this.el_.load(); };
vjs.Html5.prototype.currentSrc = function(){ return this.el_.currentSrc; };

vjs.Html5.prototype.preload = function(){ return this.el_.preload; };
vjs.Html5.prototype.setPreload = function(val){ this.el_.preload = val; };

vjs.Html5.prototype.autoplay = function(){ return this.el_.autoplay; };
vjs.Html5.prototype.setAutoplay = function(val){ this.el_.autoplay = val; };

vjs.Html5.prototype.controls = function(){ return this.el_.controls; }
vjs.Html5.prototype.setControls = function(val){ this.el_.controls = !!val; }

vjs.Html5.prototype.loop = function(){ return this.el_.loop; };
vjs.Html5.prototype.setLoop = function(val){ this.el_.loop = val; };

vjs.Html5.prototype.error = function(){ return this.el_.error; };
vjs.Html5.prototype.seeking = function(){ return this.el_.seeking; };
vjs.Html5.prototype.ended = function(){ return this.el_.ended; };
vjs.Html5.prototype.defaultMuted = function(){ return this.el_.defaultMuted; };

/* HTML5 Support Testing ---------------------------------------------------- */

vjs.Html5.isSupported = function(){
  return !!vjs.TEST_VID.canPlayType;
};

vjs.Html5.canPlaySource = function(srcObj){
  // IE9 on Windows 7 without MediaPlayer throws an error here
  // https://github.com/videojs/video.js/issues/519
  try {
    return !!vjs.TEST_VID.canPlayType(srcObj.type);
  } catch(e) {
    return '';
  }
  // TODO: Check Type
  // If no Type, check ext
  // Check Media Type
};

vjs.Html5.canControlVolume = function(){
  var volume =  vjs.TEST_VID.volume;
  vjs.TEST_VID.volume = (volume / 2) + 0.1;
  return volume !== vjs.TEST_VID.volume;
};

// List of all HTML5 events (various uses).
vjs.Html5.Events = 'loadstart,suspend,abort,error,emptied,stalled,loadedmetadata,loadeddata,canplay,canplaythrough,playing,waiting,seeking,seeked,ended,durationchange,timeupdate,progress,play,pause,ratechange,volumechange'.split(',');


// HTML5 Feature detection and Device Fixes --------------------------------- //

  // Override Android 2.2 and less canPlayType method which is broken
if (vjs.IS_OLD_ANDROID) {
  document.createElement('video').constructor.prototype.canPlayType = function(type){
    return (type && type.toLowerCase().indexOf('video/mp4') != -1) ? 'maybe' : '';
  };
}
/**
 * @fileoverview VideoJS-SWF - Custom Flash Player with HTML5-ish API
 * https://github.com/zencoder/video-js-swf
 * Not using setupTriggers. Using global onEvent func to distribute events
 */

/**
 * HTML5 Media Controller - Wrapper for HTML5 Media API
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @param {Function=} ready
 * @constructor
 */
vjs.Flash = vjs.MediaTechController.extend({
  /** @constructor */
  init: function(player, options, ready){
    vjs.MediaTechController.call(this, player, options, ready);

    var source = options['source'],

        // Which element to embed in
        parentEl = options['parentEl'],

        // Create a temporary element to be replaced by swf object
        placeHolder = this.el_ = vjs.createEl('div', { id: player.id() + '_temp_flash' }),

        // Generate ID for swf object
        objId = player.id()+'_flash_api',

        // Store player options in local var for optimization
        // TODO: switch to using player methods instead of options
        // e.g. player.autoplay();
        playerOptions = player.options_,

        // Merge default flashvars with ones passed in to init
        flashVars = vjs.obj.merge({

          // SWF Callback Functions
          'readyFunction': 'videojs.Flash.onReady',
          'eventProxyFunction': 'videojs.Flash.onEvent',
          'errorEventProxyFunction': 'videojs.Flash.onError',

          // Player Settings
          'autoplay': playerOptions.autoplay,
          'preload': playerOptions.preload,
          'loop': playerOptions.loop,
          'muted': playerOptions.muted

        }, options['flashVars']),

        // Merge default parames with ones passed in
        params = vjs.obj.merge({
          'wmode': 'opaque', // Opaque is needed to overlay controls, but can affect playback performance
          'bgcolor': '#000000' // Using bgcolor prevents a white flash when the object is loading
        }, options['params']),

        // Merge default attributes with ones passed in
        attributes = vjs.obj.merge({
          'id': objId,
          'name': objId, // Both ID and Name needed or swf to identifty itself
          'class': 'vjs-tech'
        }, options['attributes'])
    ;

    // If source was supplied pass as a flash var.
    if (source) {
      if (source.type && vjs.Flash.isStreamingType(source.type)) {
        var parts = vjs.Flash.streamToParts(source.src);
        flashVars['rtmpConnection'] = encodeURIComponent(parts.connection);
        flashVars['rtmpStream'] = encodeURIComponent(parts.stream);
      }
      else {
        flashVars['src'] = encodeURIComponent(vjs.getAbsoluteURL(source.src));
      }
    }

    // Add placeholder to player div
    vjs.insertFirst(placeHolder, parentEl);

    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
    // This allows resetting the playhead when we catch the reload
    if (options['startTime']) {
      this.ready(function(){
        this.load();
        this.play();
        this.currentTime(options['startTime']);
      });
    }

    // Flash iFrame Mode
    // In web browsers there are multiple instances where changing the parent element or visibility of a plugin causes the plugin to reload.
    // - Firefox just about always. https://bugzilla.mozilla.org/show_bug.cgi?id=90268 (might be fixed by version 13)
    // - Webkit when hiding the plugin
    // - Webkit and Firefox when using requestFullScreen on a parent element
    // Loading the flash plugin into a dynamically generated iFrame gets around most of these issues.
    // Issues that remain include hiding the element and requestFullScreen in Firefox specifically

    // There's on particularly annoying issue with this method which is that Firefox throws a security error on an offsite Flash object loaded into a dynamically created iFrame.
    // Even though the iframe was inserted into a page on the web, Firefox + Flash considers it a local app trying to access an internet file.
    // I tried mulitple ways of setting the iframe src attribute but couldn't find a src that worked well. Tried a real/fake source, in/out of domain.
    // Also tried a method from stackoverflow that caused a security error in all browsers. http://stackoverflow.com/questions/2486901/how-to-set-document-domain-for-a-dynamically-generated-iframe
    // In the end the solution I found to work was setting the iframe window.location.href right before doing a document.write of the Flash object.
    // The only downside of this it seems to trigger another http request to the original page (no matter what's put in the href). Not sure why that is.

    // NOTE (2012-01-29): Cannot get Firefox to load the remote hosted SWF into a dynamically created iFrame
    // Firefox 9 throws a security error, unleess you call location.href right before doc.write.
    //    Not sure why that even works, but it causes the browser to look like it's continuously trying to load the page.
    // Firefox 3.6 keeps calling the iframe onload function anytime I write to it, causing an endless loop.

    if (options['iFrameMode'] === true && !vjs.IS_FIREFOX) {

      // Create iFrame with vjs-tech class so it's 100% width/height
      var iFrm = vjs.createEl('iframe', {
        'id': objId + '_iframe',
        'name': objId + '_iframe',
        'className': 'vjs-tech',
        'scrolling': 'no',
        'marginWidth': 0,
        'marginHeight': 0,
        'frameBorder': 0
      });

      // Update ready function names in flash vars for iframe window
      flashVars['readyFunction'] = 'ready';
      flashVars['eventProxyFunction'] = 'events';
      flashVars['errorEventProxyFunction'] = 'errors';

      // Tried multiple methods to get this to work in all browsers

      // Tried embedding the flash object in the page first, and then adding a place holder to the iframe, then replacing the placeholder with the page object.
      // The goal here was to try to load the swf URL in the parent page first and hope that got around the firefox security error
      // var newObj = vjs.Flash.embed(options['swf'], placeHolder, flashVars, params, attributes);
      // (in onload)
      //  var temp = vjs.createEl('a', { id:'asdf', innerHTML: 'asdf' } );
      //  iDoc.body.appendChild(temp);

      // Tried embedding the flash object through javascript in the iframe source.
      // This works in webkit but still triggers the firefox security error
      // iFrm.src = 'javascript: document.write('"+vjs.Flash.getEmbedCode(options['swf'], flashVars, params, attributes)+"');";

      // Tried an actual local iframe just to make sure that works, but it kills the easiness of the CDN version if you require the user to host an iframe
      // We should add an option to host the iframe locally though, because it could help a lot of issues.
      // iFrm.src = "iframe.html";

      // Wait until iFrame has loaded to write into it.
      vjs.on(iFrm, 'load', vjs.bind(this, function(){

        var iDoc,
            iWin = iFrm.contentWindow;

        // The one working method I found was to use the iframe's document.write() to create the swf object
        // This got around the security issue in all browsers except firefox.
        // I did find a hack where if I call the iframe's window.location.href='', it would get around the security error
        // However, the main page would look like it was loading indefinitely (URL bar loading spinner would never stop)
        // Plus Firefox 3.6 didn't work no matter what I tried.
        // if (vjs.USER_AGENT.match('Firefox')) {
        //   iWin.location.href = '';
        // }

        // Get the iFrame's document depending on what the browser supports
        iDoc = iFrm.contentDocument ? iFrm.contentDocument : iFrm.contentWindow.document;

        // Tried ensuring both document domains were the same, but they already were, so that wasn't the issue.
        // Even tried adding /. that was mentioned in a browser security writeup
        // document.domain = document.domain+'/.';
        // iDoc.domain = document.domain+'/.';

        // Tried adding the object to the iframe doc's innerHTML. Security error in all browsers.
        // iDoc.body.innerHTML = swfObjectHTML;

        // Tried appending the object to the iframe doc's body. Security error in all browsers.
        // iDoc.body.appendChild(swfObject);

        // Using document.write actually got around the security error that browsers were throwing.
        // Again, it's a dynamically generated (same domain) iframe, loading an external Flash swf.
        // Not sure why that's a security issue, but apparently it is.
        iDoc.write(vjs.Flash.getEmbedCode(options['swf'], flashVars, params, attributes));

        // Setting variables on the window needs to come after the doc write because otherwise they can get reset in some browsers
        // So far no issues with swf ready event being called before it's set on the window.
        iWin['player'] = this.player_;

        // Create swf ready function for iFrame window
        iWin['ready'] = vjs.bind(this.player_, function(currSwf){
          var el = iDoc.getElementById(currSwf),
              player = this,
              tech = player.tech;

          // Update reference to playback technology element
          tech.el_ = el;

          // Make sure swf is actually ready. Sometimes the API isn't actually yet.
          vjs.Flash.checkReady(tech);
        });

        // Create event listener for all swf events
        iWin['events'] = vjs.bind(this.player_, function(swfID, eventName){
          var player = this;
          if (player && player.techName === 'flash') {
            player.trigger(eventName);
          }
        });

        // Create error listener for all swf errors
        iWin['errors'] = vjs.bind(this.player_, function(swfID, eventName){
          vjs.log('Flash Error', eventName);
        });

      }));

      // Replace placeholder with iFrame (it will load now)
      placeHolder.parentNode.replaceChild(iFrm, placeHolder);

    // If not using iFrame mode, embed as normal object
    } else {
      vjs.Flash.embed(options['swf'], placeHolder, flashVars, params, attributes);
    }
  }
});

vjs.Flash.prototype.dispose = function(){
  vjs.MediaTechController.prototype.dispose.call(this);
};

vjs.Flash.prototype.play = function(){
  this.el_.vjs_play();
};

vjs.Flash.prototype.pause = function(){
  this.el_.vjs_pause();
};

vjs.Flash.prototype.src = function(src){
  if (vjs.Flash.isStreamingSrc(src)) {
    src = vjs.Flash.streamToParts(src);
    this.setRtmpConnection(src.connection);
    this.setRtmpStream(src.stream);
  }
  else {
    // Make sure source URL is abosolute.
    src = vjs.getAbsoluteURL(src);
    this.el_.vjs_src(src);
  }

  // Currently the SWF doesn't autoplay if you load a source later.
  // e.g. Load player w/ no source, wait 2s, set src.
  if (this.player_.autoplay()) {
    var tech = this;
    setTimeout(function(){ tech.play(); }, 0);
  }
};

vjs.Flash.prototype.currentSrc = function(){
  var src = this.el_.vjs_getProperty('currentSrc');
  // no src, check and see if RTMP
  if (src == null) {
    var connection = this.rtmpConnection(),
        stream = this.rtmpStream();

    if (connection && stream) {
      src = vjs.Flash.streamFromParts(connection, stream);
    }
  }
  return src;
};

vjs.Flash.prototype.load = function(){
  this.el_.vjs_load();
};

vjs.Flash.prototype.poster = function(){
  this.el_.vjs_getProperty('poster');
};

vjs.Flash.prototype.buffered = function(){
  return vjs.createTimeRange(0, this.el_.vjs_getProperty('buffered'));
};

vjs.Flash.prototype.supportsFullScreen = function(){
  return false; // Flash does not allow fullscreen through javascript
};

vjs.Flash.prototype.enterFullScreen = function(){
  return false;
};


// Create setters and getters for attributes
var api = vjs.Flash.prototype,
    readWrite = 'rtmpConnection,rtmpStream,preload,currentTime,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(','),
    readOnly = 'error,currentSrc,networkState,readyState,seeking,initialTime,duration,startOffsetTime,paused,played,seekable,ended,videoTracks,audioTracks,videoWidth,videoHeight,textTracks'.split(',');
    // Overridden: buffered

/**
 * @this {*}
 */
var createSetter = function(attr){
  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);
  api['set'+attrUpper] = function(val){ return this.el_.vjs_setProperty(attr, val); };
};

/**
 * @this {*}
 */
var createGetter = function(attr){
  api[attr] = function(){ return this.el_.vjs_getProperty(attr); };
};

(function(){
  var i;
  // Create getter and setters for all read/write attributes
  for (i = 0; i < readWrite.length; i++) {
    createGetter(readWrite[i]);
    createSetter(readWrite[i]);
  }

  // Create getters for read-only attributes
  for (i = 0; i < readOnly.length; i++) {
    createGetter(readOnly[i]);
  }
})();

/* Flash Support Testing -------------------------------------------------------- */

vjs.Flash.isSupported = function(){
  return vjs.Flash.version()[0] >= 10;
  // return swfobject.hasFlashPlayerVersion('10');
};

vjs.Flash.canPlaySource = function(srcObj){
  if (srcObj.type in vjs.Flash.formats || srcObj.type in vjs.Flash.streamingFormats) { return 'maybe'; }
};

vjs.Flash.formats = {
  'video/flv': 'FLV',
  'video/x-flv': 'FLV',
  'video/mp4': 'MP4',
  'video/m4v': 'MP4'
};

vjs.Flash.streamingFormats = {
  'rtmp/mp4': 'MP4',
  'rtmp/flv': 'FLV'
};

vjs.Flash['onReady'] = function(currSwf){
  var el = vjs.el(currSwf);

  // Get player from box
  // On firefox reloads, el might already have a player
  var player = el['player'] || el.parentNode['player'],
      tech = player.tech;

  // Reference player on tech element
  el['player'] = player;

  // Update reference to playback technology element
  tech.el_ = el;

  vjs.Flash.checkReady(tech);
};

// The SWF isn't alwasy ready when it says it is. Sometimes the API functions still need to be added to the object.
// If it's not ready, we set a timeout to check again shortly.
vjs.Flash.checkReady = function(tech){

  // Check if API property exists
  if (tech.el().vjs_getProperty) {

    // If so, tell tech it's ready
    tech.triggerReady();

  // Otherwise wait longer.
  } else {

    setTimeout(function(){
      vjs.Flash.checkReady(tech);
    }, 50);

  }
};

// Trigger events from the swf on the player
vjs.Flash['onEvent'] = function(swfID, eventName){
  var player = vjs.el(swfID)['player'];
  player.trigger(eventName);
};

// Log errors from the swf
vjs.Flash['onError'] = function(swfID, err){
  var player = vjs.el(swfID)['player'];
  player.trigger('error');
  vjs.log('Flash Error', err, swfID);
};

// Flash Version Check
vjs.Flash.version = function(){
  var version = '0,0,0';

  // IE
  try {
    version = new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

  // other browsers
  } catch(e) {
    try {
      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin){
        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
      }
    } catch(err) {}
  }
  return version.split(',');
};

// Flash embedding method. Only used in non-iframe mode
vjs.Flash.embed = function(swf, placeHolder, flashVars, params, attributes){
  var code = vjs.Flash.getEmbedCode(swf, flashVars, params, attributes),

      // Get element by embedding code and retrieving created element
      obj = vjs.createEl('div', { innerHTML: code }).childNodes[0],

      par = placeHolder.parentNode
  ;

  placeHolder.parentNode.replaceChild(obj, placeHolder);

  // IE6 seems to have an issue where it won't initialize the swf object after injecting it.
  // This is a dumb fix
  var newObj = par.childNodes[0];
  setTimeout(function(){
    newObj.style.display = 'block';
  }, 1000);

  return obj;

};

vjs.Flash.getEmbedCode = function(swf, flashVars, params, attributes){

  var objTag = '<object type="application/x-shockwave-flash"',
      flashVarsString = '',
      paramsString = '',
      attrsString = '';

  // Convert flash vars to string
  if (flashVars) {
    vjs.obj.each(flashVars, function(key, val){
      flashVarsString += (key + '=' + val + '&amp;');
    });
  }

  // Add swf, flashVars, and other default params
  params = vjs.obj.merge({
    'movie': swf,
    'flashvars': flashVarsString,
    'allowScriptAccess': 'always', // Required to talk to swf
    'allowNetworking': 'all' // All should be default, but having security issues.
  }, params);

  // Create param tags string
  vjs.obj.each(params, function(key, val){
    paramsString += '<param name="'+key+'" value="'+val+'" />';
  });

  attributes = vjs.obj.merge({
    // Add swf to attributes (need both for IE and Others to work)
    'data': swf,

    // Default to 100% width/height
    'width': '100%',
    'height': '100%'

  }, attributes);

  // Create Attributes string
  vjs.obj.each(attributes, function(key, val){
    attrsString += (key + '="' + val + '" ');
  });

  return objTag + attrsString + '>' + paramsString + '</object>';
};

vjs.Flash.streamFromParts = function(connection, stream) {
  return connection + '&' + stream;
};

vjs.Flash.streamToParts = function(src) {
  var parts = {
    connection: '',
    stream: ''
  };

  if (! src) {
    return parts;
  }

  // Look for the normal URL separator we expect, '&'.
  // If found, we split the URL into two pieces around the
  // first '&'.
  var connEnd = src.indexOf('&');
  var streamBegin;
  if (connEnd !== -1) {
    streamBegin = connEnd + 1;
  }
  else {
    // If there's not a '&', we use the last '/' as the delimiter.
    connEnd = streamBegin = src.lastIndexOf('/') + 1;
    if (connEnd === 0) {
      // really, there's not a '/'?
      connEnd = streamBegin = src.length;
    }
  }
  parts.connection = src.substring(0, connEnd);
  parts.stream = src.substring(streamBegin, src.length);

  return parts;
};

vjs.Flash.isStreamingType = function(srcType) {
  return srcType in vjs.Flash.streamingFormats;
};

// RTMP has four variations, any string starting
// with one of these protocols should be valid
vjs.Flash.RTMP_RE = /^rtmp[set]?:\/\//i;

vjs.Flash.isStreamingSrc = function(src) {
  return vjs.Flash.RTMP_RE.test(src);
};
/**
 * @constructor
 */
vjs.MediaLoader = vjs.Component.extend({
  /** @constructor */
  init: function(player, options, ready){
    vjs.Component.call(this, player, options, ready);

    // If there are no sources when the player is initialized,
    // load the first supported playback technology.
    if (!player.options_['sources'] || player.options_['sources'].length === 0) {
      for (var i=0,j=player.options_['techOrder']; i<j.length; i++) {
        var techName = vjs.capitalize(j[i]),
            tech = window['videojs'][techName];

        // Check if the browser supports this technology
        if (tech && tech.isSupported()) {
          player.loadTech(techName);
          break;
        }
      }
    } else {
      // // Loop through playback technologies (HTML5, Flash) and check for support.
      // // Then load the best source.
      // // A few assumptions here:
      // //   All playback technologies respect preload false.
      player.src(player.options_['sources']);
    }
  }
});/**
 * @fileoverview Text Tracks
 * Text tracks are tracks of timed text events.
 * Captions - text displayed over the video for the hearing impared
 * Subtitles - text displayed over the video for those who don't understand langauge in the video
 * Chapters - text displayed in a menu allowing the user to jump to particular points (chapters) in the video
 * Descriptions (not supported yet) - audio descriptions that are read back to the user by a screen reading device
 */

// Player Additions - Functions add to the player object for easier access to tracks

/**
 * List of associated text tracks
 * @type {Array}
 * @private
 */
vjs.Player.prototype.textTracks_;

/**
 * Get an array of associated text tracks. captions, subtitles, chapters, descriptions
 * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
 * @return {Array}           Array of track objects
 */
vjs.Player.prototype.textTracks = function(){
  this.textTracks_ = this.textTracks_ || [];
  return this.textTracks_;
};

/**
 * Add a text track
 * In addition to the W3C settings we allow adding additional info through options.
 * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
 * @param {String}  kind        Captions, subtitles, chapters, descriptions, or metadata
 * @param {String=} label       Optional label
 * @param {String=} language    Optional language
 * @param {Object=} options     Additional track options, like src
 */
vjs.Player.prototype.addTextTrack = function(kind, label, language, options){
  var tracks = this.textTracks_ = this.textTracks_ || [];
  options = options || {};

  options['kind'] = kind;
  options['label'] = label;
  options['language'] = language;

  // HTML5 Spec says default to subtitles.
  // Uppercase first letter to match class names
  var Kind = vjs.capitalize(kind || 'subtitles');

  // Create correct texttrack class. CaptionsTrack, etc.
  var track = new window['videojs'][Kind + 'Track'](this, options);

  tracks.push(track);

  // If track.dflt() is set, start showing immediately
  // TODO: Add a process to deterime the best track to show for the specific kind
  // Incase there are mulitple defaulted tracks of the same kind
  // Or the user has a set preference of a specific language that should override the default
  // if (track.dflt()) {
  //   this.ready(vjs.bind(track, track.show));
  // }

  return track;
};

/**
 * Add an array of text tracks. captions, subtitles, chapters, descriptions
 * Track objects will be stored in the player.textTracks() array
 * @param {Array} trackList Array of track elements or objects (fake track elements)
 */
vjs.Player.prototype.addTextTracks = function(trackList){
  var trackObj;

  for (var i = 0; i < trackList.length; i++) {
    trackObj = trackList[i];
    this.addTextTrack(trackObj['kind'], trackObj['label'], trackObj['language'], trackObj);
  }

  return this;
};

// Show a text track
// disableSameKind: disable all other tracks of the same kind. Value should be a track kind (captions, etc.)
vjs.Player.prototype.showTextTrack = function(id, disableSameKind){
  var tracks = this.textTracks_,
      i = 0,
      j = tracks.length,
      track, showTrack, kind;

  // Find Track with same ID
  for (;i<j;i++) {
    track = tracks[i];
    if (track.id() === id) {
      track.show();
      showTrack = track;

    // Disable tracks of the same kind
    } else if (disableSameKind && track.kind() == disableSameKind && track.mode() > 0) {
      track.disable();
    }
  }

  // Get track kind from shown track or disableSameKind
  kind = (showTrack) ? showTrack.kind() : ((disableSameKind) ? disableSameKind : false);

  // Trigger trackchange event, captionstrackchange, subtitlestrackchange, etc.
  if (kind) {
    this.trigger(kind+'trackchange');
  }

  return this;
};

/**
 * Track Class
 * Contains track methods for loading, showing, parsing cues of tracks
 * @param {vjs.Player|Object} player
 * @param {Object=} options
 * @constructor
 */
vjs.TextTrack = vjs.Component.extend({
  /** @constructor */
  init: function(player, options){
    vjs.Component.call(this, player, options);

    // Apply track info to track object
    // Options will often be a track element

    // Build ID if one doesn't exist
    this.id_ = options['id'] || ('vjs_' + options['kind'] + '_' + options['language'] + '_' + vjs.guid++);
    this.src_ = options['src'];
    // 'default' is a reserved keyword in js so we use an abbreviated version
    this.dflt_ = options['default'] || options['dflt'];
    this.title_ = options['title'];
    this.language_ = options['srclang'];
    this.label_ = options['label'];
    this.cues_ = [];
    this.activeCues_ = [];
    this.readyState_ = 0;
    this.mode_ = 0;

    this.player_.on('fullscreenchange', vjs.bind(this, this.adjustFontSize));
  }
});

/**
 * Track kind value. Captions, subtitles, etc.
 * @private
 */
vjs.TextTrack.prototype.kind_;

/**
 * Get the track kind value
 * @return {String}
 */
vjs.TextTrack.prototype.kind = function(){
  return this.kind_;
};

/**
 * Track src value
 * @private
 */
vjs.TextTrack.prototype.src_;

/**
 * Get the track src value
 * @return {String}
 */
vjs.TextTrack.prototype.src = function(){
  return this.src_;
};

/**
 * Track default value
 * If default is used, subtitles/captions to start showing
 * @private
 */
vjs.TextTrack.prototype.dflt_;

/**
 * Get the track default value
 * 'default' is a reserved keyword
 * @return {Boolean}
 */
vjs.TextTrack.prototype.dflt = function(){
  return this.dflt_;
};

/**
 * Track title value
 * @private
 */
vjs.TextTrack.prototype.title_;

/**
 * Get the track title value
 * @return {String}
 */
vjs.TextTrack.prototype.title = function(){
  return this.title_;
};

/**
 * Language - two letter string to represent track language, e.g. 'en' for English
 * Spec def: readonly attribute DOMString language;
 * @private
 */
vjs.TextTrack.prototype.language_;

/**
 * Get the track language value
 * @return {String}
 */
vjs.TextTrack.prototype.language = function(){
  return this.language_;
};

/**
 * Track label e.g. 'English'
 * Spec def: readonly attribute DOMString label;
 * @private
 */
vjs.TextTrack.prototype.label_;

/**
 * Get the track label value
 * @return {String}
 */
vjs.TextTrack.prototype.label = function(){
  return this.label_;
};

/**
 * All cues of the track. Cues have a startTime, endTime, text, and other properties.
 * Spec def: readonly attribute TextTrackCueList cues;
 * @private
 */
vjs.TextTrack.prototype.cues_;

/**
 * Get the track cues
 * @return {Array}
 */
vjs.TextTrack.prototype.cues = function(){
  return this.cues_;
};

/**
 * ActiveCues is all cues that are currently showing
 * Spec def: readonly attribute TextTrackCueList activeCues;
 * @private
 */
vjs.TextTrack.prototype.activeCues_;

/**
 * Get the track active cues
 * @return {Array}
 */
vjs.TextTrack.prototype.activeCues = function(){
  return this.activeCues_;
};

/**
 * ReadyState describes if the text file has been loaded
 * const unsigned short NONE = 0;
 * const unsigned short LOADING = 1;
 * const unsigned short LOADED = 2;
 * const unsigned short ERROR = 3;
 * readonly attribute unsigned short readyState;
 * @private
 */
vjs.TextTrack.prototype.readyState_;

/**
 * Get the track readyState
 * @return {Number}
 */
vjs.TextTrack.prototype.readyState = function(){
  return this.readyState_;
};

/**
 * Mode describes if the track is showing, hidden, or disabled
 * const unsigned short OFF = 0;
 * const unsigned short HIDDEN = 1; (still triggering cuechange events, but not visible)
 * const unsigned short SHOWING = 2;
 * attribute unsigned short mode;
 * @private
 */
vjs.TextTrack.prototype.mode_;

/**
 * Get the track mode
 * @return {Number}
 */
vjs.TextTrack.prototype.mode = function(){
  return this.mode_;
};

/**
 * Change the font size of the text track to make it larger when playing in fullscreen mode
 * and restore it to its normal size when not in fullscreen mode.
 */
vjs.TextTrack.prototype.adjustFontSize = function(){
    if (this.player_.isFullScreen) {
        // Scale the font by the same factor as increasing the video width to the full screen window width.
        // Additionally, multiply that factor by 1.4, which is the default font size for
        // the caption track (from the CSS)
        this.el_.style.fontSize = screen.width / this.player_.width() * 1.4 * 100 + '%';
    } else {
        // Change the font size of the text track back to its original non-fullscreen size
        this.el_.style.fontSize = '';
    }
};

/**
 * Create basic div to hold cue text
 * @return {Element}
 */
vjs.TextTrack.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-' + this.kind_ + ' vjs-text-track'
  });
};

/**
 * Show: Mode Showing (2)
 * Indicates that the text track is active. If no attempt has yet been made to obtain the track's cues, the user agent will perform such an attempt momentarily.
 * The user agent is maintaining a list of which cues are active, and events are being fired accordingly.
 * In addition, for text tracks whose kind is subtitles or captions, the cues are being displayed over the video as appropriate;
 * for text tracks whose kind is descriptions, the user agent is making the cues available to the user in a non-visual fashion;
 * and for text tracks whose kind is chapters, the user agent is making available to the user a mechanism by which the user can navigate to any point in the media resource by selecting a cue.
 * The showing by default state is used in conjunction with the default attribute on track elements to indicate that the text track was enabled due to that attribute.
 * This allows the user agent to override the state if a later track is discovered that is more appropriate per the user's preferences.
 */
vjs.TextTrack.prototype.show = function(){
  this.activate();

  this.mode_ = 2;

  // Show element.
  vjs.Component.prototype.show.call(this);
};

/**
 * Hide: Mode Hidden (1)
 * Indicates that the text track is active, but that the user agent is not actively displaying the cues.
 * If no attempt has yet been made to obtain the track's cues, the user agent will perform such an attempt momentarily.
 * The user agent is maintaining a list of which cues are active, and events are being fired accordingly.
 */
vjs.TextTrack.prototype.hide = function(){
  // When hidden, cues are still triggered. Disable to stop triggering.
  this.activate();

  this.mode_ = 1;

  // Hide element.
  vjs.Component.prototype.hide.call(this);
};

/**
 * Disable: Mode Off/Disable (0)
 * Indicates that the text track is not active. Other than for the purposes of exposing the track in the DOM, the user agent is ignoring the text track.
 * No cues are active, no events are fired, and the user agent will not attempt to obtain the track's cues.
 */
vjs.TextTrack.prototype.disable = function(){
  // If showing, hide.
  if (this.mode_ == 2) { this.hide(); }

  // Stop triggering cues
  this.deactivate();

  // Switch Mode to Off
  this.mode_ = 0;
};

/**
 * Turn on cue tracking. Tracks that are showing OR hidden are active.
 */
vjs.TextTrack.prototype.activate = function(){
  // Load text file if it hasn't been yet.
  if (this.readyState_ === 0) { this.load(); }

  // Only activate if not already active.
  if (this.mode_ === 0) {
    // Update current cue on timeupdate
    // Using unique ID for bind function so other tracks don't remove listener
    this.player_.on('timeupdate', vjs.bind(this, this.update, this.id_));

    // Reset cue time on media end
    this.player_.on('ended', vjs.bind(this, this.reset, this.id_));

    // Add to display
    if (this.kind_ === 'captions' || this.kind_ === 'subtitles') {
      this.player_.getChild('textTrackDisplay').addChild(this);
    }
  }
};

/**
 * Turn off cue tracking.
 */
vjs.TextTrack.prototype.deactivate = function(){
  // Using unique ID for bind function so other tracks don't remove listener
  this.player_.off('timeupdate', vjs.bind(this, this.update, this.id_));
  this.player_.off('ended', vjs.bind(this, this.reset, this.id_));
  this.reset(); // Reset

  // Remove from display
  this.player_.getChild('textTrackDisplay').removeChild(this);
};

// A readiness state
// One of the following:
//
// Not loaded
// Indicates that the text track is known to exist (e.g. it has been declared with a track element), but its cues have not been obtained.
//
// Loading
// Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track.
//
// Loaded
// Indicates that the text track has been loaded with no fatal errors. No new cues will be added to the track except if the text track corresponds to a MutableTextTrack object.
//
// Failed to load
// Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way (e.g. URL could not be resolved, network error, unknown text track format). Some or all of the cues are likely missing and will not be obtained.
vjs.TextTrack.prototype.load = function(){

  // Only load if not loaded yet.
  if (this.readyState_ === 0) {
    this.readyState_ = 1;
    vjs.get(this.src_, vjs.bind(this, this.parseCues), vjs.bind(this, this.onError));
  }

};

vjs.TextTrack.prototype.onError = function(err){
  this.error = err;
  this.readyState_ = 3;
  this.trigger('error');
};

// Parse the WebVTT text format for cue times.
// TODO: Separate parser into own class so alternative timed text formats can be used. (TTML, DFXP)
vjs.TextTrack.prototype.parseCues = function(srcContent) {
  var cue, time, text,
      lines = srcContent.split('\n'),
      line = '', id;

  for (var i=1, j=lines.length; i<j; i++) {
    // Line 0 should be 'WEBVTT', so skipping i=0

    line = vjs.trim(lines[i]); // Trim whitespace and linebreaks

    if (line) { // Loop until a line with content

      // First line could be an optional cue ID
      // Check if line has the time separator
      if (line.indexOf('-->') == -1) {
        id = line;
        // Advance to next line for timing.
        line = vjs.trim(lines[++i]);
      } else {
        id = this.cues_.length;
      }

      // First line - Number
      cue = {
        id: id, // Cue Number
        index: this.cues_.length // Position in Array
      };

      // Timing line
      time = line.split(' --> ');
      cue.startTime = this.parseCueTime(time[0]);
      cue.endTime = this.parseCueTime(time[1]);

      // Additional lines - Cue Text
      text = [];

      // Loop until a blank line or end of lines
      // Assumeing trim('') returns false for blank lines
      while (lines[++i] && (line = vjs.trim(lines[i]))) {
        text.push(line);
      }

      cue.text = text.join('<br/>');

      // Add this cue
      this.cues_.push(cue);
    }
  }

  this.readyState_ = 2;
  this.trigger('loaded');
};


vjs.TextTrack.prototype.parseCueTime = function(timeText) {
  var parts = timeText.split(':'),
      time = 0,
      hours, minutes, other, seconds, ms;

  // Check if optional hours place is included
  // 00:00:00.000 vs. 00:00.000
  if (parts.length == 3) {
    hours = parts[0];
    minutes = parts[1];
    other = parts[2];
  } else {
    hours = 0;
    minutes = parts[0];
    other = parts[1];
  }

  // Break other (seconds, milliseconds, and flags) by spaces
  // TODO: Make additional cue layout settings work with flags
  other = other.split(/\s+/);
  // Remove seconds. Seconds is the first part before any spaces.
  seconds = other.splice(0,1)[0];
  // Could use either . or , for decimal
  seconds = seconds.split(/\.|,/);
  // Get milliseconds
  ms = parseFloat(seconds[1]);
  seconds = seconds[0];

  // hours => seconds
  time += parseFloat(hours) * 3600;
  // minutes => seconds
  time += parseFloat(minutes) * 60;
  // Add seconds
  time += parseFloat(seconds);
  // Add milliseconds
  if (ms) { time += ms/1000; }

  return time;
};

// Update active cues whenever timeupdate events are triggered on the player.
vjs.TextTrack.prototype.update = function(){
  if (this.cues_.length > 0) {

    // Get curent player time
    var time = this.player_.currentTime();

    // Check if the new time is outside the time box created by the the last update.
    if (this.prevChange === undefined || time < this.prevChange || this.nextChange <= time) {
      var cues = this.cues_,

          // Create a new time box for this state.
          newNextChange = this.player_.duration(), // Start at beginning of the timeline
          newPrevChange = 0, // Start at end

          reverse = false, // Set the direction of the loop through the cues. Optimized the cue check.
          newCues = [], // Store new active cues.

          // Store where in the loop the current active cues are, to provide a smart starting point for the next loop.
          firstActiveIndex, lastActiveIndex,
          cue, i; // Loop vars

      // Check if time is going forwards or backwards (scrubbing/rewinding)
      // If we know the direction we can optimize the starting position and direction of the loop through the cues array.
      if (time >= this.nextChange || this.nextChange === undefined) { // NextChange should happen
        // Forwards, so start at the index of the first active cue and loop forward
        i = (this.firstActiveIndex !== undefined) ? this.firstActiveIndex : 0;
      } else {
        // Backwards, so start at the index of the last active cue and loop backward
        reverse = true;
        i = (this.lastActiveIndex !== undefined) ? this.lastActiveIndex : cues.length - 1;
      }

      while (true) { // Loop until broken
        cue = cues[i];

        // Cue ended at this point
        if (cue.endTime <= time) {
          newPrevChange = Math.max(newPrevChange, cue.endTime);

          if (cue.active) {
            cue.active = false;
          }

          // No earlier cues should have an active start time.
          // Nevermind. Assume first cue could have a duration the same as the video.
          // In that case we need to loop all the way back to the beginning.
          // if (reverse && cue.startTime) { break; }

        // Cue hasn't started
        } else if (time < cue.startTime) {
          newNextChange = Math.min(newNextChange, cue.startTime);

          if (cue.active) {
            cue.active = false;
          }

          // No later cues should have an active start time.
          if (!reverse) { break; }

        // Cue is current
        } else {

          if (reverse) {
            // Add cue to front of array to keep in time order
            newCues.splice(0,0,cue);

            // If in reverse, the first current cue is our lastActiveCue
            if (lastActiveIndex === undefined) { lastActiveIndex = i; }
            firstActiveIndex = i;
          } else {
            // Add cue to end of array
            newCues.push(cue);

            // If forward, the first current cue is our firstActiveIndex
            if (firstActiveIndex === undefined) { firstActiveIndex = i; }
            lastActiveIndex = i;
          }

          newNextChange = Math.min(newNextChange, cue.endTime);
          newPrevChange = Math.max(newPrevChange, cue.startTime);

          cue.active = true;
        }

        if (reverse) {
          // Reverse down the array of cues, break if at first
          if (i === 0) { break; } else { i--; }
        } else {
          // Walk up the array fo cues, break if at last
          if (i === cues.length - 1) { break; } else { i++; }
        }

      }

      this.activeCues_ = newCues;
      this.nextChange = newNextChange;
      this.prevChange = newPrevChange;
      this.firstActiveIndex = firstActiveIndex;
      this.lastActiveIndex = lastActiveIndex;

      this.updateDisplay();

      this.trigger('cuechange');
    }
  }
};

// Add cue HTML to display
vjs.TextTrack.prototype.updateDisplay = function(){
  var cues = this.activeCues_,
      html = '',
      i=0,j=cues.length;

  for (;i<j;i++) {
    html += '<span class="vjs-tt-cue">'+cues[i].text+'</span>';
  }

  this.el_.innerHTML = html;
};

// Set all loop helper values back
vjs.TextTrack.prototype.reset = function(){
  this.nextChange = 0;
  this.prevChange = this.player_.duration();
  this.firstActiveIndex = 0;
  this.lastActiveIndex = 0;
};

// Create specific track types
/**
 * @constructor
 */
vjs.CaptionsTrack = vjs.TextTrack.extend();
vjs.CaptionsTrack.prototype.kind_ = 'captions';
// Exporting here because Track creation requires the track kind
// to be available on global object. e.g. new window['videojs'][Kind + 'Track']

/**
 * @constructor
 */
vjs.SubtitlesTrack = vjs.TextTrack.extend();
vjs.SubtitlesTrack.prototype.kind_ = 'subtitles';

/**
 * @constructor
 */
vjs.ChaptersTrack = vjs.TextTrack.extend();
vjs.ChaptersTrack.prototype.kind_ = 'chapters';


/* Text Track Display
============================================================================= */
// Global container for both subtitle and captions text. Simple div container.

/**
 * @constructor
 */
vjs.TextTrackDisplay = vjs.Component.extend({
  /** @constructor */
  init: function(player, options, ready){
    vjs.Component.call(this, player, options, ready);

    // This used to be called during player init, but was causing an error
    // if a track should show by default and the display hadn't loaded yet.
    // Should probably be moved to an external track loader when we support
    // tracks that don't need a display.
    if (player.options_['tracks'] && player.options_['tracks'].length > 0) {
      this.player_.addTextTracks(player.options_['tracks']);
    }
  }
});

vjs.TextTrackDisplay.prototype.createEl = function(){
  return vjs.Component.prototype.createEl.call(this, 'div', {
    className: 'vjs-text-track-display'
  });
};


/* Text Track Menu Items
============================================================================= */
/**
 * @constructor
 */
vjs.TextTrackMenuItem = vjs.MenuItem.extend({
  /** @constructor */
  init: function(player, options){
    var track = this.track = options['track'];

    // Modify options for parent MenuItem class's init.
    options['label'] = track.label();
    options['selected'] = track.dflt();
    vjs.MenuItem.call(this, player, options);

    this.player_.on(track.kind() + 'trackchange', vjs.bind(this, this.update));
  }
});

vjs.TextTrackMenuItem.prototype.onClick = function(){
  vjs.MenuItem.prototype.onClick.call(this);
  this.player_.showTextTrack(this.track.id_, this.track.kind());
};

vjs.TextTrackMenuItem.prototype.update = function(){
  this.selected(this.track.mode() == 2);
};

/**
 * @constructor
 */
vjs.OffTextTrackMenuItem = vjs.TextTrackMenuItem.extend({
  /** @constructor */
  init: function(player, options){
    // Create pseudo track info
    // Requires options['kind']
    options['track'] = {
      kind: function() { return options['kind']; },
      player: player,
      label: function(){ return options['kind'] + ' off'; },
      dflt: function(){ return false; },
      mode: function(){ return false; }
    };
    vjs.TextTrackMenuItem.call(this, player, options);
    this.selected(true);
  }
});

vjs.OffTextTrackMenuItem.prototype.onClick = function(){
  vjs.TextTrackMenuItem.prototype.onClick.call(this);
  this.player_.showTextTrack(this.track.id_, this.track.kind());
};

vjs.OffTextTrackMenuItem.prototype.update = function(){
  var tracks = this.player_.textTracks(),
      i=0, j=tracks.length, track,
      off = true;

  for (;i<j;i++) {
    track = tracks[i];
    if (track.kind() == this.track.kind() && track.mode() == 2) {
      off = false;
    }
  }

  this.selected(off);
};

/* Captions Button
================================================================================ */
/**
 * @constructor
 */
vjs.TextTrackButton = vjs.MenuButton.extend({
  /** @constructor */
  init: function(player, options){
    vjs.MenuButton.call(this, player, options);

    if (this.items.length <= 1) {
      this.hide();
    }
  }
});

// vjs.TextTrackButton.prototype.buttonPressed = false;

// vjs.TextTrackButton.prototype.createMenu = function(){
//   var menu = new vjs.Menu(this.player_);

//   // Add a title list item to the top
//   // menu.el().appendChild(vjs.createEl('li', {
//   //   className: 'vjs-menu-title',
//   //   innerHTML: vjs.capitalize(this.kind_),
//   //   tabindex: -1
//   // }));

//   this.items = this.createItems();

//   // Add menu items to the menu
//   for (var i = 0; i < this.items.length; i++) {
//     menu.addItem(this.items[i]);
//   }

//   // Add list to element
//   this.addChild(menu);

//   return menu;
// };

// Create a menu item for each text track
vjs.TextTrackButton.prototype.createItems = function(){
  var items = [], track;

  // Add an OFF menu item to turn all tracks off
  items.push(new vjs.OffTextTrackMenuItem(this.player_, { 'kind': this.kind_ }));

  for (var i = 0; i < this.player_.textTracks().length; i++) {
    track = this.player_.textTracks()[i];
    if (track.kind() === this.kind_) {
      items.push(new vjs.TextTrackMenuItem(this.player_, {
        'track': track
      }));
    }
  }

  return items;
};

/**
 * @constructor
 */
vjs.CaptionsButton = vjs.TextTrackButton.extend({
  /** @constructor */
  init: function(player, options, ready){
    vjs.TextTrackButton.call(this, player, options, ready);
    this.el_.setAttribute('aria-label','Captions Menu');
  }
});
vjs.CaptionsButton.prototype.kind_ = 'captions';
vjs.CaptionsButton.prototype.buttonText = 'Captions';
vjs.CaptionsButton.prototype.className = 'vjs-captions-button';

/**
 * @constructor
 */
vjs.SubtitlesButton = vjs.TextTrackButton.extend({
  /** @constructor */
  init: function(player, options, ready){
    vjs.TextTrackButton.call(this, player, options, ready);
    this.el_.setAttribute('aria-label','Subtitles Menu');
  }
});
vjs.SubtitlesButton.prototype.kind_ = 'subtitles';
vjs.SubtitlesButton.prototype.buttonText = 'Subtitles';
vjs.SubtitlesButton.prototype.className = 'vjs-subtitles-button';

// Chapters act much differently than other text tracks
// Cues are navigation vs. other tracks of alternative languages
/**
 * @constructor
 */
vjs.ChaptersButton = vjs.TextTrackButton.extend({
  /** @constructor */
  init: function(player, options, ready){
    vjs.TextTrackButton.call(this, player, options, ready);
    this.el_.setAttribute('aria-label','Chapters Menu');
  }
});
vjs.ChaptersButton.prototype.kind_ = 'chapters';
vjs.ChaptersButton.prototype.buttonText = 'Chapters';
vjs.ChaptersButton.prototype.className = 'vjs-chapters-button';

// Create a menu item for each text track
vjs.ChaptersButton.prototype.createItems = function(){
  var items = [], track;

  for (var i = 0; i < this.player_.textTracks().length; i++) {
    track = this.player_.textTracks()[i];
    if (track.kind() === this.kind_) {
      items.push(new vjs.TextTrackMenuItem(this.player_, {
        'track': track
      }));
    }
  }

  return items;
};

vjs.ChaptersButton.prototype.createMenu = function(){
  var tracks = this.player_.textTracks(),
      i = 0,
      j = tracks.length,
      track, chaptersTrack,
      items = this.items = [];

  for (;i<j;i++) {
    track = tracks[i];
    if (track.kind() == this.kind_ && track.dflt()) {
      if (track.readyState() < 2) {
        this.chaptersTrack = track;
        track.on('loaded', vjs.bind(this, this.createMenu));
        return;
      } else {
        chaptersTrack = track;
        break;
      }
    }
  }

  var menu = this.menu = new vjs.Menu(this.player_);

  menu.el_.appendChild(vjs.createEl('li', {
    className: 'vjs-menu-title',
    innerHTML: vjs.capitalize(this.kind_),
    tabindex: -1
  }));

  if (chaptersTrack) {
    var cues = chaptersTrack.cues_, cue, mi;
    i = 0;
    j = cues.length;

    for (;i<j;i++) {
      cue = cues[i];

      mi = new vjs.ChaptersTrackMenuItem(this.player_, {
        'track': chaptersTrack,
        'cue': cue
      });

      items.push(mi);

      menu.addChild(mi);
    }
  }

  if (this.items.length > 0) {
    this.show();
  }

  return menu;
};


/**
 * @constructor
 */
vjs.ChaptersTrackMenuItem = vjs.MenuItem.extend({
  /** @constructor */
  init: function(player, options){
    var track = this.track = options['track'],
        cue = this.cue = options['cue'],
        currentTime = player.currentTime();

    // Modify options for parent MenuItem class's init.
    options['label'] = cue.text;
    options['selected'] = (cue.startTime <= currentTime && currentTime < cue.endTime);
    vjs.MenuItem.call(this, player, options);

    track.on('cuechange', vjs.bind(this, this.update));
  }
});

vjs.ChaptersTrackMenuItem.prototype.onClick = function(){
  vjs.MenuItem.prototype.onClick.call(this);
  this.player_.currentTime(this.cue.startTime);
  this.update(this.cue.startTime);
};

vjs.ChaptersTrackMenuItem.prototype.update = function(){
  var cue = this.cue,
      currentTime = this.player_.currentTime();

  // vjs.log(currentTime, cue.startTime);
  this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
};

// Add Buttons to controlBar
vjs.obj.merge(vjs.ControlBar.prototype.options_['children'], {
  'subtitlesButton': {},
  'captionsButton': {},
  'chaptersButton': {}
});

// vjs.Cue = vjs.Component.extend({
//   /** @constructor */
//   init: function(player, options){
//     vjs.Component.call(this, player, options);
//   }
// });
/**
 * @fileoverview Add JSON support
 * @suppress {undefinedVars}
 * (Compiler doesn't like JSON not being declared)
 */

/**
 * Javascript JSON implementation
 * (Parse Method Only)
 * https://github.com/douglascrockford/JSON-js/blob/master/json2.js
 * Only using for parse method when parsing data-setup attribute JSON.
 * @type {Object}
 * @suppress {undefinedVars}
 */
vjs.JSON;

/**
 * @suppress {undefinedVars}
 */
if (typeof window.JSON !== 'undefined' && window.JSON.parse === 'function') {
  vjs.JSON = window.JSON;

} else {
  vjs.JSON = {};

  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

  vjs.JSON.parse = function (text, reviver) {
      var j;

      function walk(holder, key) {
          var k, v, value = holder[key];
          if (value && typeof value === 'object') {
              for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                      v = walk(value, k);
                      if (v !== undefined) {
                          value[k] = v;
                      } else {
                          delete value[k];
                      }
                  }
              }
          }
          return reviver.call(holder, key, value);
      }
      text = String(text);
      cx.lastIndex = 0;
      if (cx.test(text)) {
          text = text.replace(cx, function (a) {
              return '\\u' +
                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          });
      }

      if (/^[\],:{}\s]*$/
              .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                  .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                  .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

          j = eval('(' + text + ')');

          return typeof reviver === 'function' ?
              walk({'': j}, '') : j;
      }

      throw new SyntaxError('JSON.parse(): invalid or malformed JSON data');
  };
}
/**
 * @fileoverview Functions for automatically setting up a player
 * based on the data-setup attribute of the video tag
 */

// Automatically set up any tags that have a data-setup attribute
vjs.autoSetup = function(){
  var options, vid, player,
      vids = document.getElementsByTagName('video');

  // Check if any media elements exist
  if (vids && vids.length > 0) {

    for (var i=0,j=vids.length; i<j; i++) {
      vid = vids[i];

      // Check if element exists, has getAttribute func.
      // IE seems to consider typeof el.getAttribute == 'object' instead of 'function' like expected, at least when loading the player immediately.
      if (vid && vid.getAttribute) {

        // Make sure this player hasn't already been set up.
        if (vid['player'] === undefined) {
          options = vid.getAttribute('data-setup');

          // Check if data-setup attr exists.
          // We only auto-setup if they've added the data-setup attr.
          if (options !== null) {

            // Parse options JSON
            // If empty string, make it a parsable json object.
            options = vjs.JSON.parse(options || '{}');

            // Create new video.js instance.
            player = videojs(vid, options);
          }
        }

      // If getAttribute isn't defined, we need to wait for the DOM.
      } else {
        vjs.autoSetupTimeout(1);
        break;
      }
    }

  // No videos were found, so keep looping unless page is finisehd loading.
  } else if (!vjs.windowLoaded) {
    vjs.autoSetupTimeout(1);
  }
};

// Pause to let the DOM keep processing
vjs.autoSetupTimeout = function(wait){
  setTimeout(vjs.autoSetup, wait);
};

if (document.readyState === 'complete') {
  vjs.windowLoaded = true;
} else {
  vjs.one(window, 'load', function(){
    vjs.windowLoaded = true;
  });
}

// Run Auto-load players
// You have to wait at least once in case this script is loaded after your video in the DOM (weird behavior only with minified version)
vjs.autoSetupTimeout(1);
vjs.plugin = function(name, init){
  vjs.Player.prototype[name] = init;
};
(function(root) {

  root.App = root.App || {};

  root.App.namespace = function(name, block, base) {

    if (typeof block != 'function' && base == undefined) base = block;

    var results,
        base    = base || root.App,
        matcher = /[^\.]+/g;

    while ((results = matcher.exec(name)) != null) {
      base = base[results[0]] || (base[results[0]] = {});
    }

    if (typeof block == 'function') block(base);

    return base;
  }

 })(window);
/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */

(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );
/**
 * Copyright (c) 2005 - 2010, James Auldridge
 * All rights reserved.
 *
 * Licensed under the BSD, MIT, and GPL (your choice!) Licenses:
 *  http://code.google.com/p/cookies/wiki/License
 *
 */

var jaaulde = window.jaaulde || {};
jaaulde.utils = jaaulde.utils || {};
jaaulde.utils.cookies = ( function()
{
	var resolveOptions, assembleOptionsString, parseCookies, constructor, defaultOptions = {
		expiresAt: null,
		path: '/',
		domain:  null,
		secure: false
	};
	/**
	* resolveOptions - receive an options object and ensure all options are present and valid, replacing with defaults where necessary
	*
	* @access private
	* @static
	* @parameter Object options - optional options to start with
	* @return Object complete and valid options object
	*/
	resolveOptions = function( options )
	{
		var returnValue, expireDate;

		if( typeof options !== 'object' || options === null )
		{
			returnValue = defaultOptions;
		}
		else
		{
			returnValue = {
				expiresAt: defaultOptions.expiresAt,
				path: defaultOptions.path,
				domain: defaultOptions.domain,
				secure: defaultOptions.secure
			};

			if( typeof options.expiresAt === 'object' && options.expiresAt instanceof Date )
			{
				returnValue.expiresAt = options.expiresAt;
			}
			else if( typeof options.hoursToLive === 'number' && options.hoursToLive !== 0 )
			{
				expireDate = new Date();
				expireDate.setTime( expireDate.getTime() + ( options.hoursToLive * 60 * 60 * 1000 ) );
				returnValue.expiresAt = expireDate;
			}

			if( typeof options.path === 'string' && options.path !== '' )
			{
				returnValue.path = options.path;
			}

			if( typeof options.domain === 'string' && options.domain !== '' )
			{
				returnValue.domain = options.domain;
			}

			if( options.secure === true )
			{
				returnValue.secure = options.secure;
			}
		}

		return returnValue;
		};
	/**
	* assembleOptionsString - analyze options and assemble appropriate string for setting a cookie with those options
	*
	* @access private
	* @static
	* @parameter options OBJECT - optional options to start with
	* @return STRING - complete and valid cookie setting options
	*/
	assembleOptionsString = function( options )
	{
		options = resolveOptions( options );

		return (
			( typeof options.expiresAt === 'object' && options.expiresAt instanceof Date ? '; expires=' + options.expiresAt.toGMTString() : '' ) +
			'; path=' + options.path +
			( typeof options.domain === 'string' ? '; domain=' + options.domain : '' ) +
			( options.secure === true ? '; secure' : '' )
		);
	};
	/**
	* parseCookies - retrieve document.cookie string and break it into a hash with values decoded and unserialized
	*
	* @access private
	* @static
	* @return OBJECT - hash of cookies from document.cookie
	*/
	parseCookies = function()
	{
		var cookies = {}, i, pair, name, value, separated = document.cookie.split( ';' ), unparsedValue;
		for( i = 0; i < separated.length; i = i + 1 )
		{
			pair = separated[i].split( '=' );
			name = pair[0].replace( /^\s*/, '' ).replace( /\s*$/, '' );

			try
			{
				value = decodeURIComponent( pair[1] );
			}
			catch( e1 )
			{
				value = pair[1];
			}

			if( typeof JSON === 'object' && JSON !== null && typeof JSON.parse === 'function' )
			{
				try
				{
					unparsedValue = value;
					value = JSON.parse( value );
				}
				catch( e2 )
				{
					value = unparsedValue;
				}
			}

			cookies[name] = value;
		}
		return cookies;
	};

	constructor = function(){};

	/**
	 * get - get one, several, or all cookies
	 *
	 * @access public
	 * @paramater Mixed cookieName - String:name of single cookie; Array:list of multiple cookie names; Void (no param):if you want all cookies
	 * @return Mixed - Value of cookie as set; Null:if only one cookie is requested and is not found; Object:hash of multiple or all cookies (if multiple or all requested);
	 */
	constructor.prototype.get = function( cookieName )
	{
		var returnValue, item, cookies = parseCookies();

		if( typeof cookieName === 'string' )
		{
			returnValue = ( typeof cookies[cookieName] !== 'undefined' ) ? cookies[cookieName] : null;
		}
		else if( typeof cookieName === 'object' && cookieName !== null )
		{
			returnValue = {};
			for( item in cookieName )
			{
				if( typeof cookies[cookieName[item]] !== 'undefined' )
				{
					returnValue[cookieName[item]] = cookies[cookieName[item]];
				}
				else
				{
					returnValue[cookieName[item]] = null;
				}
			}
		}
		else
		{
			returnValue = cookies;
		}

		return returnValue;
	};
	/**
	 * filter - get array of cookies whose names match the provided RegExp
	 *
	 * @access public
	 * @paramater Object RegExp - The regular expression to match against cookie names
	 * @return Mixed - Object:hash of cookies whose names match the RegExp
	 */
	constructor.prototype.filter = function( cookieNameRegExp )
	{
		var cookieName, returnValue = {}, cookies = parseCookies();

		if( typeof cookieNameRegExp === 'string' )
		{
			cookieNameRegExp = new RegExp( cookieNameRegExp );
		}

		for( cookieName in cookies )
		{
			if( cookieName.match( cookieNameRegExp ) )
			{
				returnValue[cookieName] = cookies[cookieName];
			}
		}

		return returnValue;
	};
	/**
	 * set - set or delete a cookie with desired options
	 *
	 * @access public
	 * @paramater String cookieName - name of cookie to set
	 * @paramater Mixed value - Any JS value. If not a string, will be JSON encoded; NULL to delete
	 * @paramater Object options - optional list of cookie options to specify
	 * @return void
	 */
	constructor.prototype.set = function( cookieName, value, options )
	{
		if( typeof options !== 'object' || options === null )
		{
			options = {};
		}

		if( typeof value === 'undefined' || value === null )
		{
			value = '';
			options.hoursToLive = -8760;
		}

		else if( typeof value !== 'string' )
		{
			if( typeof JSON === 'object' && JSON !== null && typeof JSON.stringify === 'function' )
			{
				value = JSON.stringify( value );
			}
			else
			{
				throw new Error( 'cookies.set() received non-string value and could not serialize.' );
			}
		}


		var optionsString = assembleOptionsString( options );

		document.cookie = cookieName + '=' + encodeURIComponent( value ) + optionsString;
	};
	/**
	 * del - delete a cookie (domain and path options must match those with which the cookie was set; this is really an alias for set() with parameters simplified for this use)
	 *
	 * @access public
	 * @paramater MIxed cookieName - String name of cookie to delete, or Bool true to delete all
	 * @paramater Object options - optional list of cookie options to specify ( path, domain )
	 * @return void
	 */
	constructor.prototype.del = function( cookieName, options )
	{
		var allCookies = {}, name;

		if( typeof options !== 'object' || options === null )
		{
			options = {};
		}

		if( typeof cookieName === 'boolean' && cookieName === true )
		{
			allCookies = this.get();
		}
		else if( typeof cookieName === 'string' )
		{
			allCookies[cookieName] = true;
		}

		for( name in allCookies )
		{
			if( typeof name === 'string' && name !== '' )
			{
				this.set( name, null, options );
			}
		}
	};
	/**
	 * test - test whether the browser is accepting cookies
	 *
	 * @access public
	 * @return Boolean
	 */
	constructor.prototype.test = function()
	{
		var returnValue = false, testName = 'cT', testValue = 'data';

		this.set( testName, testValue );

		if( this.get( testName ) === testValue )
		{
			this.del( testName );
			returnValue = true;
		}

		return returnValue;
	};
	/**
	 * setOptions - set default options for calls to cookie methods
	 *
	 * @access public
	 * @param Object options - list of cookie options to specify
	 * @return void
	 */
	constructor.prototype.setOptions = function( options )
	{
		if( typeof options !== 'object' )
		{
			options = null;
		}

		defaultOptions = resolveOptions( options );
	};

	return new constructor();
} )();

( function()
{
	if( window.jQuery )
	{
		( function( $ )
		{
			$.cookies = jaaulde.utils.cookies;

			var extensions = {
				/**
				* $( 'selector' ).cookify - set the value of an input field, or the innerHTML of an element, to a cookie by the name or id of the field or element
				*                           (field or element MUST have name or id attribute)
				*
				* @access public
				* @param options OBJECT - list of cookie options to specify
				* @return jQuery
				*/
				cookify: function( options )
				{
					return this.each( function()
					{
						var i, nameAttrs = ['name', 'id'], name, $this = $( this ), value;

						for( i in nameAttrs )
						{
							if( ! isNaN( i ) )
							{
								name = $this.attr( nameAttrs[ i ] );
								if( typeof name === 'string' && name !== '' )
								{
									if( $this.is( ':checkbox, :radio' ) )
									{
										if( $this.attr( 'checked' ) )
										{
											value = $this.val();
										}
									}
									else if( $this.is( ':input' ) )
									{
										value = $this.val();
									}
									else
									{
										value = $this.html();
									}

									if( typeof value !== 'string' || value === '' )
									{
										value = null;
									}

									$.cookies.set( name, value, options );

									break;
								}
							}
						}
					} );
				},
				/**
				* $( 'selector' ).cookieFill - set the value of an input field or the innerHTML of an element from a cookie by the name or id of the field or element
				*
				* @access public
				* @return jQuery
				*/
				cookieFill: function()
				{
					return this.each( function()
					{
						var n, getN, nameAttrs = ['name', 'id'], name, $this = $( this ), value;

						getN = function()
						{
							n = nameAttrs.pop();
							return !! n;
						};

						while( getN() )
						{
							name = $this.attr( n );
							if( typeof name === 'string' && name !== '' )
							{
								value = $.cookies.get( name );
								if( value !== null )
								{
									if( $this.is( ':checkbox, :radio' ) )
									{
										if( $this.val() === value )
										{
											$this.attr( 'checked', 'checked' );
										}
										else
										{
											$this.removeAttr( 'checked' );
										}
									}
									else if( $this.is( ':input' ) )
									{
										$this.val( value );
									}
									else
									{
										$this.html( value );
									}
								}
								
								break;
							}
						}
					} );
				},
				/**
				* $( 'selector' ).cookieBind - call cookie fill on matching elements, and bind their change events to cookify()
				*
				* @access public
				* @param options OBJECT - list of cookie options to specify
				* @return jQuery
				*/
				cookieBind: function( options )
				{
					return this.each( function()
					{
						var $this = $( this );
						$this.cookieFill().change( function()
						{
							$this.cookify( options );
						} );
					} );
				}
			};

			$.each( extensions, function( i )
			{
				$.fn[i] = this;
			} );

		} )( window.jQuery );
	}
} )();
/*
 * https://gist.github.com/1247442
 */


jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend(jQuery.easing, {
    eightyTwentyLinear: function(x, t, b, c, d) {
        return ((b + c) - (b + c) * 0.8) * (t /= d) + (b + c) * 0.8;
    },
    eightyTwentyQuartOut: function(x, t, b, c, d) {
        return -((b + c) - (b + c) * 0.8) * (t /= d) * (t - 2) + (b + c) * 0.8;
    },
    easeInOutQuart: function (x, t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
          return -c/2 * ((t-=2)*t*t*t - 2) + b;
    }
});
(function($) {

  $.debounce = function(callback, delay) {
    var timeout;
    return function() {
      var self = this, args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        timeout = null;
        callback.apply(self, args);
      }, delay);
    };
  };

  $.debounceScroll = function(callback, delay) {
    var timeout;
    return function() {
      var self = this, args = arguments;
      
      if (timeout) {
        return;
      }

      timeout = setTimeout(function() {
        clearTimeout(timeout);
        timeout = null;
        callback.apply(self, args);
      }, delay);
    };
  };
  
  $.delay =  function(func, wait) {
    var self = this, args = Array.prototype.slice.call(arguments, 2), whenDone = [];
    
    setTimeout(function(){ 
      func.apply(self, args);
      for(var i = 0; i < whenDone.length; i++) {
        whenDone[i](); 
      } 
      whenDone = [];
    }, wait);
    
    return {
      done: function (run_when_done) {
        whenDone.push(run_when_done);
      }
    }

  };
  
})(jQuery);
/**
 * @preserve jquery.fullscreen 1.1.5
 * https://github.com/kayahr/jquery-fullscreen-plugin
 * Copyright (C) 2012-2013 Klaus Reimer <k@ailis.de>
 * Licensed under the MIT license
 * (See http://www.opensource.org/licenses/mit-license)
 */

 
(function() {

/**
 * Sets or gets the fullscreen state.
 * 
 * @param {boolean=} state
 *            True to enable fullscreen mode, false to disable it. If not
 *            specified then the current fullscreen state is returned.
 * @return {boolean|Element|jQuery|null}
 *            When querying the fullscreen state then the current fullscreen
 *            element (or true if browser doesn't support it) is returned
 *            when browser is currently in full screen mode. False is returned
 *            if browser is not in full screen mode. Null is returned if 
 *            browser doesn't support fullscreen mode at all. When setting 
 *            the fullscreen state then the current jQuery selection is 
 *            returned for chaining.
 * @this {jQuery}
 */
function fullScreen(state)
{
    var e, func, doc;
    
    // Do nothing when nothing was selected
    if (!this.length) return this;
    
    // We only use the first selected element because it doesn't make sense
    // to fullscreen multiple elements.
    e = (/** @type {Element} */ this[0]);
    
    // Find the real element and the document (Depends on whether the
    // document itself or a HTML element was selected)
    if (e.ownerDocument)
    {
        doc = e.ownerDocument;
    }
    else
    {
        doc = e;
        e = doc.documentElement;
    }
    
    // When no state was specified then return the current state.
    if (state == null)
    {
        // When fullscreen mode is not supported then return null
        if (!((/** @type {?Function} */ doc["exitFullscreen"])
            || (/** @type {?Function} */ doc["webkitExitFullscreen"])
            || (/** @type {?Function} */ doc["webkitCancelFullScreen"])
            || (/** @type {?Function} */ doc["msExitFullscreen"])
            || (/** @type {?Function} */ doc["mozCancelFullScreen"])))
        {
            return null;
        }
        
        // Check fullscreen state
        state = !!doc["fullscreenElement"]
            || !!doc["msFullscreenElement"]
            || !!doc["webkitIsFullScreen"]
            || !!doc["mozFullScreen"];
        if (!state) return state;
        
        // Return current fullscreen element or "true" if browser doesn't
        // support this
        return (/** @type {?Element} */ doc["fullscreenElement"])
            || (/** @type {?Element} */ doc["webkitFullscreenElement"])
            || (/** @type {?Element} */ doc["webkitCurrentFullScreenElement"])
            || (/** @type {?Element} */ doc["msFullscreenElement"])
            || (/** @type {?Element} */ doc["mozFullScreenElement"])
            || state;
    }
    
    // When state was specified then enter or exit fullscreen mode.
    if (state)
    {
        // Enter fullscreen
        func = (/** @type {?Function} */ e["requestFullscreen"])
            || (/** @type {?Function} */ e["webkitRequestFullscreen"])
            || (/** @type {?Function} */ e["webkitRequestFullScreen"])
            || (/** @type {?Function} */ e["msRequestFullscreen"])
            || (/** @type {?Function} */ e["mozRequestFullScreen"]);
        if (func) 
        {
            func.call(e);
        }
        return this;
    }
    else
    {
        // Exit fullscreen
        func = (/** @type {?Function} */ doc["exitFullscreen"])
            || (/** @type {?Function} */ doc["webkitExitFullscreen"])
            || (/** @type {?Function} */ doc["webkitCancelFullScreen"])
            || (/** @type {?Function} */ doc["msExitFullscreen"])
            || (/** @type {?Function} */ doc["mozCancelFullScreen"]);
        if (func) func.call(doc);
        return this;
    }
}

/**
 * Toggles the fullscreen mode.
 * 
 * @return {!jQuery}
 *            The jQuery selection for chaining.
 * @this {jQuery}
 */
function toggleFullScreen()
{
    return (/** @type {!jQuery} */ fullScreen.call(this, 
        !fullScreen.call(this)));
}

/**
 * Handles the browser-specific fullscreenchange event and triggers
 * a jquery event for it.
 *
 * @param {?Event} event
 *            The fullscreenchange event.
 */
function fullScreenChangeHandler(event)
{
    jQuery(document).trigger(new jQuery.Event("fullscreenchange"));
}

/**
 * Handles the browser-specific fullscreenerror event and triggers
 * a jquery event for it.
 *
 * @param {?Event} event
 *            The fullscreenerror event.
 */
function fullScreenErrorHandler(event)
{
    jQuery(document).trigger(new jQuery.Event("fullscreenerror"));
}

/**
 * Installs the fullscreenchange event handler.
 */
function installFullScreenHandlers()
{
    var e, change, error;
    
    // Determine event name
    e = document;
    if (e["webkitCancelFullScreen"])
    {
        change = "webkitfullscreenchange";
        error = "webkitfullscreenerror";
    }
    else if (e["msExitFullscreen"])
    {
        change = "MSFullscreenChange";
        error = "MSFullscreenError";
    }
    else if (e["mozCancelFullScreen"])
    {
        change = "mozfullscreenchange";
        error = "mozfullscreenerror";
    }
    else 
    {
        change = "fullscreenchange";
        error = "fullscreenerror";
    }

    // Install the event handlers
    jQuery(document).bind(change, fullScreenChangeHandler);
    jQuery(document).bind(error, fullScreenErrorHandler);
}

jQuery.fn["fullScreen"] = fullScreen;
jQuery.fn["toggleFullScreen"] = toggleFullScreen;
installFullScreenHandlers();

})();
// Various polyfills
// TODO: Move into better location?
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== "function") {
      // closest thing possible to the ECMAScript 5 internal IsCallable function
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
      fToBind = this,
      fNOP = function () {},
      fBound = function () {
        return fToBind.apply(this instanceof fNOP ? this : oThis || window,
          aArgs.concat(Array.prototype.slice.call(arguments)));
      };

    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();

    return fBound;
  };
}

if (!Object.create) {
  Object.create = function (o) {
    if (arguments.length > 1) {
      throw new Error('Object.create implementation only accepts the first parameter.');
    }

    function F() {}
    F.prototype = o;
    return new F();
  };
}

Object.keys = Object.keys ||
  function (
    o, // object
    k, // key
    r // result array
) {
  // initialize object and result
  r = [];
  // iterate over object keys
  for (k in o)
  // fill result array with non-prototypical keys
    r.hasOwnProperty.call(o, k) && r.push(k);
  // return result
  return r
}

// Production steps of ECMA-262, Edition 5, 15.4.4.19
// Reference: http://es5.github.com/#x15.4.4.19
if (!Array.prototype.map) {
  Array.prototype.map = function(callback, thisArg) {

    var T, A, k;

    if (this == null) {
      throw new TypeError(" this is null or not defined");
    }

    // 1. Let O be the result of calling ToObject passing the |this| value as the argument.
    var O = Object(this);

    // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
    // 3. Let len be ToUint32(lenValue).
    var len = O.length >>> 0;

    // 4. If IsCallable(callback) is false, throw a TypeError exception.
    // See: http://es5.github.com/#x9.11
    if (typeof callback !== "function") {
      throw new TypeError(callback + " is not a function");
    }

    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
    if (thisArg) {
      T = thisArg;
    }

    // 6. Let A be a new array created as if by the expression new Array(len) where Array is
    // the standard built-in constructor with that name and len is the value of len.
    A = new Array(len);

    // 7. Let k be 0
    k = 0;

    // 8. Repeat, while k < len
    while(k < len) {

      var kValue, mappedValue;

      // a. Let Pk be ToString(k).
      //   This is implicit for LHS operands of the in operator
      // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
      //   This step can be combined with c
      // c. If kPresent is true, then
      if (k in O) {

        // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
        kValue = O[ k ];

        // ii. Let mappedValue be the result of calling the Call internal method of callback
        // with T as the this value and argument list containing kValue, k, and O.
        mappedValue = callback.call(T, kValue, k, O);

        // iii. Call the DefineOwnProperty internal method of A with arguments
        // Pk, Property Descriptor {Value: mappedValue, : true, Enumerable: true, Configurable: true},
        // and false.

        // In browsers that support Object.defineProperty, use the following:
        // Object.defineProperty(A, Pk, { value: mappedValue, writable: true, enumerable: true, configurable: true });

        // For best browser support, use the following:
        A[ k ] = mappedValue;
      }
      // d. Increase k by 1.
      k++;
    }

    // 9. return A
    return A;
  };      
}




if (!Array.prototype.filter)
{
  Array.prototype.filter = function(fun /*, thisArg */)
  {
    "use strict";

    if (this === void 0 || this === null)
      throw new TypeError();

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun != "function")
      throw new TypeError();

    var res = [];
    var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
    for (var i = 0; i < len; i++)
    {
      if (i in t)
      {
        var val = t[i];

        // NOTE: Technically this should Object.defineProperty at
        //       the next index, as push can be affected by
        //       properties on Object.prototype and Array.prototype.
        //       But that method's new, and collisions should be
        //       rare, so use the more-compatible alternative.
        if (fun.call(thisArg, val, i, t))
          res.push(val);
      }
    }

    return res;
  };
}


var viewport = function () {
  'use strict';
  
  // vreate cached object
  var current_size;

  // function that returns current viewport size
  function getCurrentViewportSize() {
    var e = window,
      a = 'inner',
      current_size;

    if (!('innerWidth' in window)) {
      a = 'client';
      e = document.documentElement || document.body;
    }

    return {
      width: e[a + 'Width'],
      height: e[a + 'Height']
    };
  }

  // bind resize
  $(window).on('resize', function () {
    current_size = getCurrentViewportSize();
  });

  // init sizes if not defined
  if (!current_size)
    current_size = getCurrentViewportSize();

  // new function that returns cached value. 
  return function () {
    return current_size;
  };
}();

windowLocation = {
  getHash: function(){ return window.location.hash; },
  setHash: function(hash){ window.location.hash = hash; }
};

// ********************************************************************************************
// 
// polyfill for requestAnimationFrame 
// check -> http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
// more info -> https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame 
// ********************************************************************************************
(function () {
  var lastTime = 0;
  var vendors = ['webkit', 'moz'];
  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame =
      window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
  }

  if (!window.requestAnimationFrame)
    window.requestAnimationFrame = function (callback, element) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function () {
          callback(currTime + timeToCall);
        },
        timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };

  if (!window.cancelAnimationFrame)
    window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };
}());
/*
Copyright (c) 2010,2011,2012,2013 Morgan Roderick http://roderick.dk
License: MIT - http://mrgnrdrck.mit-license.org

https://github.com/mroderick/PubSubJS
*/
/*jslint white:true, plusplus:true, stupid:true*/
/*global
  setTimeout,
  module,
  exports,
  define,
  require,
  window
*/

(function(root, factory){
  'use strict';

  // CommonJS
  if (typeof exports === 'object' && module){
    module.exports = factory();

  // AMD
  } else if (typeof define === 'function' && define.amd){
    define(factory);
  // Browser
  } else {
    root.PubSub = factory();
  }
}( ( typeof window === 'object' && window ) || this, function(){

  'use strict';

  var PubSub = {},
    messages = {},
    lastUid = -1;

  /**
   *  Returns a function that throws the passed exception, for use as argument for setTimeout
   *  @param { Object } ex An Error object
   */
  function throwException( ex ){
    return function reThrowException(){
      throw ex;
    };
  }

  function callSubscriberWithDelayedExceptions( subscriber, message, data ){
    try {
      subscriber( message, data );
    } catch( ex ){
      setTimeout( throwException( ex ), 0);
    }
  }

  function callSubscriberWithImmediateExceptions( subscriber, message, data ){
    subscriber( message, data );
  }

  function deliverMessage( originalMessage, matchedMessage, data, immediateExceptions ){
    var subscribers = messages[matchedMessage],
      callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,
      i, j;

    if ( !messages.hasOwnProperty( matchedMessage ) ) {
      return;
    }

    // do not cache the length of the subscribers array, as it might change if there are unsubscribtions
    // by subscribers during delivery of a topic
    // see https://github.com/mroderick/PubSubJS/issues/26
    for ( i = 0; i < subscribers.length; i++ ){
      callSubscriber( subscribers[i].func, originalMessage, data );
    }
  }

  function createDeliveryFunction( message, data, immediateExceptions ){
    return function deliverNamespaced(){
      var topic = String( message ),
        position = topic.lastIndexOf( '.' );

      // deliver the message as it is now
      deliverMessage(message, message, data, immediateExceptions);

      // trim the hierarchy and deliver message to each level
      while( position !== -1 ){
        topic = topic.substr( 0, position );
        position = topic.lastIndexOf('.');
        deliverMessage( message, topic, data );
      }
    };
  }

  function messageHasSubscribers( message ){
    var topic = String( message ),
      found = messages.hasOwnProperty( topic ),
      position = topic.lastIndexOf( '.' );

    while ( !found && position !== -1 ){
      topic = topic.substr( 0, position );
      position = topic.lastIndexOf('.');
      found = messages.hasOwnProperty( topic );
    }

    return found && messages[topic].length > 0;
  }

  function publish( message, data, sync, immediateExceptions ){
    var deliver = createDeliveryFunction( message, data, immediateExceptions ),
      hasSubscribers = messageHasSubscribers( message );

    if ( !hasSubscribers ){
      return false;
    }

    if ( sync === true ){
      deliver();
    } else {
      setTimeout( deliver, 0 );
    }
    return true;
  }

  /**
   *  PubSub.publish( message[, data] ) -> Boolean
   *  - message (String): The message to publish
   *  - data: The data to pass to subscribers
   *  Publishes the the message, passing the data to it's subscribers
  **/
  PubSub.publish = function( message, data ){
    return publish( message, data, false, PubSub.immediateExceptions );
  };

  /**
   *  PubSub.publishSync( message[, data] ) -> Boolean
   *  - message (String): The message to publish
   *  - data: The data to pass to subscribers
   *  Publishes the the message synchronously, passing the data to it's subscribers
  **/
  PubSub.publishSync = function( message, data ){
    return publish( message, data, true, PubSub.immediateExceptions );
  };

  /**
   *  PubSub.subscribe( message, func ) -> String
   *  - message (String): The message to subscribe to
   *  - func (Function): The function to call when a new message is published
   *  Subscribes the passed function to the passed message. Every returned token is unique and should be stored if
   *  you need to unsubscribe
  **/
  PubSub.subscribe = function( message, func ){
    if ( typeof func !== 'function'){
      return false;
    }

    // message is not registered yet
    if ( !messages.hasOwnProperty( message ) ){
      messages[message] = [];
    }

    // forcing token as String, to allow for future expansions without breaking usage
    // and allow for easy use as key names for the 'messages' object
    var token = String(++lastUid);
    messages[message].push( { token : token, func : func } );

    // return token for unsubscribing
    return token;
  };

  /**
   *  PubSub.unsubscribe( tokenOrFunction ) -> String | Boolean
   *  - tokenOrFunction (String|Function): The token of the function to unsubscribe or func passed in on subscribe
   *  Unsubscribes a specific subscriber from a specific message using the unique token
   *  or if using Function as argument, it will remove all subscriptions with that function
  **/
  PubSub.unsubscribe = function( tokenOrFunction ){
    var isToken = typeof tokenOrFunction === 'string',
      key = isToken ? 'token' : 'func',
      succesfulReturnValue = isToken ? tokenOrFunction : true,

      result = false,
      m, i;

    for ( m in messages ){
      if ( messages.hasOwnProperty( m ) ){
        for ( i = messages[m].length-1 ; i >= 0; i-- ){
          if ( messages[m][i][key] === tokenOrFunction ){
            messages[m].splice( i, 1 );
            result = succesfulReturnValue;

            // tokens are unique, so we can just return here
            if ( isToken ){
              return result;
            }
          }
        }
      }
    }

    return result;
  };

  return PubSub;
}));
window.HistoryUlrHelper = {

  use_history: true,
  current_state: undefined,

  useHistory: function (use) {
    use_history = use;
  },

  getParamsUrlFromState: function (_state) {

    if (!_state) {
      return '';
    }

    var params = [];

    $.each(_state, function (k, v) {
      params.push(k + '=' + v);
    });

    return params.join('&');
  },

  // Gets url params and creates hash out of those
  // example. ["name1=value1", "name2=value2"] =>  {name1: 'value1', name2: 'value2'}
  getStateFromString: function (_url_params) {

    var _state = {}, i, param_s;

    for (i = 0; i < _url_params.length; i++) {
      param_s = _url_params[i].split('=');
      // prevent empty values be pushed to hash  
      if (param_s[0]) {
        _state[param_s[0]] = param_s[1];
      }
    }

    return _state ? _state : {};
  },

  // Gets url params and creates hash out of those
  // example. http://someurl.com/path?name1=value1&name2=value2  =>  {name1: 'value1', name2: 'value2'}
  getStateFromUrlParams: function () {
    return this.getStateFromString(window.location.search.substring(1).split('&'));
  },

  syncStateFromUrl: function () {
    var _state_hash = this.getStateFromUrlParams();
    this.pushState(_state_hash);
    return _state_hash;
  },

  getState: function () {

    if (this.use_history && Modernizr.history) {
      if (!window.history.state) {
        this.current_state = this.getStateFromUrlParams();
        window.history.pushState(this.current_state, '', window.location.search);
      }
      else {
        this.current_state = history.state;
      }
    }
    else if (!this.current_state) {
      this.current_state = HistoryUlrHelper.syncStateFromUrl();
    }
    // console.log(this.current_state);
    return this.current_state;

  },

  pushState: function (_state) {
    if (Modernizr.history) {
      window.history.pushState(_state, '', "?" + this.getParamsUrlFromState(_state));
    }
    current_state = _state;
  }

};
/*global $, I18n*/

/**
 * == flickr ==
 **/

/** section: flickr
 * Flickr
 **/

window.App = window.App || {};
window.App.Module = window.App.Module || {};

window.App.Module.Flickr = function (app_key, user) {

  this._key = app_key;
  this._user = user;
  // this.FLICKR_ENDPOINT = (I18n.flickr ? I18n.flickr.flickr_endpoint : 'http://23.62.109.128/services/rest/');
  this.FLICKR_ENDPOINT = (I18n.flickr ? I18n.flickr.flickr_endpoint : 'http://api.flickr.com/services/rest/');
  this.NOKIA_ENDPOINT_PLACES = (I18n.flickr ? I18n.flickr.nokia_endpoint_places : '/ajax/flickr/?param1=value1&param2=value2');
  this.NOKIA_ENDPOINT_USERS = (I18n.flickr ? I18n.flickr.nokia_endpoint_users : '/ajax/flickr/?param1=value1');
};

window.App.Module.Flickr.prototype.createShareUrl = function (image_id) {
  return 'http://www.flickr.com/photos/' + this._user + '/' + image_id + '/';
};

/**
 * Flickr#getPlacesForUser(userId, callback, scope) -> undefined
 * @param  {String}   userId
 * @param  {Function} callback
 * @param  {Object}   scope
 * @return {undefined}
 *
 * get list of user places and pust them to callback function
 */
window.App.Module.Flickr.prototype.getPlacesForUser = function (callback, scope) {

  var wrap = new window.App.Module.Flickr.Response().parseWith(this._wrapPlaces),
    params = {
      method: 'nokia.places.placesForUser'
    };

  window.flickrGetPlacesForUserCallback = function (data) {
    callback.call(scope, wrap(data));
  };
  
  this.request(this.NOKIA_ENDPOINT_PLACES, params, 'flickrGetPlacesForUserCallback');
};

// TODO 
// create callback on request git given name or function name

window.App.Module.Flickr.prototype.mergeEndpointParams = function (params, endpoint) {

  if (/\?/.exec(endpoint)) {
    var ret = {};
    endpoint.split('?')[1].split('&').map(function (item, i) {
      var a = item.split('=');
      ret[a[0]] = a[1];
    });
    return $.extend(ret, params);
  }
  else {
    return params;
  }
};

window.App.Module.Flickr.prototype.getUsers = function (callback, scope) {

  var wrap = new window.App.Module.Flickr.Response().parseWith(this._wrapPeople),
    params = {
      method: 'nokia.people.userList'
    };


  window.flickrGetUsersCallback = function (data) {
    callback.call(scope, wrap(data));
  };
  
  this.request(this.NOKIA_ENDPOINT_USERS, params, 'flickrGetUsersCallback');
};

/**
 * Flickr#getSearch(text, callback, scope) -> undefined
 * - text (String)
 * - callback (Function)
 * - scope (Object)
 *
 * Searches Flickr for photos matching the given string. Result items are
 * wrapped as `Flickr.Photo` objects.
 **/
window.App.Module.Flickr.prototype.getSearch = function (text, params, callback, scope) {

  var wrap = new window.App.Module.Flickr.Response().parseWith(this._wrapPhotos);

  params.method = 'flickr.photos.search';
  params.api_key = this._key;
  params.user_id = this._user;

  window.flickrGetSearchCallback = function (data) {
    callback.call(scope, wrap(data));
  };
  
  this.request(this.FLICKR_ENDPOINT, params, 'flickrGetSearchCallback');

 
};

/**
 * Flickr#tagsOf(id, callback, scope) -> undefined
 * - id (String)
 * - callback (Function)
 * - scope (Object)
 **/
window.App.Module.Flickr.prototype.getUserTags = function (callback, scope) {

  var wrap = new window.App.Module.Flickr.Response().parseWith(this._wrapTags),
    params = {
      method: 'flickr.tags.getListUserPopular',
      count: 100,
      api_key: this._key,
      user_id: this._user
    };

  window.flickrGetUserTagsCallback = function (data) {
    callback.call(scope, wrap(data));
  };

  this.request(this.FLICKR_ENDPOINT, params, 'flickrGetUserTagsCallback');
};

window.App.Module.Flickr.prototype._wrapPeople = function (data) {

  return wrapItemsWithGivenClass(data.peoples.people, window.App.Module.Flickr.User);
};

window.App.Module.Flickr.prototype._wrapTags = function (data) {
  var ret = wrapItemsWithGivenClass(data.who.tags.tag, window.App.Module.Flickr.Tag); 

  ret = ret.sort(function(a, b){
    // return parseInt(a.getCount()) > parseInt(b.getCount());
    if (a.getContent().toUpperCase() > b.getContent().toUpperCase()) return -1;
    if (a.getContent().toUpperCase() < b.getContent().toUpperCase()) return 1;
    return 0;
  });
  return ret;

};

window.App.Module.Flickr.prototype._wrapPlaces = function (data) {

  return wrapItemsWithGivenClass(data.places.place, window.App.Module.Flickr.Place);
};

function wrapItemsWithGivenClass(array, InstanceType) {
  var ret = [],
    i, len = array.length;

  for (i = 0; i < len; i++) {
    ret.push(new InstanceType(array[i]));
  }
  return ret;
}

/**
 * Flickr#_wrapPhotos(data) -> Array
 * - data (Array)
 *
 * Takes a list of feed items from the Flickr API and wraps them up as
 * instances of `Flickr.Photo`.
 **/
window.App.Module.Flickr.prototype._wrapPhotos = function (data) {

  var i, n, ret = [],
    photos = data.photos.photo;
  for (i = 0, n = photos.length; i < n; i++) {
    ret.push(new window.App.Module.Flickr.Photo(photos[i]));
  }
  return ret;
};

window.App.Module.Flickr.prototype.clearPathFromParams = function (path) {
  return (/\?/).exec(path) ? path.split('?')[0] : path;
};

window.App.Module.Flickr.prototype.request = function (path, params, callbackName) {

  params = $.extend({
    format: 'json',
    jsoncallback: callbackName
  }, params || {});

  params = this.mergeEndpointParams(params, path);
  path = this.clearPathFromParams(path);

  if (params._text)
    params.text = params._text;

  $.ajax({
    cache: true,
    type: 'GET',
    dataType: 'script',
    jsonp: 'jsoncallback',
    url: path,
    data: params,
    error: function (xhr, status, error) {
    }
  });

};
/**
 * Flickr.DataModel
 * Provides a wrapper object for items from Flickr DataModel feeds.
 **/


'use strict';

App.namespace('Module.Flickr', function (namespace) {

  namespace.DataModel = function () {
    // Nothing interesting here. All stuf is pushed to prototype
  };

  /**
   * Function loops all _data variables and creates setters out of those. 
   
   * example:
   *   some_value: 2 -> getSomeValue = function () { return some_value; };
   *
   * @param  {Object} self reference to it self. 
   * @return {undefined}
   */
  namespace.DataModel.prototype.buildGetters = function (self) {
      
    for (var key in this._data)(

      function (self, method, property) { // this clojure here is to store method and property references
        self['get' + window.App.Module.Flickr.DataModel.prototype.dashToCamel(method)] = function () {
          return property;
        };
      }
    )(self, key, this._data[key]);
  }

  /**
   * Function converts string from underscore to camelcase
   *  
   * @param  {String} str to be converted
   * @return {String} camelcase formatted string.
   */
  namespace.DataModel.prototype.dashToCamel = function(str) {
    return str.replace(/\_+(.)/g, function (x, chr) {
      return chr.toUpperCase();
    }).replace(/^[a-z]/, function (x, chr) {
      return x.toUpperCase();
    });
  };

});

/**
 * class Flickr.Photo
 * Provides a wrapper object for items from Flickr photo feeds.
 **/


App.namespace('Module.Flickr', function (namespace) {
 'use strict';
  namespace.Photo = function (feedData) {

    this._data = feedData;
    this.buildGetters(this);
  };

  namespace.Photo.prototype = Object.create(window.App.Module.Flickr.DataModel.prototype);
});
/**
 * class Flickr.Place
 * Provides a wrapper object for items from Flickr Place feeds.
 **/



App.namespace('Module.Flickr', function (namespace) {

  'use strict';
  namespace.Place = function (feedData) {

    this._data = feedData;
    this.buildGetters(this);
  };

  namespace.Place.prototype = Object.create(window.App.Module.Flickr.DataModel.prototype);

});
/**
 * class Flickr.Photo
 * Provides a wrapper object for items from Flickr photo feeds.
 **/



App.namespace('Module.Flickr', function (namespace) {
 'use strict';
  namespace.Response = function () {};

  namespace.Response.prototype.parseWith = function (fn) {

    var ret = function (data) {

      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      this.stat = data.stat || 'ok';
      this.code = data.code;
      this.message = data.message;
      
      if(this.stat === 'ok') {
        this.content = fn(data);
      }
      return this;
    };

    return $.proxy(ret, this);
  }

  namespace.Response.prototype.isOk = function () {
    return this.stat === 'ok';
  }

});
/**
 * class Flickr.Tag
 * Provides a wrapper object for items from Flickr Tag feeds.
 **/



App.namespace('Module.Flickr', function (namespace) {
  'use strict';

  namespace.Tag = function (feedData) {

    this._data = feedData;
    this.buildGetters(this);
  };

  namespace.Tag.prototype = Object.create(window.App.Module.Flickr.DataModel.prototype);

});
/**
 * class Flickr.User
 * Provides a wrapper object for items from Flickr User feeds.
 **/


App.namespace('Module.Flickr', function (namespace) {
  'use strict';

  namespace.User = function (feedData) {

    this._data = feedData;
    this.buildGetters(this);
  };

  namespace.User.prototype = Object.create(window.App.Module.Flickr.DataModel.prototype);
});


;(function($) {

  var instances = {}, excludeFromPollutionCheck = ['currentbreakpoint', 'onYouTubePlayerAPIReady'];


  $.plugin = function(name, plugin, init_options, undefined) {

    init_options = init_options || {};

    if ($.fn[name] !== undefined) {
      $.error('jquery.' + name + ': A plugin with same name has been registered already.');
      return false;
    }

    if ((new plugin()).init === undefined) {
      $.error('jquery.' + name + ': Required method #init has not been implemented.');
      return false;
    }

    return $.fn[name] = function(method) {

      var $el, instance, args = Array.prototype.slice.call(arguments, 1), variableCount;

      return this.each(function(i, el) {
        $el = $(el);
        instance = $el.data(name);

        if (!instance && ( typeof method === 'object' || !method)) {
          instances[name] = instances[name] + 1 || 1;
          instance = new plugin();

          method = $.extend(method, $el.data());

          $el.data(name, $.extend(true, instance, {
            $el : $el,
            namespace : name + '-' + instances[name],
            options : method
          }));

          checkGlobalScopePolution(name, function() {
            instance.init($el);
          });

        } else if (instance[method] && method !== 'init') {
          instance[method].apply(instance, [$el].concat(args));
        } else {
          $.error('jquery.' + name + ': Method #' + method + ' does not exist. ' +
            'Maybe you are trying to initialize a plugin to an object that is already initialized.');
        }

        if (method === 'destroy') {
          $el.removeData(name);
        }
      });
    };
  };

  function checkGlobalScopePolution(plugin_name, do_your_thing) {

    if (window.location.hostname !== 'localhost') {
      return do_your_thing();
    }

    var properties_before = {}, after = 0;

    // collect variables from gobal scope
    for (var prop1 in window) {
      properties_before[ prop1.toString()] = true;
    }

    // ok, just do it
    do_your_thing();

    // loop variables again after plugin is initialized
    for (var prop2 in window ) {
      try {
        // check if it exists before plugin init
        if (!properties_before[prop2.toString()]
  
        // drop out properties that should be on global scope.
        && excludeFromPollutionCheck.indexOf(prop2.toString()) < 0
  
        // seems that jquery puts its self to globa scope
        && prop2.toString().substring(0, 6) !== 'jQuery') {
  
          // push angry message for user if something found
          log(plugin_name + " pollutes global scope. New variable added: " + prop2);
        }
      } catch (err) { 
        // IE8 fails
      }
    }

  };

  function log(message) {
    if (console && console.log) {
      console.log(message);
    }
  };

})(jQuery);
var loadmore_content_hooks = [];

(function ($) {
  "use strict";
  $.fn.loadmore = function (options) {

    var _self = $(this);

    var loader = $(".load-more .loader"),
      label = _self.find("span"),
      buffer = _self.find(".element-buffer"),
      $catalog = $(options.catalog),
      wrapper = $catalog.find('.wrapper');

    if (options.preloaded) {
      // content already loaded, just show it
      $(this).find('.wrapper').show();
      $(this).unbind().on('click', '.wrapper a', function () {
        label.hide();
        loader.fadeIn(300);

        var $showSet = $catalog.find('li:hidden[data-type='+ $('.product-selector .radios a.checked').attr('category') +']').slice(0, parseInt($catalog.data('itemsperload')));

        $showSet.find('img').each(function(){
          $(this).removeClass('adaptive-exclude');
        });

        // show first set of hidden items
        $showSet.css({ opacity: 0, display: 'block'}).removeClass('full-opacity').each(function (i) {
          var transitionOrAnimate = $(this).data('transitionOrAnimate');
          // init if needed, otherwise re-run same method in sequence
          if (typeof transitionOrAnimate == 'undefined') {
            $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);  
          } else {
            setTimeout(function(){
              transitionOrAnimate.init(transitionOrAnimate.$el);
            }, parseInt(100*i, 10));
          }
        });
        PubSub.publish('image.added');

        setTimeout(function(){
          loader.hide();
          label.fadeIn(300);

          // hide the button if no more items are available
          if ($catalog.find('li:hidden[data-type='+ $('.product-selector .radios a.checked').attr('category') +']').length === 0) {
            $catalog.parents('.product-selector').css({ 'padding-bottom': '0.75em' });
            _self.hide();
          }
        }, $showSet.length*100);

        // custom tracking
        if (window.isTrackingAvailable) {
          utag.link({ link_id:window.location, link_text: "load more", linkEvent: "load more" });
        }
      });
    } else {
      // dynamic loading
      $(this).find('.wrapper').show();
      $(this).unbind().on('click', '.wrapper a', function () {
        label.hide();
        loader.fadeIn(300);
        buffer.load(wrapper.data('nextpage') + " " + options.catalog + " .wrapper", function () {
          // some browsers (old symbian, kindle fire) devices show both javascript and <noscript> content so:
          // 1) delete all noscript elements before they are shown -> fail
          // 2) delete the section pagination -> fail
          // 3) add nonajax class to normal div and remove that -> win
          buffer.find(".nonajax").remove();
          buffer.find(".pagination").remove();
          buffer.find("li").removeClass('third').removeClass('fourth');

          // TODO: it would be better to have hooks run before the content is appeneded, but currently no hook implementation supports it
          //          for (var i=0, len=loadmore_content_hooks.length; i < len; i++) {
          //            loadmore_content_hooks[i](buffer);
          //          }

          // append all li elements that do not have li element as ancestor
          wrapper.find("> ul, .content-wrapper > ul").append(buffer.find("li").filter(function() { return !$(this).parent().closest("li").length; }));
          wrapper.data('nextpage', buffer.find('.wrapper').data('nextpage'));

          for (var i=0, len=loadmore_content_hooks.length; i < len; i++) {
            loadmore_content_hooks[i](wrapper);
          }
          // TODO: move adaptive images stuff to hook
          PubSub.publish('image.added');
  
          if (wrapper.data('nextpage') === '') {
            _self.find(".wrapper").hide();
          }
          loader.hide();
          label.fadeIn(300);
          buffer.empty();
          
          if (window.opacityFadeIn) {
            window.opacityFadeIn($('.do-opacity-fade-in'), function () {
              $(this).removeClass('do-opacity-fade-in');
            });
          }
        });
        
        // custom tracking
        if (window.isTrackingAvailable) {
          utag.link({ link_id:window.location, link_text: "load more", linkEvent: "load more" });
        }
      });  
    }
    

  };

}(jQuery));
/* global jQuery, Modernizr, viewport, App, BrowserDetect, PubSub */


(function ($) {
  'use strict';

  $.plugin('slideshow2', function () {
    this.VERSION = '2.0.0';

    var options,
      $wrap,
      $content,
      $navigation,
      $slides,
      $active,
      $previous,
      paused,
      $previousThumb,
      $nextThumb,
      $slides_viewport,
      slideshowInterval,
      progressBarAnimationInterval,
      activeSlideIndex,
      thumbnailAmount,
      canMove = 0,
      bindHover,
      slideshow = 'slideshow2',
      eventNamespace;

    this.options = {
      slides: '.slides',
      slide: '.slide',
      controls: 'ul.controls',
      duration: 350,
      easing: 'easeInOutQuart',
      externalControls: false,
      arrows: false,
      fixedArrowTop: true,
      navigation: true,
      autoPlay: false,
      slideInterval: 8000,
      progressBar: false,
      progressBarHeight: '3px',
      richContent: false,
      forwardOnSlideTap: undefined,
      componentWrapper: null,
      minScreenWidth: 768,
      controlTransitionDuration: 350,
      fullBleedSlides: false,
      runOnce: false,
      verticalNavigation: false,
      thumbnailsVisibleLimit: 5,
      thumbnailMargin: 8,
      productHeroArea: false,
      hero: false
    };

    this.init = function (el) {
      if (el.length === 0) {
        return;
      }

      eventNamespace = '.' + this.namespace;
      options = this.options;
      paused = false;
      activeSlideIndex = -1;
      $wrap = $(el);
      $content = $wrap.find(options.slides);
      $previousThumb = $wrap.find('a.thumbnail-page-previous');
      $nextThumb = $wrap.find('a.thumbnail-page-next');
      $slides_viewport = $wrap.find('.thumbnail-list-wrapper');
      isTouchDevice();

      initNavigationBar();

      if (!options.fullBleedSlides) {
        initArrowNavigation();
      }

      initProgressBar();
      initializeSlidesContent();

      if ($slides.length > 1) {
        bindElements();

        if (options.autoPlay && viewport().width >= options.minScreenWidth) {
          startAutoPlay();
        }
        else {
          $navigation.find('li:first a').trigger('click');
          highlightProgressBar();
        }
      }
      else {
        $slides.css('cursor', 'default');
      }

      // If a slideshow contains only one slide, add to class to hide vertical 
      // navigation and make the slideshow content area 100% width. 
      // Then make the first slide visible.
      if ($slides.length === 1) {
        $wrap.addClass('single');
        $slides.eq(0).css({
          'opacity': '1'
        });
      }
    };

    this.destroy = function () {
      unbindElements();
      $wrap.removeData(slideshow);
    };

    // If touch device, 
    // don't show arrows in bigger breakpoints
    function isTouchDevice() {
      if (options.forwardOnSlideTap === undefined) {
        options.forwardOnSlideTap = Modernizr.touch;
      }
    }

    function initProgressBar() {
      if (!options.progressBar) return; // if progressbar is disabled, do nothing.

      var $progressBarTrack = $('<div class="progress-bar-track"><div class="progress-bar" /></div');
      $progressBarTrack.css({
        'position': 'absolute',
        'top': 0,
        'height': options.progressBarHeight,
        'width': $navigation.find('li:first-child').outerWidth()
      });
      $progressBarTrack.find('.progress-bar').css({
        'position': 'absolute',
        'bottom': 0,
        'width': 0,
        'height': options.progressBarHeight,
        'background': '#124191'
      });
      $progressBarTrack.appendTo($navigation.find('li'));
    }

    function initArrowNavigation() {
      // Arrow navigation
      if (options.arrows && $navigation.children().size() > 1) {
        var $prevArrowControl, $nextArrowControl;

        $prevArrowControl = $('<div class="arrow-control previous" />');
        $nextArrowControl = $('<div class="arrow-control next" />');

        $('<a rel="prev" href="#">&larr;</a>').appendTo($prevArrowControl);
        $('<a rel="next" href="#">&rarr;</a>').appendTo($nextArrowControl);

        $prevArrowControl.appendTo($wrap);
        $nextArrowControl.appendTo($wrap);

        $content.find('img').each(function (index) {
          $(this).on('load.slide_image_check', function () {
            var slideImage = $(this),
              imgWidth = this.width,
              imgHeight = this.height;

            if (index === 0)
              positionArrows();

            if (/nope.gif/.exec(slideImage.attr('src'))) {
              return;
            }
            else {
              if (imgWidth < imgHeight) {
                slideImage.addClass('portrait');
              }
            }
          });
        });

      }
    }

    function initNavigationBar() {
      // Slideshow navigation
      if (!options.externalControls) {
        $navigation = $wrap.find(options.controls);
      }
      else {
        $navigation = $(options.externalControls);
      }
      // if navigationBar is disabled, remove it from DOM
      if (!options.navigation) {
        $navigation.remove();
        return;
      }

      // If there are no slides to show, stop.
      if (!$navigation.length) {
        return false;
      }

      initResponsiveImages($navigation);

      if ($navigation.children().length >= 2 && $navigation.children().length <= 6) {
        $navigation.addClass(['two', 'three', 'four', 'five', 'six'][$navigation.children().length - 2]);
      }

      $navigation.find('li:first').addClass('active');

      // Add class to portrait thumbnails for adjusting position and width of the portrait thumbnails
      //markAsPortriat($navigation.find('img'));

      // Set the thumbnail navigation
      if (options.verticalNavigation) {
        // Check that the first slide has an adaptive image loaded.
        // This is needed in order to set the correct heights for the thumbnail navigation.
        $($content.find(options.slide + ' img')[0]).on('load.content_image', function () {
          var self = $(this);
          if (/nope.gif/.exec(self.attr('src'))) {
            return;
          }
          else {
            self.off('.content_image');
            setNavigationValues();
          }
        });
      }
    }

    function markAsPortriat($images) {
      $images.each(function () {
        $(this).on('load' + eventNamespace, function () {
          if (this.height > this.width) {
            $(this).addClass('portrait');
          }
        });
      });
    }

    function setNavigationValues() {
      // If on large enough screen, build the sidebar
      if (options.minScreenWidth && viewport().width >= options.minScreenWidth) {
        // Reset the thumbnail navigation on init
        thumbnailAmount = $navigation.children().length;

        // This is for onResize to get the margin (position) right based on active slide
        $navigation.css({
          'margin-top': ''
        });
        var $activeNavigationItem = $navigation.children(':eq(' + parseInt(canMove, 10) + ')'),
          moveHeight = ($navigation.offset().top + $navigation.parent().outerHeight()) - ($activeNavigationItem.offset().top + $activeNavigationItem.outerHeight());
        if (moveHeight < 0) {
          // When the active item is not in the viewport
          $navigation.css({
            'margin-top': moveHeight
          });
        }

        // Set the height of the thumbnail container to the height of the slides when dealing with fullBleedSlides like e.g. the KSP story blocks
        if (options.fullBleedSlides) {
          $slides_viewport.css({
            'height': Math.round($content.outerHeight()) + 'px'
          });
        }

        // DEBUG Check if this code block should actually be inside previous if statement
        // Show thumbnail list controls
        if (($navigation.outerHeight() + $nextThumb.height() + $previousThumb.height()) > $content.outerHeight()) {
          $nextThumb.show();
          $previousThumb.show();
        }
        else {
          $nextThumb.hide();
          $previousThumb.hide();
        }

        // else reset to a bottom collection of slides
      }
      else {
        // Reset thumbnail list top margin
        $navigation.css({
          'margin-top': '0'
        });
        // Hide thumbnail list controls
        $nextThumb.hide();
        $previousThumb.hide();
        if (options.fullBleedSlides) {
          $slides_viewport.css({
            'height': 'auto'
          });
        }
      }

    }

    function handleClickNext(e) {
      e.preventDefault();

      if ($nextThumb.is('.disabled')) {
        return;
      }

      var currentMargin = parseInt($navigation.css('margin-top'), 10);

      if (canMove <= thumbnailAmount) {
        moveBy(1);
        if ($navigation.height() + currentMargin - $slides_viewport.height() > 0) {
          $navigation.customAnimate({
            'margin-top': -Math.round($navigation.children(':eq(' + parseInt(canMove, 10) + ')').offset().top - $navigation.offset().top) + 'px'
          }, options.controlTransitionDuration);
        }

        // WHAT DOES THIS ELSE BRANCH ACTUALLY ACCOMPLISH?
      }
    }

    function handleClickPrev(e) {
      e.preventDefault();

      if ($previousThumb.is('.disabled')) {
        return;
      }

      if (canMove > 0) {
        moveBy(-1);

        if (Math.round($navigation.children(':eq(' + parseInt(canMove, 10) + ')').offset().top - $slides_viewport.offset().top) < 0) {
          $navigation.customAnimate({
            'margin-top': -Math.round($navigation.children(':eq(' + parseInt(canMove, 10) + ')').offset().top - $navigation.offset().top) + 'px'
          }, options.controlTransitionDuration);
        }
      }

    }

    function setControlStates() {
      var can_move_backwards = canMove > 0,
        can_move_forwards = canMove < thumbnailAmount - 1;

      $previousThumb.toggleClass('disabled', !can_move_backwards);
      $nextThumb.toggleClass('disabled', !can_move_forwards);
    }

    function initializeSlidesContent() {
      if ($navigation.length) {
        $navigation.find('li').each(function (index) {
          var slides = $content.children(':eq(' + index + ')'),
            slide;
          if (slides.length) {
            slide = $(slides[0]);
          }
          else {
            slide = $('<div class="' + options.slide.substr(1) + '"></div>');
            slide.css({
              'display': 'none',
              'opacity': '0'
            });
            slide.appendTo($content);
          }

          slide.data('class', $(this).attr('class'));
        });
      }

      // Assign slides to $content
      $slides = $content.find(options.slide);
      $slides.hide().stop().first().show().css({
        'display': 'block'
      });

    }

    function moveBy(delta) {
      if (options.runOnce && $active.index() === $slides.length - 1) {
        stopAutoPlay();
        moveTo(0);
        return;
      }

      if (!$active) {
        $active = $slides.first();
      }

      moveTo(($active.index() + delta) % $slides.length);
    }

    function moveTo(index) {
      // clicking active index won't do anything
      if (index === activeSlideIndex) {
        return;
      }

      activeSlideIndex = index;

      // If there is active player, close it. Stopping 
      // an active player doesn't work reliably on mobile devices.
      if (App.Video.currentPlayer) {
        App.Video.currentPlayer.close();
      }

      // move active class to soon to be active one    
      $($navigation.children().removeClass('active').get(index)).addClass('active');

      if ($active) {
        // If slideshow is in Product Hero Area,
        // animate slide header, since it's not inside slide any more
        if (options.productHeroArea) {
          $('.slideshow-slide-headline:eq(' + $active.index() + ')').stop().animate({
            'opacity': 0
          }, options.duration, options.easing, function () {
            $(this).css({
              'display': 'none'
            });
          });
        }

        $active.animate({
          'opacity': 0
        }, options.duration, options.easing, function () {
          $previous = $active.css({
            'display': 'none'
          });
          $active = $slides.eq(index % $slides.length);

          // If slideshow is in Product Hero Area,
          // animate slide header, since it's not inside slide any more
          if (options.productHeroArea) {
            $('.slideshow-slide-headline:eq(' + $active.index() + ')').css({
              'display': 'block'
            }).animate({
              'opacity': 1
            }, options.duration, options.easing);
          }

          $active.css({
            'display': 'block'
          }).animate({
            'opacity': 1
          }, options.duration, options.easing);
          loadContent($active);
          adjustPosterControlHeight();
          positionArrows();

          if ($active.index() === 0) {
            $navigation.children().find('.progress-bar').stop().width(0);
          }

          if (options.autoPlay && paused === false) {
            animateProgressBar();
          }
          else {
            highlightProgressBar();
          }
        });
      }
      else {
        // first time use case (on page load)
        $active = $slides.eq(index % $slides.length);

        loadContent($active);

        $active.css({
          'opacity': 0
        }).animate({
          'opacity': 1
        }, options.duration, options.easing, function () {
          $navigation.children().removeClass('active').eq($active.index()).addClass('active');
          if (options.autoPlay && paused === false) {
            animateProgressBar();
          }
        });
      }
      canMove = index;
      setControlStates();
    }

    function animateProgressBar() {
      if (!options.progressBar) return; // return if progressbar disabled
      var $activeNavigationItem = $navigation.children().eq($active.index());
      $activeNavigationItem.find('.progress-bar').stop().width(0).animate({
        'width': '100%'
      }, options.slideInterval, 'linear');
    }

    function highlightProgressBar() {
      if (!options.progressBar) return; // return if progressbar disabled

      var $activeNavigationItem = $navigation.children().eq($active.index());
      $activeNavigationItem.find('.progress-bar').stop().css({
        'width': '100%'
      });
    }

    function loadContent(slide) {

      // stop current player
      if (App.Video.currentPlayer) {
        App.Video.currentPlayer.stop();
      }

      if (slide.find('img').size() === 1) {
        initResponsiveImages(slide);

        onImageReady(slide.find('img'), function () {
          $content.css({
            'display': 'block'
          });
        });

      }

      contentLoadReady();

    }

    function initResponsiveImages(content) {
      $(content).find('.adaptive-exclude').removeClass('adaptive-exclude');
      PubSub.publish('image.added');
    }

    function contentLoadReady() {
      if (BrowserDetect.browser === 'Explorer' && BrowserDetect.version < 9)  {
        $active.find('video, object').css({
          position: 'absolute',
          left: -9999
        });
      }

      if ($previous) {
        $previous.css({
          'display': 'none'
        });
      }
    }

    function stopAutoPlay() {
      clearInterval(slideshowInterval);
      clearInterval(progressBarAnimationInterval);
      $navigation.children().find('.progress-bar').stop().width(0);
      paused = true;
    }

    function startAutoPlay() {
      moveTo(0);
      slideshowInterval = setInterval(function () {
        moveBy(1);
      }, options.slideInterval);
      paused = false;
    }

    function onResize() {
      $navigation.find('.progress-bar-track').width($navigation.find('li:first-child').outerWidth());

      if (options.verticalNavigation) {
        setNavigationValues();
        setControlStates();
      }

      toggleArrows();
      $active.find('img').one('load', function () {
        adjustPosterControlHeight();
        positionArrows();
      });

      adjustPosterControlHeight();
    }

    function positionArrows() {
      if (options.fixedArrowTop) {
        var top,
          $arrowControl = $wrap.find('.arrow-control'),
          $container;

        if (options.hero) {
          $container = elemExist($active.find('.inline-video-trigger')) || elemExist($active.find('img')) || elemExist($active.find('.xvideo-player-wrapper'));
        } else {
          $container = $active;
        }

        top = Math.floor(($container.height() - $arrowControl.height()) / 2);

        $arrowControl.css({
          'top': top + 'px'
        });
      }
    }

    function elemExist($element) {
      if ($element.length > 0)
        return $element;
      else
        return false;
    }

    function adjustPosterControlHeight() {
      var $control = $active.find('.control-big'),
        $container = $active.find('.inline-video-trigger');

      if ($active.hasClass('video') && $control.length > 0 && $container.length > 0) {
        $control.css('top', ($container.height() - $control.height()) / 2 + 'px');
      }
    }

    function toggleArrows() {
      if (!options.arrows) return;
      var $arrowControl = $wrap.find('.arrow-control');

      positionArrows();

      if (options.minScreenWidth && viewport().width >= options.minScreenWidth) {
        // For non-touch devices, bind horizontal arrows to be shown only on hover 
        // if arrows hover event hasn't been bound yet
        if (!bindHover && !Modernizr.touch) {
          $arrowControl.css({
            'opacity': '0',
            'display': 'none'
          });

          if (options.componentWrapper !== null && options.componentWrapper.length > 0) {
            $arrowControl.fadeOut();
            options.componentWrapper.hover(
              function () {
                $arrowControl.stop().css({
                  'display': 'block'
                }).animate({
                  'opacity': '1'
                });
              }, function () {
                $arrowControl.stop().animate({
                  'opacity': '0'
                }, function () {
                  $arrowControl.css({
                    'display': 'none'
                  });
                });
              }
            );
          }
          bindHover = true;
        }
      }
      else {
        if (bindHover) {
          if (options.componentWrapper !== null && options.componentWrapper.length > 0) {
            options.componentWrapper.off('mouseenter mouseleave');
          }
          $arrowControl.stop().css({
            'display': 'block',
            'opacity': '1'
          });
          bindHover = false;
        }
      }
    }

    function unbindElements() {
      clearInterval(slideshowInterval);
      $navigation.off(eventNamespace);
      $content.off(eventNamespace);
      $wrap.off(eventNamespace);
      $nextThumb.off(eventNamespace, handleClickNext);
      $previousThumb.off(eventNamespace, handleClickPrev);
      $(document).off('.' + eventNamespace);
    }

    function bindElements() {
      // Thumbnail click
      $navigation.on('click' + eventNamespace, 'a', function (event) {
        event.preventDefault();
        event.stopPropagation();
        moveTo($(this).parent().index());
        if (options.autoPlay) stopAutoPlay();
      });

      // Horizontal navigation for touch-enabled devices
      if (options.forwardOnSlideTap) {
        $content.on('click' + eventNamespace, (options.slide + ':not(.video)'), function (event) {
          event.preventDefault();
          moveBy(1);
          if (options.autoPlay) stopAutoPlay();
        });
      }

      $wrap.on('click' + eventNamespace, '.previous a, .next a', function (event) {
        event.preventDefault();
        var disabled = $(this).is('.disabled');

        if (!disabled) {
          if ($('html').attr('dir') === 'rtl') {
            moveBy(this.rel === 'prev' ? 1 : -1);
          }
          else {
            moveBy(this.rel === 'prev' ? -1 : 1);
          }
        }

        if (options.autoPlay) stopAutoPlay();
      });

      $nextThumb.on('click' + eventNamespace, handleClickNext);
      $previousThumb.on('click' + eventNamespace, handleClickPrev);

      // Debounce value should be the higher then the one in adaptive images, otherwise 
      // early call of onResize sets incorrect values for the thumbnail navigation
      $(window).on('resize' + eventNamespace, $.debounce(onResize, 510)).resize();
    }

    function onImageReady(selector, handler) {
      var list, imagesLeft;

      // If given a string, use it as a selector; else use what we're given
      list = typeof selector === 'string' ? $(selector) : selector;
      imagesLeft = list.size();

      // Hook up each image individually
      list.each(function (index, element) {
        if (element.complete) {
          // Already loaded, fire the handler (asynchronously)
          imagesLeft -= 1;

          if (!imagesLeft) {
            setTimeout(function () {
              fireHandler.call(element);
            }, 10); // Won't really be 0, but close
          }
        }
        else {
          // Hook up the handler
          $(element).on('load', fireHandler);
        }
      });

      function fireHandler() {
        // Unbind us if we were bound
        $(this).off('load', fireHandler);

        // Call the handler
        handler.call(this);
      }
    }
  });
})(jQuery);
(function($) {

  $.plugin('normalizeHeights', function() {

    var $document = $(document), $window = $(window), options, $section, $elements;

    this.options = {
      debounceTime: 250,          // limits recalculation interval. 
      elementWrapper: undefined,  // selector used to find all elements that should be aligned inside of containser
      minScreenWidth: 0,          // resolution when element is hidden 
      maxScreenWidth: 9999999,    // resolution when element is hidden 
      animate: false,
      normalizeWidths: false,     // enable this if you want to normalise also widths
      normalizeHeights: true,     // disable this if you dont want to normalize heigths
      xDelta: 0                   // add or substract some pixels in width
    };

    var alignHeights = function() {

      var highestHeight = 0, oldHeight, viewportWidth,
          $visibleElements = $elements.filter(':visible');
      
      // Get old height to apply animation
      oldHeight = getMaxHeight($visibleElements);

      viewportWidth = viewport().width;
      
      // Reset height. When the viewport resolution goes off limits, it resets plugin set heights to flow normally
      $visibleElements.height('auto');
      
      // return if screen size is off limits
      if(options.minScreenWidth && viewportWidth <= options.minScreenWidth) return;
      if(options.maxScreenWidth && viewportWidth >= options.maxScreenWidth) return;
      
      highestHeight = getMaxHeight($visibleElements);
 
      // Set the same (highest of the group) height for all elements
      if(options.animate) {
        $visibleElements.css('height', oldHeight).animate({'height': highestHeight}, 250);
      } else {
        $visibleElements.css({'height': highestHeight});
      }
    };
    
    var alignWidths = function() {
      var maxWidth = 0, oldWidth, $visibleElements = $elements.filter(':visible');
      
      oldWidth = getMaxWidth($visibleElements);
      $visibleElements.width('auto');
      maxWidth = getMaxWidth($visibleElements);
      
      if(options.animate) {
        $visibleElements.css('width', oldWidth).animate({'width': maxWidth}, 250);
      } else {
        $visibleElements.css({'width': maxWidth});
      }
    };

    var getMaxHeight = function(elements) {
      var highestHeight = 0;
      elements.each(function(element){
        
        var element = $(this),
          element_height = element.height();
        
        if(highestHeight < element_height) {
          highestHeight = element_height;
        }
      });
      return highestHeight;
    };

    var getMaxWidth = function(elements) {
      var maxWidth = 0;
      elements.each(function(element){
        var element = $(this);
        var elementWidth = element.outerWidth();
        if (maxWidth < elementWidth) {
          maxWidth = elementWidth;
        }
      });
      return maxWidth + options.xDelta;
    };

    var resolveElements = function(alignIt) {
      // if elements that should be aligned use wrappers, then we use them
      if (options.elementWrapper) {
        $elements = $section.find(options.elementWrapper);
      } else {
        $elements = $section.children();
      }

      $section.find('img').on('load.' + this.namespace, alignIt);
    };

    // component initializer
    this.init = function($el) {
    
      $section = $el;
      options = this.options;
     
      // add a debounce time so resizing doesn't kill the browser
      var alignIt = $.debounce(alignHeights, options.debounceTime);
      var alignIt2 = $.debounce(alignWidths, options.debounceTime);

      // bind to a content reload custom event
      $section.on('contentReload', function(event) {
        resolveElements(alignIt);
        if (options.normalizeHeights) {
          alignHeights();
        }
        if (options.normalizeWidths) {
          alignWidths();
        }
      });

      resolveElements(alignIt);

      // bind the recalculation event
      if (options.normalizeHeights) {
        $window.on('resize', alignIt);
      }
      if (options.normalizeWidths) {
        $window.on('resize', alignIt2);
      }

      // recalculate when done
      if (options.normalizeHeights) {
        alignHeights();
      }
      if (options.normalizeWidths) {
        alignWidths();
      }
    };


    // component destroyer
    this.destroy = function($el) {
      // unbind events
      $window.off('resize');
      $section.children().find('img').off('load.' + this.namespace);
    };


  });
})(jQuery);
/*global $, jQuery, window, BrowserDetect*/

/**
 * TODO: refactor and cleanup. 
 * functionality is quire ok. 
 * - .adaptive-exclude' ?!? what is meaning of this. 
 * - just make it cleaner. 
 */


(function ($) {

  return $.plugin('adaptiveImages', function () {

    var _el,
      _images,
      _selector,
      _this,
      _currentUsableResolutions,
      _sizes = [],
      forceImageLoad = BrowserDetect.browser === 'Symbian' || window.location.search.indexOf("debugmode=screenshot") > 0,
      _window_height = 0;

    /*
     *   loops and collects available resolutions for current screen size
     */
    var resetCurrentMachingResolutions = function () {
      var i, _i, _len, size,
        width = viewport().width;
        
      _window_height = viewport().height;

      // reset old state
      _currentUsableResolutions = [];
      for (_i = 0, _len = _sizes.length; _i < _len; _i++) {
        size = _sizes[_i];
        if (width >= size.value) {
          _currentUsableResolutions.push(size.key);
        }
      }
      //pust original images to available resolutions as fallback image
      _currentUsableResolutions.push('original');

      // Set current breakpoint for tracking purposes
      for (i = 0; i < window.breakpoints.length; i++) {
        window.currentbreakpoint = window.breakpoints[i];
        if (width >= window.breakpoints[i]) {
          break;
        }
      }
    };

    /*
     *   Respond to onResize event
     */
    var onResize = function (adaptHiddenImages) {

      resetCurrentMachingResolutions();
      render(adaptHiddenImages);
    };

    /*
     *   public method to load adaptive images that are visible and run rerender.
     */
    var refresh = function () {
      initAdaptiveImages();
      return onResize();
    };

    /*
     *   just sort given sizes
     */
    var sortSizes = function (sizes) {
      return (sizes || []).sort(function (a, b) {
        return b.value - a.value;
      });
    };

    /*
     *  Bind needed events
     */
    var handleBindings = function () {
      // unbind old events if they exitst.  Use components common namespace to cleanup all events.
      $(window).off('resize.adaptiveImages');
      $(window).off('scroll.adaptiveImages');

      // bind events (again)
      $(window).on('resize.adaptiveImages', $.debounce(onResize, 500));
      $(window).on('scroll.adaptiveImages', $.debounce(onScroll, 300));

      PubSub.subscribe('image.added', refresh);
    };

    /*
     *   create selector string that is used to collect all adaptive images on page
     */
    var collectSelectors = function (sizes) {

      var selector_array = [],
        _i,
        _len;

      for (_i = 0, _len = sizes.length; _i < _len; _i++) {
        selector_array.push("img[data-" + sizes[_i].key + "]");
      }
      return selector_array.join(', ');
    };

    /* 
     *   Sets data-origin attribute for maching adaptive images.
     */
    var initAdaptiveImages = function () {
      // add data-origin attribute to all (adaptive) images
      $(_selector).filter(':not(img[data-original])').each(function () {
        return $(this).attr('data-original', $(this).attr('src'));
      });
      // collect images to variable for later use
      _images = $('img[data-original]');
    };

    /*
     *   Select larges image available on data-attributes for current resolution.
     *   If there's no any adaptive resolution available, use data-origin as fallback image.
     */
    var render = function () {
      var $img, image, prop, size, src, type, width, _i, _len, _j, _len1, _results;

      for (_i = 0, _len = _images.length; _i < _len; _i++) {
        image = _images[_i];
        $img = $(image);

        if ($img.is('.adaptive-exclude') === false) {

          for (_j = 0, _len1 = _currentUsableResolutions.length; _j < _len1; _j++) {
            type = _currentUsableResolutions[_j];
            src = $img.attr('data-' + type);
            if (src === undefined) {
              continue;
            }
            if ($img.attr('src') !== src && (imgShouldBeLoaded($img))) {
              $img.attr('src', src);
            }
            break;
          }
        }
      }
    };

    /*
     *   Check if image should be rendered.
     *   If client is symbian devise or is on viewport (or just under), render image.
     */
    var imgShouldBeLoaded = function (img) {

      var imagesTo, imgTop, _window;
      if (forceImageLoad) {
        return true;
      }
      _window = $(window);

      imgTop = Math.floor($(img).offset().top);
      imagesTo = viewport().height * 2 + _window.scrollTop();
      return imgTop < imagesTo ||  !$(img).is('.lazy');
    };

    /*
     *   Respond to onScroll event
     */
    var onScroll = function () {
      render();
    };

   

    /*
     *   plugin init method.
     */
    var initComponent = function (el) {
      _el = el;
      _this = this;

      _sizes = sortSizes(_this.options);

      _selector = collectSelectors(_sizes);

      if (_sizes === 0) {
        return;
      }
      // if symbian, dont even bind unused events
      if (!forceImageLoad) {
        handleBindings();
      }
      refresh();
    };

    /*
     *   plugin destroy method.
     */
    var destroyComponent = function (el) {
      $(window).off('resize.adaptiveImages');
      return $(window).off('scroll.adaptiveImages');
    };

    /*
     *   plugin methods.
     */
    return {
      init: initComponent,
      destroy: destroyComponent
    };

  });
})(jQuery);
(function($) {

  $.plugin('alignToMiddle', function() {

    var $window = $(window), $document = $(document), options, $section;

    this.options = {
      debounceTime: 150,
      minScreenWidth: 480,
      maxScreenWidth: 9999999
    };

    var align = function() {
      // return if screen size is out of range
      if(options.minScreenWidth && $document.width() <= options.minScreenWidth || options.maxScreenWidth && $document.width() >= options.maxScreenWidth) {
        $section.css({ 'top': 'auto', 'margin-top': 'auto' });
        return;
      } else {
        $section.css({ 'top': '50%', 'margin-top': -parseInt($section.outerHeight()/2, 10) + 'px' });
      }      
    };

    this.init = function($el) {
      $section = $el;
      options = this.options;
      var alignIt = $.debounce(align, options.debounceTime);
      $window.on('resize.' + this.namespace, alignIt).resize();
    };

    this.destroy = function($el) {
      $window.off('resize.' + this.namespace);
    };

  });

})(jQuery);
(function($) {

  $.plugin('autocomplete', function() {

    var _self = this,
        $el, 
        options = {
          input_trigger: '.quick-search-input',
          autocomplete_container: '.w-autocomplete',
          autocomplete_item: '.w-autocomplete-item',
          delay: 500,
          url: '/ajax/quick_search_autocomplete_results.html?q='
        },
        $input_trigger,
        $autocomplete_container,
        $autocomplete_item,
        searchString,
        $browserViewport = $(window),
        tabletLandscape = 767,
        timeout = null,
        specialKeyCodes = [27]; 

    var scrollToTop = function(e) {
      if(!$el.offset().top == 0 && $browserViewport.width() <= tabletLandscape){
        $('html,body').animate({scrollTop: $el.offset().top}, 'fast');
      }
    }

    // To push the variables to Site Catalyst
    var pushclickevent = function(e) {
      var link_id = I18n.get('quick_search', 'link_id');
      var id = this.id;
      utag.link({
        link_id : I18n.get('quick_search', 'link_id'),
        link_text : I18n.get('quick_search', 'link_text'),
        searchTerm : I18n.get('quick_search', 'searchTerm'),
        searchResults : I18n.get('quick_search', 'searchResults'),
        searchType : I18n.get('quick_search', 'searchType'),
        searchResultsPosition : id,
        linkEvent : I18n.get('quick_search', 'linkEvent')
      });
    }

    var delayCall = function(e) {

      if($.inArray(e.keyCode, specialKeyCodes) > -1 ){
        hideAutocomplete();
      } else {
        if(timeout){
          clearTimeout(timeout);
        }
        if (e.keyCode != 40 && e.keyCode != 38){
          timeout = setTimeout(getResults(e), options.delay);
        }

      }
    }

    var getResults = function() {
      
      // Get search string
      searchString = $.trim($input_trigger.val().toLowerCase());

      // Do we need to replace the spaces with "+"?
      // searchString = searchString.replace(/\s+/g, '+');

      if(!searchString) {
        hideAutocomplete();
      } else {
        showAutocomplete();
        $.get(options.url + searchString, function (data) {
          $autocomplete_container.empty().append(data);
        });
      }
    }

    var showAutocomplete = function() {
      if(!$autocomplete_container.is(':visible')) {
        $autocomplete_container.slideDown();

      }
    }

    var hideAutocomplete = function() {
      if($autocomplete_container.is(':visible')) {
        $autocomplete_container.slideUp();
      }
    }

    var navigatetolink = function(e) {
      if (e.keyCode == 13){
        var $listItems = $autocomplete_container.find('ul.w-autocomplete-items li.w-autocomplete-item');
        var $selected = $listItems.filter('.selected');
        var $anchor = $selected.find('a');
        if($anchor.eq(0).attr('href') === undefined){
          $input_trigger.trigger();
        }else{
          if ($anchor.length > 1){
            window.location.href = $anchor.eq(0).attr('href');
          }else{
            window.location.href = $anchor.attr('href');
          }
        }
        return false;
      }
    }

    var arrowNavigation = function(e){
      if (e.keyCode == 40 || e.keyCode == 38){
        var $autocomplete_items = $autocomplete_container.find('ul.w-autocomplete-items li.w-autocomplete-item');
        var $selected = $autocomplete_items.filter('.selected'),$current;
        $autocomplete_items.removeClass('selected');
        var current_index = $autocomplete_items.index($current);
        // Down key
        if (e.keyCode == 40){
         if ( ! $selected.length || $selected.is(':last-child') ) {
            $current = $autocomplete_items.eq(0);
          }
          else {
            $current = $selected.next();
          }
          //$current = $autocomplete_items[current_index +1] || $autocomplete_items[0] ;
        }
        // Up key
        else if (e.keyCode == 38) {
          if ( ! $selected.length || $selected.is(':first-child') ) {
            $current = $autocomplete_items.last();
          }
          else {
            $current = $selected.prev();
          }
          //$current = $autocomplete_items[current_index -1] || $autocomplete_items[$autocomplete_items.size()-1] ;
        }

        $current.addClass('selected');
      }

    };

    var bindEvents = function() {
      $el.on('keyup.' + this.namespace, options.input_trigger, delayCall);
      $el.on('blur.' + this.namespace, options.input_trigger, hideAutocomplete);
      $el.one('focus.' + this.namespace, options.input_trigger, scrollToTop);
      $el.on('click.' + this.namespace, options.autocomplete_item, pushclickevent);
      $el.on('keypress.' + this.namespace, options.input_trigger, navigatetolink);
      $el.on('keyup.' + this.namespace, options.input_trigger , arrowNavigation);
    }

    var unbindEvents = function() {
      $el.off('keyup.' + this.namespace, options.input_trigger, getResults);
      $el.off('blur.' + this.namespace, options.input_trigger, hideAutocomplete);
      $el.off('click.' + this.namespace, options.autocomplete_item, pushclickevent);
    }
 
    var collectElements = function() {
      $input_trigger = $el.find( options.input_trigger );
      $autocomplete_container = $el.find( options.autocomplete_container );
    }

    var setDefaults = function() {
    }

    this.init = function(el) {
      
      $el = $(el);
      $.extend(options, this.options);
      collectElements();
      bindEvents();
      setDefaults();

    };
  
    this.destroy = function($el) {
      unbindEvents();
    };

 
  });
})(jQuery);
/*global $, jQuery, App*/


window.App = window.App || {};
window.App.Plugin = window.App.Plugin || {};
window.App.Plugin.CatalogFilterCheckboxes = function CatalogFilterCheckboxes($, win) {

  return function () {

    // (function($) {

    //   $.plugin('catalogFilterCheckboxes', function() {

    var
    _self = this,
      $el,
      default_options = {
        filter_link_class: 'w-filter-checkboxes-item' // used to find link inside component
      },
      $filter_links = [], // list for found links
      $filtered_by_rules; // component label that shows selected filters

    // handle option clicks 
    this.handleFilterClick = function (e) {

      e.preventDefault();
      e.stopPropagation();

      var $this = $(this);
      // flip-flop for selection value
      this.is_filter_selected = this.is_filter_selected ^ 1;
      // update class to style enhansed checkbox
      $this.find('.enh-checkbox-wrapper').toggleClass('enh-checkbox-selected', this.is_filter_selected);
      // update states
      // updateHistoryState(this);
      _self.updateFilterRulesDisplay();
      $el.trigger('catalog_filter_change');
    };

    // get state from borwser url and set selections based on that
    this.updateSelectionsFromState = function () {

      var _state = HistoryUlrHelper.getStateFromUrlParams(),
        is_selected;

      $filter_links.each(function () {
        is_selected = !! _state[this.filter_name];
        $(this).find('.enh-checkbox-wrapper').toggleClass('enh-checkbox-selected', is_selected);
        this.is_filter_selected = is_selected;
      });
      _self.updateFilterRulesDisplay();
    };

    // show selections on components caption
    this.updateFilterRulesDisplay = function () {

      var new_text = [],
        selected_filters = $filter_links.find('.enh-checkbox-selected strong');

      if (selected_filters.length > 0) {
        selected_filters.map(function () {
          new_text.push($(this).text());
        });
        $filtered_by_rules.text(new_text.join(', '));
      }
      else {
        $filtered_by_rules.text('');
      }
    };

    // bind all event that plugin needs
    this.bindEvents = function () {
      $filter_links.on('click.' + this.namespace, this.handleFilterClick);
      $(window).on('popstate.' + this.namespace, this.updateSelectionsFromState);
    };

    // unbind all event that plugin needs
    this.unbindEvents = function () {
      $filter_links.off('click.' + this.namespace);
      $(window).off('popstate.' + this.namespace);
    };

    // collect all needed elements that plugin uses
    this.collectElements = function () {
      $filter_links = $el.find('.' + this.options.filter_link_class);
      $filter_links.each(function () {
        this.filter_name = $(this).data('filter');
      });
      $filtered_by_rules = $el.find('.filtered-by');
    };

    // set elements on plugin / components as defaults state
    this.setDefaults = function () {
      
      var is_selected,
        _state = HistoryUlrHelper.getStateFromUrlParams();
      
      this.updateFilterRulesDisplay();
      $filter_links.each(function () {
        is_selected = !! _state[this.filter_name];
        $(this).find('.enh-checkbox-wrapper').toggleClass('enh-checkbox-selected', is_selected);
        this.is_filter_selected = is_selected;
      });
    };

    this.init = function (el) {

      $el = $(el);

      this.options = $.extend({}, default_options, this.options);

      this.collectElements();
      this.bindEvents();
      this.setDefaults();
    };

    this.destroy = function ($el) {
      this.unbindEvents();
    };
  };
};

jQuery.plugin('catalogFilterCheckboxes', window.App.Plugin.CatalogFilterCheckboxes(jQuery, $(window), HistoryUlrHelper));
/*global $, jQuery, App*/


window.App = window.App || {};
window.App.Plugin = window.App.Plugin || {};
window.App.Plugin.CatalogSortOrder = function CatalogSortOrder($, win) {

  return function () {

    var $el,
      _self = this,
      option_defaults = {
        sort_order_class_name: 'w-filter-select-option',
        selected_option_class: 'selected'
      },
      $sort_by_links = [],
      $sorted_by,
      $toggle_trigger,
      $selected_input;

    // handle option clicks 
    this.handleControlClick = function (e) {

      e.preventDefault();

      var $this = $(this);

      _self.setSelected($this);
      _self.closeOptions();
      $el.trigger('catalog_filter_change');
    };

    // handle option selection
    this.setSelected = function (option) {
      _self.updateLinkClasses(option);
      $sorted_by = option;
      $selected_input.val($sorted_by.data('sort-order'));
      _self.updateSortedByDisplay();
    };

    this.closeOptions = function () {
      $(document).trigger('catalog_list_change');
    };

    // make all class changes on selection click
    this.updateLinkClasses = function (option) {

      $sort_by_links.removeClass(_self.options.selected_option_class);
      option.addClass(_self.options.selected_option_class);
    };

    // Update selection text on component caption
    this.updateSortedByDisplay = function () {
      $el.find('span.sorted-by').text($.trim($sorted_by.text()));
    };

    // listens history popstate event to set selection same as url params  
    this.updateSelectionsFromState = function (e) {
      var selected, sorted_by,
        param = window.location.search.match(/order_by=(.*?)(?:$|\&)/),
        markup = $sort_by_links.filter('.selected').first();
      if(e && e.originalEvent.state) {
        sorted_by = e.originalEvent.state.order_by;
      } else if (param) {
        sorted_by = param[1];
      } else if (markup) {
        sorted_by = markup.data('sort-order');
      } else {
        $sort_by_links.first().data('data-sort-order');
      }
      selected = $sort_by_links.filter('[data-sort-order=' + sorted_by + ']').first();
      _self.setSelected(selected);
    };

    // bind all event that plugin needs
    this.bindEvents = function () {
      $sort_by_links.on('click.' + this.namespace, this.handleControlClick);
      $(window).on('popstate.' + this.namespace, this.updateSelectionsFromState);
    };

    // unbind all event that plugin needs
    this.unbindEvents = function () {
      $sort_by_links.off('click.' + this.namespace);
      $(window).off('popstate.' + this.namespace);
      $(document).off('click.' + this.namespace);
    };

    // collect all needed elements that plugin uses
    this.collectElements = function () {

      $sort_by_links = $el.find('.' + this.options.sort_order_class_name);
      $toggle_trigger = $el.find('.enh-toggle');
      $selected_input = $el.find(this.options.selected_input);
    };

    this.init = function (el) {

      $el = $(el);

      this.options = $.extend({}, option_defaults, this.options);

      this.collectElements();
      this.bindEvents();

      // at last update selection
      this.updateSelectionsFromState();
    };

    this.destroy = function ($el) {
      this.unbindEvents();
    };

  };
};

jQuery.plugin('catalogSortOrder', window.App.Plugin.CatalogSortOrder(jQuery, $(window)));
/*global jQuery, App*/


window.App = window.App || {};
window.App.Plugin = window.App.Plugin || {};
window.App.Plugin.CatalogSwitch = function CatalogSwitch($, win) {

  return function () {
    'use strict';

    var
    _self = this,
      $el,
      option_defaults = {
        option_links: '.view-type',
        selected_input: '.selected-input'
      },
      $selected_input,
      $inputs;

    this.handleTypeClick = function (e) {

      e.preventDefault();

      var state,
        input_name = $selected_input.attr('name');
      // get state
      state = HistoryUlrHelper.getState();
      state[input_name] = $(e.currentTarget)
        .data('option-value');
      window.location = '?' + _self.createParamsFromHash(state);
    };

    this.createParamsFromHash = function (hash) {
      var params_array = [];

      if (!hash) return '';

      $.each(hash, function (key, value) {
        params_array.push(key + '=' + value);
      });
      return params_array.join('&');
    }; 

    /**
     * All event binding belong to here
     * @return {undefined} 
     */
    this.bindEvents = function () {
      $el.on('click.' + this.namespace, this.options.option_links, this.handleTypeClick);
    };

    /**
     * All event unbinding belong to here
     * @return {undefined} 
     */
    this.unbindEvents = function () {
      $el.on('click.' + this.namespace, this.options.option_links);
    };

    // grap all elemnts that are static on page whole page lifetime 
    this.collectElements = function () {

      $selected_input = $el.find(this.options.selected_input);
      $inputs = $el.find(this.options.option_links);
    };

    this.init = function (el) {

      if (!el) { // return if nothings happening
        return;
      }

      $el = $(el);
      this.options = $.extend({}, option_defaults, this.options);

      this.collectElements();
      this.bindEvents();
      $el.show();
    };

    this.destroy = function ($el) {
      this.unbindEvents();
    };
  };
};

jQuery.plugin('catalogSwitch', window.App.Plugin.CatalogSwitch(jQuery, window));
/*global viewport, jQuery, window, App*/

/**
 * This plugin is simple content viewer that collects some parts from page and shows then in overlay.
 * It has been create for Pass It On campaign and works quite well.
 *
 * TODO's
 * - write some handler that align images vertically
 *
 */


App.namespace('Plugin.ContentPlatformOverlay', function (namespace) {

  namespace.ContentPlatformOverlay = function ContentPlatformOverlay($, win) {

    return function () {
      'use strict';

      var
      _self = this,
        $el,
        $template,
        $modalBox,
        $modalBoxWrapper,
        currentIndex = 0,
        currentScreenWidth = 0,
        optionDefaults = {
          min_resolution: 480,
          content: '.gallery-page-image-item',
          gallery_image_m: 'data-gallery-image-m',
          gallery_image_l: 'data-gallery-image-l',
          template: ['<div class="image-viewer">',
            '<div class="image-viewer-modal-box">',
            '    <div class="image-viewer-modal-box-wrapper">',
            '    </div>',
            '     <a class="tap-area prev" href="#prev"><div class="tap-area-controller"></div></a>',
            '     <a class="tap-area next" href="#next"><div class="tap-area-controller"></div></a>',
            '  </div>',
            '</div>'
          ].join('')
        };

      /**
       * Handler for image viewer trigger click.
       * This should show overlay viewer when trigger has been clicked.
       * @param  {Event} e 'click' event
       * @return {undefined}
       */

      this.showImageViewer = function (e) {

        e.preventDefault();

        if (viewport().width >= _self.options.min_resolution) {

          var tile = $(e.currentTarget);

          // Set temp height to modal box, because we don't know image height yet
          _self.tempHeight(tile);

          // Vertically center modal box
          _self.centerModalBox($modalBox);

          // Pass item/image container index number to function
          _self.setCurrentContent($el.find(_self.options.content).index(tile));
        }
      };

      this.tempHeight = function (target) {
        var $image = target,
          modalBoxPadding = parseInt($modalBox.css('padding').replace('px', '') * 2, 10),
          modalBoxTargetWidthPx = (viewport().width * 0.8) - modalBoxPadding,
          modalBoxTargetHeightPx = (viewport().height * 0.8) - modalBoxPadding,
          modalBoxTargetWidthPercent = modalBoxTargetWidthPx / viewport().width,
          percentage,
          tempHeight;

        // If modal box contains a previously loaded image,
        // hide modal box wrapper, so that we don't see the wrong image
        if ($modalBoxWrapper.find(_self.options.img)[0] !== undefined) {
          $modalBoxWrapper.fadeTo(0, 0);
        }

        // Set modal box width to target width
        $modalBox.css('width', (modalBoxTargetWidthPercent * 100) + '%');

        // Calculate a percentage value, 
        // so that we can calculate temp height
        percentage = $image.width() / modalBoxTargetWidthPx;

        // Calculate temp height
        tempHeight = Math.round($image.height() / percentage);

        // Check if temp height is bigger than viewport height
        if (tempHeight >= viewport().height || $image.is('.portrait')) {
          // Set max modal box height
          $modalBox.height(modalBoxTargetHeightPx);
        }
        else {
          // Set temp height
          $modalBox.height(tempHeight);
        }

        // Vertically center modal box
        _self.centerModalBox($modalBox);
      };

      this.hideImageViewer = function (e) {
        // Do not close overlay, when child elements are clicked
        if (e.target !== this) {
          return;
        }
        $template.fadeOut();
      };

      this.handleControlClick = function (e) {
        e.preventDefault();
        e.stopPropagation();
        var $target = $(e.currentTarget),
          index,
          nextTile,
          totalTiles = _self.totalTiles();

        // Calculate new index value
        if ($target.is('.next')) {
          index = currentIndex + 1;
        }
        else if ($target.is('.prev')) {
          index = currentIndex - 1;
        }

        // Check if index is within range
        if (index >= 0 && index < totalTiles) {

          nextTile = $($el.find(_self.options.content).eq(index)[0]);

          _self.tempHeight(nextTile);

          _self.setCurrentContent(index);
        }

      };

      this.handleControlVisibility = function (index) {
        var $target,
          totalTiles = _self.totalTiles();

        // Indentify controller
        if (index <= 0) {
          $target = $($el.find('.prev'));
        }
        else if (index >= totalTiles - 1) {
          $target = $($el.find('.next'));
        }

        // Disable/enable buttons
        if ($target) {
          $target.hide();
        }
        else {
          $el.find('.tap-area').show();
        }
      };

      this.totalTiles = function () {
        return $el.find(_self.options.content).length;
      };

      this.setCurrentContent = function (index) {

        var original_content = $($el.find(_self.options.content)[index]),
          cloned_content = original_content.clone();

        // If index is out of range, just return 
        if (cloned_content === undefined || cloned_content.length === 0) {
          return;
        }

        _self.handleControlVisibility(index);

        // If template = image viewer is not visible,
        // show it
        if (!$template.is(':visible'))
          $template.fadeIn();

 
        // Hide container wich wraps image, caption and description
        $modalBoxWrapper.css('opacity', '').addClass('fadedOut').delay(500).queue(function (next) {
          // Replace container content with cloned content
          $modalBoxWrapper.clearQueue().html(cloned_content.html()).removeClass('fadedOut');

          _self.scrollToContent(original_content);
          // setTimeout(_self.preloadImages, 300); // give some time to current image to load
          currentIndex = index;
          next();
        });
      };


      this.centerModalBox = function (target) {
        var $target = target,
          $modalBox = $el.find('.image-viewer-modal-box'),
          newTopPosition = ((viewport().height - (16 * 2)) - $target.height()) / 2;

        // Set new top position
        $modalBox.css({
          'top': newTopPosition
        });
      };

      this.scrollToContent = function (content) {
        var $content = $(content),
          scrollTo = $content.offset().top - viewport().height / 2 + $content.height() / 2;

        $('html, body')
          .delay(500)
          .stop()
          .animate({
            scrollTop: scrollTo
          }, 300);
      };

      this.getImageUrlAttributeName = function () {
        return currentScreenWidth > 800 ? _self.options.gallery_image_l : _self.options.gallery_image_m;
      };
        

      this.updateScreenWidth = function () {

        currentScreenWidth = viewport().width;
        _self.centerModalBox($modalBox);
      };

      this.collectElements = function () {
        $template = $(this.options.template).hide();
        $modalBox = $template.find('.image-viewer-modal-box');
        $modalBoxWrapper = $template.find('.image-viewer-modal-box-wrapper');
        $el.append($template);

        this.updateScreenWidth();
      };

      this.bindEvents = function () {

        // prevent lint event to sink and let then wors as they should.
        $el.on('click.' + this.namespace, 'a', function(e) { e.stopPropagation(); });
        
        $el.on('click.' + this.namespace, this.options.content, this.showImageViewer);
          
        $el.on('click.' + this.namespace, '.image-viewer', this.hideImageViewer);
        $el.on('click.' + this.namespace + ' touchstart.' + this.namespace, '.tap-area', this.handleControlClick);
        $(window).on('resize.' + this.namespace, $.debounce(this.updateScreenWidth, 500));
      };

      this.unbindEvents = function () {

        $el.off('.' + this.namespace);
      };

      this.init = function (el) {

        if (!el) { // return if nothings happening
          return;
        }

        $el = $(el);
        this.options = $.extend({}, optionDefaults, this.options);
        this.collectElements();
        this.bindEvents();

        $el.show();

      };

      this.destroy = function ($el) {
        this.unbindEvents();
      };
    };
  };

  jQuery.plugin('contentPlatformOverlay', namespace.ContentPlatformOverlay(jQuery, window));
});
(function($) {

  $.plugin('hideContent', function() {
    
      var options,
          $componentRoot,
          $content,
          $seeAllBlock,
          contentHidden,
          contentOriginalHeight,
          heightTreshold;

      this.options = {
        heightTresholdPixels: '200',    // height treshold to hide content in pixels
        heightTresholdLines: '4',  // height treshold to hide content in lines of text (default)
        debounceTime: 200
      };

      var hideBlock = function() {
        // determines based on content and settings what is the height of visible area
        // preferring line height of the content
        contentOriginalHeight = $content.find('p').outerHeight();
        var contentLineHeight = parseFloat($content.find("p").css("line-height"));
        
        if (contentLineHeight > 0) {
          heightTreshold = Math.round(contentLineHeight * options.heightTresholdLines);
        } else {
          heightTreshold = options.heightTresholdPixels;
        }
        // hide part of content if treshold exeeded
        if (contentOriginalHeight > heightTreshold) {
          $content.css("overflow", "hidden");
          createControl();
        } else {
          removeControl();
        }
      };

      var createControl = function() {
        if($componentRoot.has('.see-all-block').length > 0) return;

        $content.parent().append($seeAllBlock);
        hideThing();
        $seeAllBlock.on('click', function(event) {
          if (contentHidden) {
            showThing();
          } else {
            hideThing();
          }
        });
      };

      var removeControl = function() {
        if($componentRoot.has('.see-all-block').length > 0) $componentRoot.find('.see-all-block').remove();
      };

      var hideThing = function() {
          $content.animate({
            height: heightTreshold
          }, 250, "easeInOutQuart", function() {
            $seeAllBlock.text(I18n.get('content_hider', 'see_all'));
            contentHidden = true;
          });   
      };

      var showThing = function() {
          $content.animate({
            height: contentOriginalHeight
          }, 250, "easeInOutQuart", function() {
            $seeAllBlock.text(I18n.get('content_hider', 'hide'));
            contentHidden = false;
          });  
      };

      this.init = function($el) {
        $componentRoot = $el;
        options = this.options;
        $content = $componentRoot.find(".content");
        contentHidden = false;
        //contentOriginalHeight = $content.outerHeight();
        $seeAllBlock = $("<a class='content see-all-block' href='javascript: void(0);'>"+I18n.get('content_hider', 'see_all')+"</a>");

        hideBlock();
        var hideBlockDebounce = $.debounce(hideBlock, options.debounceTime);
        $(window).on('resize.' + this.namespace, hideBlockDebounce);

      };
      
      this.destroy = function($el) {
        $(window).off('resize.' + this.namespace);
      };

  })
})(jQuery);
(function() {
  App.namespace('Plugin.ContentPlatformTimeline', function(namespace) {
    namespace.ContentPlatformTimeline = function($, win) {
      return function() {
        var getRandomInt, layerTiles, moveSingleTile, variateFollowingSimilarElements,
          _this = this;
        this.defaultOptions = {
          selectedClass: 'selected',
          timelineItem: '.content-platform-timeline-item',
          timelineTileGroup: '.content-platform-timeline-tile-group',
          timelineTile: '.content-platform-timeline-tile',
          filterByInputId: 'timelineFilteredBy',
          contentPlatformNextPagemUrl: '/ajax/fightclub/paginage_timeline.html?url_should_come_from_data_attribute=true',
          tileLayerCount: 3,
          minBlendingWidth: 1280
        };
        this.isLecasyIE = BrowserDetect.browser === 'Explorer' && BrowserDetect.version < 9;
        /**
         *  loadingPage,
         *  externalLinkClicked: '',
         *  isError: ''
        */

        this.sendTracking = function(params) {
          var defaults;
          defaults = {
            link_id: window.location,
            linkEvent: 'request',
            link_text: 'content platform: '
          };
          return utag.link($.extend(defaults, params));
        };
        /**
         * set selected value as given. 
         * @param  {String}   value   selected filter value
         * @return {undefined}
        */

        this.changeSelectedFilter = function(value) {
          _this.noMoreresults = false;
          _this.page = 0;
          _this.filterValue.val(value);
          _this.el.find(_this.options.timelineItem).remove();
          return _this.createRequest();
        };
        /**
         * update html elements as selected state
         * @param  {String} value selected value
         * @return {undefined}
        */

        this.updateFilterElements = function(value) {
          _this.filterLinks.removeClass(_this.options.selectedClass);
          return $("[data-filter-value=" + "]").addClass(_this.options.selectedClass);
        };
        /**
         * Scroll event handler. This should be called through some debounce function. 
         * @return {undefined}
        */

        this.handleScroll = function() {
          return _this.handleInfinitScroll();
        };
        /**
         * Handler for sticky navigation updates
         * @return {undefined}
        */

        this.handleScrollNavigation = function() {
          var content, keys, match, windowTop;
          windowTop = $(window).scrollTop();
          keys = Object.keys(_this.dayItemPositions);
          match = keys.filter(function(i) {
            return i < windowTop;
          });
          content = _this.dayItemPositions[match[match.length - 1]];
          if (content) {
            return _this.getNavigationBar().find('.content-platform-timeline-item-header-time').html(content.clone());
          }
        };
        /**
         * Trigger load more results if needed
         * @return {undefined}
        */

        this.handleInfinitScroll = function() {
          var lastItemBottom, last_item, windowBottom;
          if (_this.loadingMore) {
            return;
          }
          last_item = $(_this.options.timelineItem + ':last');
          lastItemBottom = last_item.offset().top + last_item.height() - viewport().height * 2;
          windowBottom = $(window).scrollTop() + viewport().height;
          if (lastItemBottom < windowBottom) {
            return _this.createRequest();
          }
        };
        /**
         * Load mode content to page
         * Should get load-more url and page number and create ajax call based on that.
         * @return {undefined}
        */

        this.createRequest = function() {
          if (!/page\=[\d']/.exec(_this.options.contentPlatformNextPagemUrl)) {
            return;
          }
          _this.showLoadingNotification();
          return _this.requestResultsWithParams(_this.addResultsToPage);
        };
        /**
         * create request and execute given callback funtion
         * @param  {String}   params string that is like "param1=1&param2=2"
         * @param  {Function} done   callback function
         * @return {undefined}
        */

        this.requestResultsWithParams = function(done) {
          _this.sendTracking({
            linkEvent: 'load more',
            link_text: 'content platform: loading next page',
            loadingPage: _this.options.contentPlatformNextPagemUrl
          });
          _this.loadingMore = true;
          return $.ajax({
            url: _this.options.contentPlatformNextPagemUrl
          }).done(done).fail(_this.notifyError);
        };
        /**
         * Bind ajax loaded videos to video trigger
        */

        this.bindVideo = function() {
          return $("a.overlay-video-trigger").each(function(index, element) {
            if (!$(element).data('defaultVideoOverlay')) {
              return $(element).defaultVideoOverlay();
            }
          });
        };
        /**
         * Publish error message
         * @return {undefined}
        */

        this.notifyError = function(jqXHR, textStatus) {
          PubSub.publish('notifications.error', {
            description: I18n.get('notifications', 'somethign_went_wrong')
          });
          return _this.sendTracking({
            linkEvent: 'load more error',
            link_text: 'content platform: ' + textStatus,
            errorMessage: 'content platform: ' + textStatus
          });
        };
        /**
         * Query result from given response and add that to page
         * @param {HTML markup} response
        */

        this.addResultsToPage = function(response) {
          var newItems;
          _this.options.contentPlatformNextPagemUrl = $(response).filter('.content-platform-timeline').first().data('loadmore');
          newItems = $(response).find(_this.options.timelineItem);
          $.map(newItems, function(item) {
            var existintDay;
            existintDay = _this.el.children().filter("#" + item.id);
            if (existintDay.length > 0) {
              return existintDay.find('.content-platform-timeline-tile-group').append($(item).find('.content-platform-timeline-tile-group').children());
            } else {
              return _this.el.append(item);
            }
          });
          $('.content-platform-timeline-tile-caption a').attr("target", "_blank");
          _this.bindVideo();
          _this.loadingMore = false;
          _this.updateHeaderPositions();
          return _this.updateTileBlending();
        };
        /**
         * Publish loading message
         * @return {undefined}
        */

        this.showLoadingNotification = function() {
          return PubSub.publish('notifications.error', {
            description: I18n.get('notifications', 'loading_more_content'),
            disposeDelay: 1500
          });
        };
        /**
         * Get all item positions and store then for later use on sticky navigation updates. 
         * It stores result as key-value pairs. 
         * example:
         *   {
         *     100: htmlElement1, 
         *     250: htmlElement2, 
         *     700: htmlElement3 
         *   }
         * @return {undefined}
        */

        this.updateHeaderPositions = function() {
          var item, _i, _len, _ref;
          _this.dayItemPositions = [];
          _ref = $(_this.options.timelineItem);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _this.dayItemPositions[$(item).offset().top] = $(item).find('.content-platform-timeline-item-header-time');
          }
          return _this.dayItemPositions;
        };
        /**
         * Collect all element that we need to cache for later use
         * @return {undefined}
        */

        this.collectElements = function() {
          this.filterLinks = $('.content-platform-timeline-filter-item');
          this.filterValue = $("" + this.options.filterByInputId)[0];
          return this.navigationBar = this.getNavigationBar();
        };
        /**
         * return cached navigtion bar if already found.
         * @return {jQuery object} navigation bar
        */

        this.getNavigationBar = function() {
          if (!_this.navigationBar || _this.navigationBar.length === 0) {
            _this.navigationBar = $('#aside-navigation-clone-container');
          }
          return _this.navigationBar;
        };
        /**
         * Blend tiles if needed
         * @return {undefined}
        */

        this.updateTileBlending = function() {
          var legacyIE;
          legacyIE = BrowserDetect.browser === 'Explorer' && BrowserDetect.version <= 8;
          if (legacyIE || viewport().width < _this.options.minBlendingWidth) {
            return _this.unblendTiles();
          } else {
            return _this.blendTiles();
          }
        };
        /**
         * Unblend tiles
         * @return {undefined}
        */

        this.unblendTiles = function() {
          _this.el.find(_this.options.timelineTileGroup).removeClass('blended');
          return _this.el.find(_this.options.timelineTile).css({
            transform: "",
            margin: '',
            top: '',
            left: ''
          });
        };
        /**
         * Go thourgh all tiles that haven been blended already and blend those. 
         * @return {undefined} ]
        */

        this.blendTiles = function() {
          var groups;
          groups = _this.el.find(_this.options.timelineTileGroup + ':not(.blended)');
          $.each(groups, function() {
            var tiles;
            tiles = $(this).find(_this.options.timelineTile);
            $.map(tiles, moveSingleTile);
            $.map(tiles, variateFollowingSimilarElements());
            return $.map(tiles, layerTiles('tile-layer-', _this.options.tileLayerCount));
          });
          return groups.addClass('blended');
        };
        /**
         * Function takes tiles and checks if there is similar tiles as a siblings. 
         * If there is, it scales tile so they dont look to similar.
         * @return {undefined}
        */

        variateFollowingSimilarElements = function() {
          var elClasses, margin, scale;
          elClasses = '';
          scale = 0;
          margin = 0;
          return function(tile) {
            var _tile;
            if (tile.getAttribute('class') === elClasses) {
              _tile = $(tile);
              scale = getRandomInt(65, 90) / 100;
              margin = Math.floor(_tile.outerWidth() * scale) * -1 / 5;
              _tile.css({
                transform: "scale(" + scale + ", " + scale + ")",
                margin: margin
              });
            }
            return elClasses = tile.getAttribute('class');
          };
        };
        /**
         * Gives layer class name for all tiles based on given layer count and class prefix
         * @param  {String} class_name  prefix for generated class name
         * @param  {Integer} layer_count value that will be looped
         * @return {undefined}
        */

        layerTiles = function(class_name, layer_count) {
          var i;
          i = -1;
          return function(tile) {
            i++;
            if (i % layer_count > 0) {
              return $(tile).addClass("" + class_name + (i % layer_count));
            }
          };
        };
        /**
         * Hepler that generates randon integer in given limits
         * @param  {Integer} min value for rnd int
         * @param  {Integer} max value for rnd int
         * @return {Integer}     randon int in given limits
        */

        getRandomInt = function(min, max) {
          return Math.floor(Math.random() * (max - min + 1)) + min;
        };
        /**
         * Helper for tile blending. Adds some offset for given tile. 
         * @param  {HTML Element} tile that should be moved
         * @return {undefined}
        */

        moveSingleTile = function(tile) {
          return $(tile).css({
            'position': 'relative',
            'top': getRandomInt(-50, 50) + 'px',
            'left': getRandomInt(-50, 50) + 'px'
          });
        };
        /**
         * Bind all event that we need for plugin to work
         * @return {undefined}
        */

        this.bindEvents = function() {
          var _ref;
          $(window).on("scroll." + this.namespace, $.debounceScroll(this.handleScroll, 500));
          $(window).on("scroll." + this.namespace, $.debounceScroll(this.handleScrollNavigation, (_ref = this.isLecasyIE) != null ? _ref : {
            500: 100
          }));
          $(window).on("scroll." + this.namespace, $.debounceScroll(this.updateHeaderPositions, 2000));
          if (!this.isLecasyIE) {
            return $(window).on("resize." + this.namespace, $.debounce(this.updateTileBlending, 500));
          }
        };
        /**
         * Plugin interface method to be called when plugin in attached to some element
         * @param  {HTML element} el element to be used as root element for plugin
         * @return {undefined}
        */

        this.init = function(el) {
          if (el.length === 0) {
            return;
          }
          this.el = el;
          this.options = $.extend({}, this.defaultOptions, {
            contentPlatformNextPagemUrl: this.el.data('loadmore')
          }, this.options);
          this.collectElements();
          this.bindEvents();
          this.updateHeaderPositions();
          this.updateTileBlending();
          return $('.content-platform-timeline-tile-caption a').attr("target", "_blank");
        };
        /**
         * Plugin interface method to be called when plugin in removed from some element
         * @param  {HTML element} el element that has been used as root element for plugin
         * @return {undefined}
        */

        this.destroy = function(el) {
          $('.content-platform-timeline-filter').off("." + this.namespace);
          return $(window).off("." + this.namespace);
        };
        /**
         * Return this instance so jquery.plugin can find init and destroy methods
        */

        return this;
      };
    };
    return jQuery.plugin('contentPlatformTimeline', namespace.ContentPlatformTimeline(jQuery, window));
  });

}).call(this);
(function($) {

  $.plugin('cookieNotification', function() {

    var $window = $(window), options, $section;

    this.options = {
      killDuration: 500,
      killDelay: 250,
      killIdleDelay: 1000 * 60 * 1.5,
      useKillIdle: false,
      policyCookieName: "nokia_cookiepolicy",
      killCallback: $.Callbacks(),
      policyCookieUrl: null
    };

    var cookiesEnabled = function() {
     var isEnabled = (navigator.cookieEnabled) ? true : false;
     if (typeof navigator.cookieEnabled == "undefined" && !isEnabled)
      { 
      document.cookie="check_if_cookie_enabled";
      isEnabled = (document.cookie.indexOf("check_if_cookie_enabled") != -1) ? true : false;
      }
     return (isEnabled);
    };

    var getAcceptance = function() {
      if($.cookies.get(options.policyCookieName)) {
        return $.cookies.get(options.policyCookieName);
      } else {
        return false;
      }
    };

    var startKillMeTimer = function() {
      $.delay.apply(this, [killMe, options.killIdleDelay]);
    };

    var killMe = function() {
      var expiryDate = new Date();
      var cookieOptions = {
        domain: '.nokia.com',
        expiresAt: expiryDate
      }
      expiryDate.setTime(expiryDate.getTime() + (1000 * 365 * 86400));
      $.cookies.set(options.policyCookieName, "11111111", cookieOptions);
      $("#cookie-notification").animate({ 'height': '0' }, options.killDuration, 'easeInOutQuart', function() {
       $("#cookie-notification").remove();
        options.killCallback.fire();
      });
    };

    var openPolicyCookieUrl = function() {
      window.location = options.policyCookieUrl;
    }

    this.init = function($el) {
      $section = $el;
      options = this.options;
      // TODO: Add separate condition for true and false based on legal requirementa
      // TODO: refactor that horrible i18n stuff out
      var enabled_to_this_country=I18n.get('cookiedisclaimer','cookie_policy_ipdetection_is_on_active_list');
      if(!getAcceptance() && enabled_to_this_country===true && cookiesEnabled() ) {
        var content = $('#cookie-notification').remove();
        content.show();
        $('#container').prepend(content);
        content.on('click', 'a', function(event) {
          options.killCallback.add(openPolicyCookieUrl);
          options.policyCookieUrl = $(this).attr('href');
          $.delay.apply(this, [killMe, options.killDelay]);
          event.preventDefault();
        });
        if (options.useKillIdle) {
          startKillMeTimer();
        }
      }
    };

    this.destroy = function($el) {
    };

  });

})(jQuery);
(function() {
  jQuery.plugin('countdown', function() {
    var _this = this;
    this.second = 1000;
    this.minute = this.second * 60;
    this.hour = this.minute * 60;
    this.timer = void 0;
    this.defaultOptions = {};
    this.showRemaining = function() {
      var distance, hours, minutes, now, seconds;
      now = new Date();
      distance = _this.end - now;
      if (distance < 0) {
        clearInterval(_this.timer);
        _this.el.html("<span>00</span>:<span>00</span>:<span>00</span>");
        return;
      }
      hours = ('0' + Math.floor(distance / _this.hour)).slice(-2);
      minutes = ('0' + Math.floor((distance % _this.hour) / _this.minute)).slice(-2);
      seconds = ('0' + Math.floor((distance % _this.minute) / _this.second)).slice(-2);
      return $('#content-platform-hero-countdown').html("<span class='time-unit'>" + hours + "</span>:<span class='time-unit'>" + minutes + "</span>:<span class='time-unit'>" + seconds + "</span>");
    };
    this.init = function(el) {
      this.el = $(el);
      this.end = new Date($.trim(this.el.html()));
      this.showRemaining();
      this.el.css('opacity', 1);
      return this.timer = setInterval(this.showRemaining, 1000);
    };
    this.destroy = function(el) {};
    return this;
  });

}).call(this);
(function ($) {

  window.App = window.App || {};
  window.App.Plugin = window.App.Plugin || {};

  window.App.Plugin.enhanceToggle = function enhanceToggle($, window) {

    return function () {

      var $window = $(window),
        $trigger, $target, $section, targetSelector, originalHeight, options, tabletLite = 640,
        _self = this;

      function onTriggerClick(event, broadcastClose) {
        var $self = $(this),
          start = $target.height(),
          end = (start === 0) ? $target.height('auto').height() : 0;

        if (event) {
          event.stopPropagation();
        }

        // In IE higher (> 640) breakpoints the content of the anchor targets are hidden when its clicked, hence changing the opacity to 1.
        if(viewport().width > tabletLite && BrowserDetect.browser == 'Explorer'){
          event.preventDefault();
        }

        // if this event is open then send broadcast to other instances so they will auto-close
        if (options.closeEvent && !broadcastClose && !isOpen()) {
          $(document).trigger(options.closeEvent);
        }
        if (options.closeOnClickOutside && !isOpen()) {
          $('body').one('click', _self.closeAnchor);
        }

        // don't jump to the anchor
        if (options.silent && !broadcastClose) event.preventDefault();

        $target.toggleClass(options.openedClassName);
        $trigger.toggleClass(options.activeClassName);

        // remove window hash if it matches the current target and
        // we're about to hide the target
        if (window.location.hash == targetSelector && start > 0 && !broadcastClose) {
          window.location.hash = '';
          event.preventDefault();
        }

        // slide open or closed
        $target.height(start).animate({
          'height': end
        }, options.duration, options.easing, function () {
          // remove inline height after animation is done if target is open

          if (end > 0) {
            $target.height('');
            if(options.animateOpacity){
              $target.css('opacity', 1);
            }
          } else {
            if(options.animateOpacity){
              // In IE higher (> 640) breakpoints the content of the anchor targets are hidden when its clicked, hence changing the opacity to 1.
              $target.css('opacity', 1);
            }
          }

          if (!broadcastClose) {
            // Scroll the window to the trigger's offset().top
            var scrollPoint = parseInt($self.offset().top, 10);
            // responsive scroll switch makes the page scroll to top only if its narrower than 640px
            if ((options.responsiveScrollToTop && (viewport().width < 640)) || typeof options.responsiveScrollToTop == 'undefined') {
              $window.scrollTop(scrollPoint);
            }
          }

          options.callback();
        });
      }

      function isOpen() {
        return $target.hasClass(options.openedClassName);
      }

      this.closeAnchor = function () {
        if (isOpen()) {
          onTriggerClick(null, true);
        }
      }

      this.options = {
        openedClassName: 'enh-toggle-opened',
        activeClassName: 'enh-toggle-active',
        duration: 275,
        easing: 'easeInOutQuart',
        closeEvent: null,
        callback: $.noop,
        silent: false,
        responsiveScrollToTop: true,
        closeOnClickOutside: false,
        animateOpacity: true // Used in .site-navigation-sub-items (mobile device breakpoint), so that "line" is visible after closing sub menu 
      };

      this.init = function ($el) {
        $trigger = $el;
        targetSelector = $trigger.attr('href');
        $target = $(targetSelector);
        originalHeight = $target.height();
        options = this.options;

        $target.height(0);
        $trigger.on('click.' + this.namespace, onTriggerClick);

        // trigger toggle if the current location hash matches the selector
        if (window.location.hash == targetSelector) {
          // This looks a bit hacky but lets add for the hackiness to only reload the page in small breakpoints (Otherwise will break the product info snapshot link)
          // even if this somewhat works it will break the users browsing history and you need to press back twice to get to your starting point
          if (viewport().width <= tabletLite) {
            $trigger.trigger('click.' + this.namespace);
          }
        }
        if (options.closeEvent) {
          $(document).on(options.closeEvent, this.closeAnchor);
        }
      };

      this.destroy = function ($el) {
        $trigger.off('click.' + this.namespace);
        //$target.height(originalHeight);
        $target.css({
          'height': 'auto'
        });
        //console.log('I, ' + this.namespace + ', was destroyed :(');
      };
    }

  };

  $.plugin('enhanceToggle', window.App.Plugin.enhanceToggle(jQuery, window));

  /* Used for in-page navigations, e.g. product page*/

  $.plugin('anchorNavigation', function () {

    var $window = $(window),
      options, $section;

    this.options = {
      padding: 12,
      debounceTime: 25,
      pushHistory: false
    };

    function setActive(hash) {
      $section.find('li a[href="' + hash + '"]').parent().addClass('active').siblings().removeClass('active');
      if (options.pushHistory && history.pushState && window.location.hash !== hash) {
        history.pushState(null, null, hash);
      }
    }

    function scroll() {
      var $links = $section.find('li > a');
      scrollTop = $(this).scrollTop();
      if (parseInt((scrollTop + $($links.first().attr('href')).outerHeight()), 10) > $($links.first().attr('href')).offset().top) {
        $links.each(function () {
          var offset = $($(this).attr('href')).offset();
          if ((scrollTop + parseInt($section.outerHeight() + options.padding, 10)) > offset.top && scrollTop < parseInt(offset.top + $($(this).attr('href')).outerHeight() - $section.outerHeight(), 10)) {
            setActive($(this).attr('href'));
          }
        });
      }
      if (parseInt((scrollTop + $($links.first().attr('href')).outerHeight()), 10) < $($links.first().attr('href')).offset().top) {
        $section.find('li').removeClass('active');
      }
    }

    this.init = function ($el) {
      $section = $el;
      options = this.options;

      var lazyScroll = $.debounce(scroll, options.debounceTime);

      $window.on('scroll.' + this.namespace, lazyScroll);

    };

    this.destroy = function ($el) {
      $window.off('scroll.' + this.namespace);
    };

  });

  /* Used e.g. in search result tabs */
  $.plugin('enhanceAnchors', function () {

    this.options = {

    };

    this.init = function ($el) {
      var $filters = $el.find('li > a');

      var $targets = $($filters
        .map(function () {
          if ( !! (targetID = this.href.split('#')[1])) {
            return '#' + targetID;
          }
        })
        .get()
        .join(',')
        .replace(/(,)+/g, ',')
      ).hide();

      $filters.bind('click', function () {
        var target = this.href.split('#')[1],
          $target = $targets.hide();

        $filters
          .filter('.active')
          .removeClass('active');

        if ( !! target) {
          $target = $('#' + target);
        }

        $(this).addClass('active');
        $target.show();
      });

      // initially show either ...
      var $initActiveFilter;

      // marked as active
      $initActiveFilter = $filters.filter('.active');

      // or through location hash
      if (!$initActiveFilter.length) {
        var $active = $filters.filter('[href=' + window.location.hash + ']');
        if ($active.length) {
          $initActiveFilter = $active;
        }
      }

      // or simply the first one
      if (!$initActiveFilter.length) {
        $initActiveFilter = $filters.filter('[href=#]');
      }

      $initActiveFilter.trigger('click');
    };

    this.destroy = function ($el) {

    };

  });

})(jQuery);
(function($) {

  // ---------------------------------------------------------------------------
  // Imitate placeholder behavior for input fields

  $.plugin('enhancePlaceholder', function() {

    var $input, options;

    function onFocus() {
      // the current value matches the placeholder, empty and remove the class
      if ($input.val() == $input.attr('placeholder')) {
        $input.val('');
        // if the input was originally a password field change it's type back
        if ($input.hasClass(options.passwordClassName)) {
          $input.removeClass(options.passwordClassName);
          $input.prop('type', 'password');
        }
      }
    }

    function onBlur() {
      // nothing has changed, reset
      if ($input.val() === '' || $input.val() == $input.attr('placeholder')) {
        if ($input.attr('type') == 'password') {
          $input
            .addClass(options.passwordClassName)
            .prop('type', 'text');
        }
        $input.val($input.attr('placeholder'));
      }
    }

    function onSubmit() {
      // TODO: should we store the original selector?
      $(this).find('[placeholder]').each(function() {
        var $this = $(this);
        if ($this.val() === $this.attr('placeholder')) {
          $this.val('');
        }
      });
    }

    this.options = {
      passwordClassName: 'enh-placeholder-password'
    };

    this.init = function($el) {
      $input = $el;
      options = this.options;
      $input
        // set the placeholder text based on the placeholder attribute
        .val($input.attr('placeholder'))
        // convert password fields initially to text fields to be able to show the placeholder
        .filter('[type=password]')
        // expose password separately to CSS
        .addClass(options.passwordClassName)
        .prop('type', 'text')
        .end()
        .bind('focus.' + this.namespace, onFocus)
        .bind('blur.' + this.namespace, onBlur)
        // initially blur
        .blur();

      // TODO: attaching events to enclosing form for each input sounds fishy
      // when the parent form is submitted, make sure we don't send placeholders for "empty" fields
      $input.parents('form').bind('submit.' + this.namespace, onSubmit);
    };

    this.destroy = function($el) {
      $input.unbind('.' + this.namespace);
      $input.parents('form').bind('.' + this.namespace);
    };

  });

  // ---------------------------------------------------------------------------

  $.plugin('enhanceCheckbox', function() {

    var $input, $label, options;

    this.options = {
      className: 'enh-checkbox-selected',
      labelClassName: 'enh-checkbox-wrapper'
    };

    function update() {
      $label.toggleClass(options.className, $input.is(':checked'));
    }

    this.check = function($el, checked) {
      $el.attr('checked', checked);
      update();
    };

    this.init = function($el) {
      options = this.options;
      $input = $el;
      $label = findLabelForInput($input).addClass(options.labelClassName);
      $input.on('change.' + this.namespace, update);
      update();
    };

    this.destroy = function($el) {
      $input.off('change.' + this.namespace);
      $label.removeClass(options.className);
    };

  });

  // ---------------------------------------------------------------------------

  $.plugin('enhanceRadio', function() {

    var $inputs, $labels, options;

    this.options = {
      className: 'enh-radio-selected',
      labelClassName: 'enh-radio-wrapper'
    };

    function update() {
      $labels.removeClass(options.className);
      $inputs.filter(':checked').each(function() {
        findLabelForInput($(this)).addClass(options.className);
      });
    }

    this.init = function($el) {
      options = this.options;
      $inputs = $el.find('input[type="radio"]');
      $labels = $el.find('label').addClass(options.labelClassName);
      $inputs.on('change.' + this.namespace, update);
      update();
    };

    this.destroy = function($el) {
      $inputs.off('change.' + this.namespace).removeClass(options.labelClassName);
    };
  });

  $.plugin('enhanceFile', function() {
    var $input, $enh_button, $enh_file_name_container;

    function createElements(){
      $enh_button = $('<input type="button" class="button submit input-file-button" value="' + I18n.input_file.choose_file + '" />');
      $enh_file_name_container = $('<span class="input-file-name">' + I18n.input_file.no_file_selected + '</span>');
      $input.css({'visibility':'hidden', 'height':'0','width':'0'}).after($enh_file_name_container).after($enh_button);
      $enh_button.on('click', function(){
        $input.trigger('click');
      });
    }

    this.init = function($el) {
      $input = $el;

      // IE browsers (up to ten) are so crappy they can't handle jquery click triggers so no enhancements for file chooser
      if (BrowserDetect.browser !== 'Explorer') {
        createElements();
      
        $input.on('change.' + this.namespace, function(){
          var file = this.value;
          var fileName = file.split("\\");
          $enh_file_name_container.html(fileName[fileName.length-1]);
        });
      }
    };

    this.destroy = function($el) {
      $input.off('change.' + this.namespace);
      $enh_button.remove();
      $enh_file_name_container.remove();
    };

  });

  // ---------------------------------------------------------------------------
  // HELPERS:

  function findLabelForInput($input) {
    var $label = $('label[for=' + $input.attr('id') + ']');
    if ($label.length === 0) {
      $label = $input.closest('label');
    }
    if ($label.length === 0) {
      $.error('Label required for the input element to be defined.');
      return false;
    }
    return $label;
  }

})(jQuery);
(function($) {

  $.plugin('enhanceLoading', function() {

    var self = this, $container, enabled, triggerEvents, updateWindowLocation, useAjaxParameter, callback, scrollToTop, firstPopStateFired;

    function scrollToContainer() {
      if ($container.offset().top < $(window).scrollTop())
        $('html, body').animate({ scrollTop: $container.offset().top }, 400);
    }

    // Return version of `url` we can use for ajax loading (as opposed
    // to what we set as the page URL in the browser address bar)
    function urlForLoading(url) {
      var noHashURL = url.split('#')[0];
      return !useAjaxParameter ? noHashURL : noHashURL + (noHashURL.indexOf('?') === -1 ? '?' : '&') + 'ajax=true';
    };

    function doLoad(url, loadUpdatesLocation, doneHandler) {
      if (scrollToTop)
        scrollToContainer();
      window.nkEnhanceLoadingInProgress = true;
      $container.load(
        [urlForLoading(url), $container.selector + ' > *'].join(' '),
        function() {
          PubSub.publish('image.added'); // update adaptive images
          if (updateWindowLocation && (loadUpdatesLocation !== false))
            history.pushState(null, null, url);
          if (!!doneHandler)
            doneHandler();
          window.nkEnhanceLoadingInProgress = false;
          if ($.isFunction(callback))
            callback($(this));
        }
      );
    };

    function onEvent(event) {
      event.preventDefault();
      if (!enabled)
        return;
      var $el = $(this);

      if ($el.is('a:not(.disabled)'))
        doLoad($el.attr('href'));
      else if ($el.is('input, select, form')) {
        var $closestForm = $el.closest('form');
        doLoad($closestForm.attr('action').replace(/^\./, '') + '?' + $closestForm.serialize());
      }
    };

    function mapFromQueryString(query) {
      var ret = {};
      var vars = query.replace(/^\?/, '').split('&');
      for (var i=0; i < vars.length; i++) {
        var pair = vars[i].split('=');
        pair[0] = decodeURIComponent(pair[0]);
        pair[1] = decodeURIComponent(pair[1]);
        if (typeof ret[pair[0]] === 'undefined')
          ret[pair[0]] = pair[1];
        else if (typeof ret[pair[0]] === 'string')
          ret[pair[0]] = [ret[pair[0]], pair[1]];
        else
          ret[pair[0]].push(pair[1]);
      }
      return ret;
    };

    function updateStaticTriggerElements() {
      var setInputCheckedState = function($inputEl, isChecked) {
        if ($inputEl.hasClass('enh-checkbox')) {
          $inputEl.enhanceCheckbox('check', isChecked);
        } else {
          if (isChecked)
            $inputEl.attr('checked', 'checked');
          else
            $inputEl.removeAttr('checked');
        }
      };
      var setSelectValue = function($selectEl, selectedValue) {
        var valueToApply = selectedValue;
        if (typeof selectedValue == 'undefined' || selectedValue === null)
          valueToApply = $selectEl.find('option:first').val();
        if ($selectEl.hasClass('enh-select')) {
          $selectEl.enhanceSelect('select', valueToApply);
        } else {
          $selectEl.find('option').removeAttr('selected');
          $selectEl.find('option[value="'+valueToApply+'"]').attr('selected', 'selected');
        }
      };

      var queryParams = mapFromQueryString(window.location.search);
      $.each(triggerEvents, function(eventName, selector) {
        var $el = $(selector);
        var isInsideContainer = (0 < $container.find($el).length);
        var $form = $el.closest('form');
        if (isInsideContainer || !$form)
          return;
        // Disable loading while we are updating the form so that
        // this would not trigger reloads:
        enabled = false;
        // Update form state to match GET parameters
        $form.find('input, select').each(function(index, formItem) {
          $formItem = $(formItem);
          var qValue = queryParams[$formItem.attr('name')];
          if ($formItem.is('input[type=checkbox], input[type=radio]'))
            setInputCheckedState($formItem, (qValue === 'on'));
          else if ($formItem.is('select'))
            setSelectValue($formItem, qValue);
          $formItem.trigger('change');
        });
        enabled = true;
      });
    };

    function onPopState(event) {
      // ignore the first popstate (which is sent upon the initial page load),
      // because we already have the initial content on the page:
      if (firstPopStateFired) {
        doLoad(window.location.href, false, function() {
          updateStaticTriggerElements();
        });
      }
      firstPopStateFired = true;
    };

    this.options = {
      container: '',
      events: {},
      updateWindowLocation: true,
      useAjaxParameter: true,
      callback: $.noop,
      scrollToTop: false
    };

    var supportsHistoryAPI = !!(window.history && history.pushState);

    this.init = function($el) {
      $container = $(this.options.container);
      updateWindowLocation = supportsHistoryAPI && this.options.updateWindowLocation;
      useAjaxParameter = this.options.useAjaxParameter;
      scrollToTop = this.options.scrollToTop;
      triggerEvents = this.options.events;
      callback = this.options.callback;
      enabled = true;

      $.each(this.options.events, function(eventName, selector) {
        $el.on(eventName + '.' + self.namespace, selector, onEvent);
        $(selector).closest('form').addClass('enhanced-loading');
      });
      if (updateWindowLocation)
        $(window).on('popstate', onPopState);
    };

    this.destroy = function($el) {
      $.each(this.options.events, function(eventName, selector) {
        $el.off(eventName + '.' + self.namespace);
        $(selector).closest('form').removeClass('enhanced-loading');
      });
      if (updateWindowLocation)
        $(window).off('popstate', onPopState);
    };

  });

})(jQuery);
/*global jQuery*/


(function ($) {

  $.plugin('enhanceSelect', function () {

    var $original,
      $select,
      $trigger,
      $label,
      $list,
      $options,
      $masks,
      $focusHelper,
      timeout,
      options,
      $possibleOptions,
      namespace,
      renderAsFilteredList;

    function createElements() {

      var markup = [
        '<div class="' + $original.attr('class') + '">',
        // the trigger will show and hide the options
        '<a href="#" class="' + options.triggerClassName + '">',
        // the trigger will in many cases need some sort of icon
        '<span class="' + options.triggerIconClassName + '">+</span>',
        // show current value in trigger text
        '<strong>' + $original.find('option[value="' + $original.val() + '"]').text() + '</strong>',
        '</a>',
        // this will help us with focus and keyUp events
        '<input readonly=' + options.focusHelperReadonly + ' type="text" class="focus-helper" />',
        '<ul>'
      ];
      renderAsFilteredList = $original.find('option').length > options.asFiltedListFrom;

      if (renderAsFilteredList) {
        (function () {
          var originalOptions = $original.find('option').sort(function (a, b) {
            
            var a_value = a.getAttribute('value'),
              b_value = b.getAttribute('value');
            
            if (a_value < b_value) return -1;
            if (a_value > b_value) return +1;
            return 0;
          });
          $original.html(originalOptions);
        })();
      }

      $original.find('option').each(function () {
        var $this = $(this),
          selected = $this.is(':selected') ? 'class="selection" ' : '';

        if (options.showEmptyValues || $(this).attr('value')) {
          markup.push('<li><a ' + selected + 'href="#' + $this.val() + '">' + $this.html() + '</a></li>');
        }

      });
      markup.push('</ul></div>');
      $select = $(markup.join(''));

      // attach to DOM
      $original.hide().before($select);

      // store references to elements
      $trigger = $select.find('a.' + options.triggerClassName);
      $label = $trigger.find('strong');
      $list = $select.find('ul').hide();
      $options = $list.find('a');
      $possibleOptions = $options;
      $focusHelper = $select.find('input.focus-helper');
      // "masks" are parent elements with `"overflow" set to "hidden"

      $masks = $original.parents().filter(function () {
        return $(this).css('overflow') === 'hidden';
      });
    }

    function bindEvents() {
      // Bind to form reset event
      $original.closest('form').bind('reset.' + namespace, function (event) {
        selectOption($($options.get(0)), true);
      });
      // Trigger click toggles options list visibility
      // (some browsers actually do set the focus on a link)
      $trigger
        .bind('click.' + namespace, function (event) {
          event.preventDefault();
          $list.is(':visible') ? hideList() : showList();
          $focusHelper.focus();
        })
        .bind('focus.' + namespace, function () {
          $focusHelper.focus();
        });

      // Option hover highlights, click selects
      $options
        .on('mouseenter.' + namespace, function () {
          $options.removeClass('selection');
          $(this).addClass('selection');
        })
        .on('mouseleave.' + namespace, function () {
          $(this).removeClass('selection');
        })
        .on('click.' + namespace, function (event) {
          selectOption($(this));
          if (options.silent) event.preventDefault();
        });

      // Keyboard navigation
      $focusHelper
        .bind('focus.' + namespace, function () {
          // ensure that the helper is empty
          $(this).val('');
        })
      // handle different key up events
      .bind('keyup.' + namespace, onKeyUp);

      $list.on('keyup.' + namespace, 'a', onKeyUp);
      // Fix size and offset on window resize/scroll
      $(window).bind('resize.' + namespace, $.debounce(adjustHeightAndOffset, 300)).trigger('resize');
    }

    // Show the options list
    function showList() {
      // ensure that everything is it's place to begin with

      adjustHeightAndOffset();
      $focusHelper.val('');
      $list.show();
      $possibleOptions = $options;
      $options.show();

      var original_selection_index = $original.find('option').filter(':selected').index();
      if ($original.size() && original_selection_index) {
        $($options.removeClass('selection').get(original_selection_index)).addClass('selection');
      }
      else {
        $($options.removeClass('selection').get(0)).addClass('selection');
      }

      $('html').on('click.' + namespace, hideIfClickedOutside);

      // add extra style for focus helper. Input is used as filter for options when component is rendered as filtered list
      if (renderAsFilteredList) {
        $trigger.hide();
        $focusHelper.addClass('filtered-list');
      }
      $masks.css('overflow', 'visible');
    }

    // Hide the options list
    function hideList() {

      $list.hide();
      $('html').off('click.' + namespace, hideIfClickedOutside);
      $trigger.show();
      // revert changes to point before list went visible 
      if (renderAsFilteredList) {

        $trigger.show();
        $focusHelper.removeClass('filtered-list');
        $focusHelper.val('');
      }
      setTimeout(function () {
        $masks.css('overflow', 'hidden');
      }, 50);

    }

    // hide list
    function hideIfClickedOutside(event) {
      if (!$.contains($select.get(0), event.target)) {
        hideList();
      }
    }

    function selectOption($option, silent) {

      if ($option.length === 0) // there is no matching option
        return;

      var value = $option.attr('href').split('#')[1];
      $original.val(value);

      if (!silent) {
        $original.trigger('change');
      }

      $label.text($option.text());
      $options
        .removeClass('selection')
        .filter('[href="#' + value + '"]')
        .addClass('selection');
      hideList();

      // for form validation: if selected element is something else than first element -> user has chosen an actual value
      if (value) {
        $list.parent().addClass('element-selected');
      }
      else {
        $list.parent().removeClass('element-selected');
      }
    }

    function onKeyUp(event) {
      var $current, $selection, key = {
          tab: 9,
          esc: 27,
          up: 38,
          down: 40,
          enter: 13,
          space: 32
        };

      // if component is not filted list, input should be empty after a while
      if (!renderAsFilteredList) {
        // ensure that the helper is always empty
        clearTimeout(timeout);
        timeout = setTimeout(function (focusHelper) {
          focusHelper.val('');
        }, 500, $focusHelper);
      }

      // show the list if its hidden
      if ($list.is(':hidden')) {
        if ($.inArray(event.which, [key.tab, key.enter, key.space, key.down] !== -1)) showList();
        return;
      }

      // only deal with key events if the list actually showing
      switch (event.which) {
      case key.esc:

        hideList();
        break;

      case key.up:
      case key.down:

        event.preventDefault();

        $current = $options.filter('.selection');
        $options.removeClass('selection');

        // Change selection by arrow keys
        var current_index = $possibleOptions.index($current);
        if (event.which === key.up) {
          $selection = $possibleOptions[current_index - 1] || $possibleOptions[$possibleOptions.size() - 1];
        }
        else if (event.which === key.down) {
          // next or first 
          $selection = $possibleOptions[current_index + 1] || $possibleOptions[0];
        }
        $selection = $($selection);
        $selection.addClass('selection');

        // adjust scroll if necessary
        var selectionTop = $selection.position().top,
          selectionHeight = $selection.height(),
          listHeight = $list.height(),
          scrollTop = $list.scrollTop();
        if (selectionTop + selectionHeight > listHeight || selectionTop < 0) {
          if ((selectionTop + scrollTop) >= listHeight) {
            $list.scrollTop(selectionTop + scrollTop - listHeight + selectionHeight);
          }
          else if (selectionTop < scrollTop) {
            $list.scrollTop(scrollTop + selectionTop);
          }
        }
        break;

      case key.enter:
      case key.space:
      case key.tab:

        event.preventDefault();
        $current = $options.filter('.selection');
        if ($current.length) {
          selectOption($current.first());
          $list.hide();
        }
        break;

      default:

        // select by currently typed
        var needle = $focusHelper.val();
        $possibleOptions = $options.filter(function () {
          if (needle.length <= 0) {
            return $options;
          }
          return $.trim($(this).text().toLowerCase()).slice(0, needle.length) === needle;
        });
        var match = $possibleOptions.first();
        if (match.length) {
          $options.removeClass('selection');
          match.addClass('selection');
        }
        if (renderAsFilteredList) {
          $list.hide();
          $options.hide();
          if (needle.length <= 0) {
            $options.show();
          }
          else {
            $possibleOptions.show();
          }
          $list.show();
        }

      }
    }

    // adjust the height before adjusting offset,
    // since the offset depends on the correct height
    function adjustHeightAndOffset() {
      var $window = $(window),
        viewportHeight = $window.height(),
        triggerHeight = $trigger.outerHeight(),
        triggerOffset = $trigger.offset().top - $window.scrollTop(),
        listHeight = $list.css('height', '').outerHeight();
      // ensure that all options a accessible and visible
      // by the means of scrolling if necessary
      $focusHelper.css({
        width: $trigger.outerWidth(), // remove margins
        height: $trigger.outerHeight() - 2 // remove margins
      });

      if (listHeight > viewportHeight) {
        listHeight = Math.floor(viewportHeight / triggerHeight) * triggerHeight - triggerHeight;
        $list.css('height', listHeight);
      }
      // ensure that the options list is always fully visible
      // list fits by default
      if (viewportHeight - (triggerHeight + triggerOffset) > listHeight) {
        $list.css('top', triggerHeight);
      }
      // list doesn't fit, not enough room beneath
      else {
        var overflow = listHeight - (viewportHeight - (triggerHeight + triggerOffset));
        // push the list up an nth of the height of the trigger for looks
        var offset = Math.floor(overflow / triggerHeight) * triggerHeight * -1;
        // ensure that the list is always glued to the trigger,
        // this handles the top
        $list.css('top', Math.max(offset, -listHeight));
      }
    }

    this.options = {
      triggerIconClassName: 'enh-select-trigger-icon',
      triggerClassName: 'enh-select-trigger',
      silent: true,
      simple: false,
      showEmptyValues: true,
      asFiltedListFrom: 999,
      functionsFromWidth: 607,
      focusHelperReadonly: false
    };

    this.init = function ($el) {
      // 608 is the width of iframes in the tablet-lite breakpoint
      // we need to enhance the selects from tablet-lite up and for iframes
      // this means 608 ->

      if (viewport().width <= this.options.functionsFromWidth && $('head meta[name="componentContext"]').attr('content') !== 'styleguide')
        return;

      $original = $el;
      options = this.options;
      namespace = this.namespace;
      createElements();
      bindEvents();
      $el.closest('form').addClass('enhanced');
    };

    this.select = function ($el, value, silent) {
      selectOption($options.filter('[href="#' + value + '"]'), silent);
    };

    this.destroy = function ($el) {
      $original.show();
      $select.remove();
      $(window).off('.' + namespace);
      $('html').off('.' + namespace);
      $el.closest('form').removeClass('enhanced');
      $list.off('keyup.' + namespace, 'a');

      $options
        .off('mouseenter.' + namespace)
        .off('mouseleave.' + namespace)
        .off('click.' + namespace);
    };

  });
})(jQuery);
(function($) {
  /*
    Thanks to Filament Group for the simple idea of checking for two rows of navigation items!
  */
  $.plugin('enhanceSubNavigation', function() {

    var $window = $(window),
        $section,
        navItems;

    default_options = {
        debounceTime: 250
    };

    var respond = function() {
      $section.removeClass('drop-menu');

      // Check if the items go on two rows, if so, trigger the toggle behaviour
      if($(navItems[navItems.length-1]).offset().top > $(navItems[0]).offset().top) {
        $section.addClass('drop-menu');
        $section.find('.active').prependTo($section.find('.wrapper ul'));
        if ($section.find('li.active').length < 1) {
          $section.find('.wrapper ul').prepend('<li class="active helper-label"><a>' + currentPageTitle + ' ' + I18n.get('helpers', 'navigation_label_extension') + '</a>');
        }
      } else {
        $section.find('li.helper-label').remove();
      }
    };

    this.init = function($el) {
      $section = $el;
      navItems = $el.find('li');

      this.options = $.extend({}, default_options, this.options);

      // Bind a debounced resize event to the window
      var lazyRespond = $.debounce(respond, this.options.debounceTime);
      $window.on('resize.' + this.namespace, lazyRespond);

      // Bind open/close toggle to the active item
      $section.on('click', 'li.active', function(event) {
        $section.toggleClass('expanded');
        event.preventDefault();
      });
      respond();

    };

    this.destroy = function($el) {
    };
  });
})(jQuery);
(function($) {

  $.plugin('feedback', function() {
    
      var options,
           $componentRoot,
           $yesButton,
           $noButton,
           $inputWrapper,
           $inputField,
           $thankYouBlock,
           $inputMaxChars,
           $sendButton,
           $minInputWidth,
           $breakpoint,
           $stars,
           $starsHitArea,
           $starsAmount,
           $starRating,
           $alreadyRatedRating,
           $hidableArea,
           $isRTL,
           $cookieValues,
           $maxCookieValues;
    
      this.options = {
        url: 'NA',                      // optional parameter that defines where the rating data is sent
        useStars: false,                // render component using either yes/no dialogue or stars
        itemID: 'NA',                   // ID for star rated item
        cookieName: 'topicRatingCookie',// cookie name
        callback: 'NA'                  // callback function for utag trakcing library function
      };

      this.init = function(el) {
        options = this.options;
        $componentRoot = el;
        $inputMaxChars = 200;
        $minInputWidth = 250;
        $breakpoint = 240;
        $cookieValues = [];
        $maxCookieValues = 25;
        $isRTL = $('body').hasClass('rtl');
        $inputWrapper = "<div class='input-wrapper'></div>"
        $inputField = "<input class='text-field' type='text' value='' name='feedback-field' maxlength='"+$inputMaxChars+"'></input>";
        //$thankYouBlock = "<div class='title'>"+I18n.get('feedback_block', 'thank_you')+"</div>";
        
        $yesNoButtons = "<div class='buttons'><div class='button button-yes'>"+I18n.get('feedback_block', 'feedback_yes')+"</div><div class='button button-no'>"+I18n.get('feedback_block', 'feedback_no')+"</div></div>";
        $sendButton = "<div class='buttons'><div class='button button-send'>"+I18n.get('feedback_block', 'send')+"</div></div>";
        
        $stars = "<div class='stars-rating'></div>";
        $starsHitArea = 20;
        $starsYOffset = 22;
        $starsAmount = 5;
        $starRating = 0;
        $alreadyRated = false;

        //console.log("URL = "+options.url+", componentRoot = "+$componentRoot);
        
        // init cookie
        initCookie();
        
        // set hidable area
        setHidableArea();
        
        // render rating widget
        renderRatingWidget();
        
        // bind events
        bindEvents();
      };
      
      this.destroy = function($el) {
      };
      
      //
      function setHidableArea() {
        if (options.useStars) {
          $hideableArea = $componentRoot.find(".title");
        } else {
          $hideableArea = $componentRoot.children(":first-child");
        }
      }
      
      // renders either yes/no buttons or rating widget
      function renderRatingWidget() {
        if (options.useStars) {
          $componentRoot.find('.feedback-wrapper .title:first').after($stars);
          initializeStars();
        } else {
          $componentRoot.find('.feedback-wrapper').append($yesNoButtons);
          $yesButton = $componentRoot.find('.button-yes');
          $noButton = $componentRoot.find('.button-no');
          equalizeButtons();
        }
      }
      
      //
      function initCookie() {
        $cookieValues = $.cookies.get(options.cookieName);
        if ($cookieValues === null) {
          $cookieValues = [];
          $.cookies.set(options.cookieName, $cookieValues);
        }
        for (var i = 0; i < $cookieValues.length; i++) {
           if ($cookieValues[i] === options.itemID) {
               $alreadyRated = true;
               break;
           }
        }
      }
      
      // Updates FAQ cookie appending FAQ ID to the queue of 25 elements, Older elements get deleted if queue overflows
      function updateCookie() {   
          if (options.itemID !== 'NA' && options.itemID !== "") {
            // refresh cookieValues variable from actial cookie because multiple widgets can be on same page
            initCookie();
            
            // remove first element if table overflows
            if ($cookieValues.length === $maxCookieValues) {
                $cookieValues.shift();  
            }
            // append new element to table
            $cookieValues.push(options.itemID);
            
            // generate new cookie data and update browser cookie
            $.cookies.set(options.cookieName, $cookieValues, {
              expires: 30
            });
         }
      }
      
      //
      function initializeStars() {
        // check from cookie is the item rated already
        if ($alreadyRated) {
          $componentRoot.find('.stars-rating').remove();
          $componentRoot.find(".title:first").remove();
          $componentRoot.find(".title:last").removeClass("hidden");
        } else {
          // inject stars and init hit area
          for (var $i = 1; $i <= $starsAmount; $i++) {
            $componentRoot.find('.stars-rating').append("<div id='"+$i+"-star-"+options.itemID+"' class='star'></div>");
          }
          $componentRoot.find('.star').css("height", $starsHitArea);
          $componentRoot.find('.star').css("width", $starsHitArea);
        }
      }
      
      // make yes-no buttons same size
      function equalizeButtons() {
        //console.log("widths: "+$yesButton.width()+", "+$noButton.width());
        var maxWidth = Math.ceil(Math.max($yesButton.width(), $noButton.width()));
        $yesButton.width(maxWidth);
        $noButton.width(maxWidth);
      };
      
      // bind events
      function bindEvents() {
        // buttons
        $componentRoot.find('.button-yes').click(function(event) {
          //console.log("yes clicked");
          sendFeedback({
                        type: "button",
                        text: "yes"
                        });
          hideRatingArea("yes");
        });
        
        $componentRoot.find('.button-no').click(function(event) {
          //console.log("no clicked");
          sendFeedback({
                        type: "button",
                        text: "no"
                        });
          hideRatingArea("no");
        });
        
        // stars
        $componentRoot.find(".star").bind({
          
          mouseup: function(event) {
            // unbind events after click
            $(this).parent().children().unbind('mouseenter').unbind('mouseleave').unbind('click');
            $(this).parent().css('cursor', 'default');
            
            switchToGreyedOut($(this));  
            var starValue = $(this).attr("id").charAt(0);

            sendFeedback({
                          type: "star",
                          text: starValue
                          });
            
            updateCookie();
            
            // send tracking data
            if (window.isTrackingAvailable && options.callback && options.callback !== 'NA') {
              options.callback(options.itemID, starValue);
            }              
                          
            showFeedbackResult("starsSent");
          },
          mouseenter: function(event) {
            var starNumber = parseInt($(this).attr("id").charAt(0));
            var starDisplacement = 0;
            if ($isRTL) {
              starDisplacement = -starNumber*$starsHitArea;
            } else {
              starDisplacement = starNumber*$starsHitArea - 100;
            }
             
            
            if ($.browser && $.browser.msie && false) {
              // might need something IE8 specific here
            } else {
                $(this).parent().css("background-position", starDisplacement + "px -"+$starsYOffset+"px");
            }  
          },
          mouseleave: function(event) {
              if ($isRTL) {
                $(this).parent().css("background-position", "0 -"+$starsHitArea+"px");
              } else {
                $(this).parent().css("background-position", -$starsAmount*$starsHitArea + "px -"+$starsYOffset+"px");
              }
          }    
        });
      };
      
      //
      function switchToGreyedOut($star) {
        var bgpos = $star.parent().css('background-position'); 
        var xpos = 0;
        // we need an IE8 hack to get bg-position
        if (!bgpos) {
          xpos = $star.parent().css('background-position-x');
          $star.parent().css("background-position-x", xpos); 
          $star.parent().css("background-position-y", "-2px");
        } else {
          xpos = bgpos.split(" ")[0];
          $star.parent().css("background-position", xpos+" -2px");
        }
      };
      
      //
      function hideRatingArea($selection) {
        $hideableArea.fadeOut('fast', function() {
            showFeedbackResult($selection);
        });
      };
      
      //
      function showRatingArea() {
        $hideableArea.fadeIn('fast');
      }
      
      //
      function showFeedbackResult($selection) {
        //console.log("show result");
        $componentRoot.find(".buttons").remove();
        $componentRoot.find(".input-wrapper").remove();
        if ($selection == "yes") {
          $componentRoot.find(".title").text(I18n.get('feedback_block', 'thank_you'));
        } else if ($selection == "no") {
          $componentRoot.find(".title").text(I18n.get('feedback_block', 'thank_you'));
          if ($(window).width() > $breakpoint) {
            $componentRoot.find(".title").text($componentRoot.find(".title").text() + " " + I18n.get('feedback_block', 'why_no'));
          }
        } else if ($selection == "textSent") {
          $componentRoot.find(".title").text(I18n.get('feedback_block', 'thank_you'));
          $componentRoot.children(":first-child").fadeIn('fast');
          return;
        } else if ($selection == "starsSent") {
          $componentRoot.find(".title:last").removeClass("hidden");
          //generateThankYouBlock();
        }
        
        // check if button version or stars version 
        if (options.useStars) {
          
        } else {
          $componentRoot.find(".title").parent().append($inputWrapper);       
          $componentRoot.find(".input-wrapper").append($inputField).focus();
          $componentRoot.find(".input-wrapper").append($sendButton);
          
          // bind event to input field send button
          $componentRoot.find(".text-field").keypress(function(event) {
            //console.log("keypress");
            if (event.which == 13) {
              sendFeedback({
                          type: "field",
                          text: $componentRoot.find(".text-field").val()
                          });
              hideRatingArea("textSent");         
            }
          });
          $componentRoot.find(".button-send").click(function() {
              //console.log("mouseclick");
              sendFeedback({
                          type: "field",
                          text: $componentRoot.find(".text-field").val()
                          });
              hideRatingArea("textSent");              
          });
                  
          // use a hack to get the correct widths
          setTimeout(function(){
            // calculate new width for input wrapper field to fill whole space
            var fieldPaddingUsed = $componentRoot.find(".title").outerWidth() - $componentRoot.find(".title").width();
            var wrapperWidth = Math.max($componentRoot.outerWidth() - $componentRoot.find(".title").outerWidth() - fieldPaddingUsed, $minInputWidth);
            $componentRoot.find(".input-wrapper").width(wrapperWidth);
            
            // calculate width for input based on send button (magic multiply factor because input field has some padding of its own)
            var inputWidth = wrapperWidth - $componentRoot.find(".input-wrapper .buttons").width() - 1.5*fieldPaddingUsed;
            $componentRoot.find(".text-field").width(inputWidth);
            $componentRoot.find("input").focus();
          },0);
        }
        
        //showRatingArea();
      };
      
      // ajaxpost yes/no and input field data
      function sendFeedback($data) {
        //console.log("sendFeedback: "+$data.text);
        if (options.url !== "NA") {
          var cappedData = $data.text.substring(0, $inputMaxChars);
          $.post(options.url, cappedData, function(result) {
            //console.log("data sent OK");
          }, "html");
        }
      };
      
  })
})(jQuery);
/*global $, jQuery, window, App*/


window.App = window.App || {};
window.App.Plugin = window.App.Plugin || {};
window.App.Plugin.CatalogFilters = function CatalogFilters($, win) {

  return function () {

    var
      _self = this,
      $el,
      $catalog_list_container,
      original_seach_params,
      _query_result_data_attr = 'loadmore',

      option_defaults = {
        loadmore: '/replace_with_ajax_url',
        catalog_list_items: '.w-catalog-list-row',
        catalog_list_container: '.w-catalog-list-container',
        inputs: '.inputs-selector',
        checkboxes: '.enh-checkbox-selected'
      };

    // handler events that bubles up from different filters inside container
    this.handleCatalogFilterChange = function (e) {

      var _state = _self.getStateFromInputs();
      HistoryUlrHelper.pushState(_state);
      _self.getCatalogContent(_state);
    };

    // handler to respond to 'popstate'-event
    this.handleHistoryStateChange = function () {
      var _state = HistoryUlrHelper.getState();
      _self.getCatalogContent(_state);
    };

    // collect all input states on put them to same hash. this is used on ajax req as parameters (data-object)
    this.getStateFromInputs = function () {

      var checkboxes, sort_order, req_params, other_inputs;

      // get all needed params from all different kind of input types that we know 
      checkboxes = $el.find(_self.options.checkboxes).map(function () {
        return $(this).data('filter');
      });

      other_inputs = $el.find(_self.options.inputs).map(function () {
        var input = $(this);
        return input.attr('name') + '=' + input.val();
      });

      // combine all of those to same hash
      req_params = $.extend({},
        original_seach_params,
        _self.createReqHashFromList(checkboxes),
        _self.createReqHashFromList(other_inputs));

      return req_params;
    };

    // helper to converto list to hash
    // example: ['param1=value1', 'param2=value2'] => { param1 : 'value1', param2 : 'value2' }
    this.createReqHashFromList = function (list) {

      var base_hash = {}, splitted_value, i;

      for (i = 0; i < list.length; i++) {
        splitted_value = list[i].split('=');
        base_hash[splitted_value[0].toString()] = (splitted_value[1] || 'on');
      }
      return base_hash;
    };

    // handler that makes ajax req
    this.getCatalogContent = function (_state) {
      // use data-attr url for next page
      $.ajax({
        url: _self.options.loadmore,
        data: _state
      }).done(_self.ajaxSuccessHandler).fail(_self.ajaxFailHandler).always(_self.ajaxDone);
    };

    // callback for ajax success. Should handle returning data. 
    this.ajaxSuccessHandler = function (data) {

      var result_container = $(data).find($catalog_list_container.selector);
      $catalog_list_container.empty().append(result_container.children());
      $catalog_list_container.data(_query_result_data_attr, result_container.data(_query_result_data_attr));
      _self.handleOtherPluginInits();
      _self.showErrorIfNeeded();
      _self.updateLoadMore();
      $(document).trigger('newProductContent');
    };

    this.updateLoadMore = function () {

      var loadmoreInstance = $($('.load-more').first()).data('loadmore_1_1');
      if (loadmoreInstance && loadmoreInstance.updateLoadmorevisibility) {
        loadmoreInstance.updateLoadmorevisibility();
      }

    };

    this.handleOtherPluginInits = function () {

      PubSub.publish('image.added');
      $('a.overlay-video-trigger').defaultVideoOverlay();
    };

    this.showErrorIfNeeded = function () {

      var should_show = $catalog_list_container.children().length === 0;
      $('.error-notification.load-more').toggle(should_show);

    };

    // methot that we always  call end of ajax call, event if req fails 
    this.ajaxDone = function () {

      if (win.opacityFadeIn) {
        win.opacityFadeIn($('.do-opacity-fade-in'), function () {
          $(this).removeClass('do-opacity-fade-in');
        });
      }
    };

    // this is called when something goes wrong in ajax req
    this.ajaxFailHandler = function (jqXHR, textStatus) {
      // console.log(jqXHR);
      // console.log(textStatus);
    };

    var skipFirstCall = function (fn) {

      var args = Array.prototype.slice.call(arguments, 1),
        can_call;

      if (can_call) {
        fn.apply(_self, args);
      } else {
        can_call = true;
      }
    };

    // all event binding belong to here
    this.bindEvents = function () {

      $('body').on('catalog_filter_change.' + this.namespace, {}, this.handleCatalogFilterChange);
      $(window).on('popstate.' + this.namespace, skipFirstCall(this.handleHistoryStateChange));
    };

    // all event unbinding belong to here
    this.unbindEvents = function () {
      $('body').off('catalog_filter_change.' + this.namespace);
    };

    // grap all elemnts that are static on page whole page lifetime 
    this.collectElements = function () {

      $catalog_list_container = $(this.getPluginParam('catalog_list_container'));
    };

    // set elements as default state
    this.setDefauls = function () {

      // if container has attirbute that tells update url. use it. otherwise use default 
      if ($catalog_list_container.data('loadmore')) {
        // if script can use relative url, use it. otherwise user absolute url
        this.options.loadmore = $catalog_list_container.data('loadmore').split('?')[0] ||  window.location.pathname;
      }
      original_seach_params = this.getCleanedSearchParams();
      this.showErrorIfNeeded();
    };

    // get search hash and remove all filters and sortorders from it. 
    this.getCleanedSearchParams = function () {
      var i, base_array, filters, sort_order, base_hash, base_url;

      base_url = $catalog_list_container.data('loadmore');

      if (base_url && base_url.indexOf('?') >= 0) {
        base_array = base_url.split('?')[1].split('&');
      } else {
        base_array = [];
      }

      filters = $el.find('.w-filter-checkboxes-item').map(function () {
        return $(this).data('filter');
      });
      sort_order = $el.find('.w-filter-select-option').data('sort-order');
      base_hash = {};

      base_hash = _self.createReqHashFromList(base_array);

      // remove all filters from base hash
      for (i = 0; i < filters.length; i++) {
        delete base_hash[filters[i]];
      }

      // remove all sort_orders from base hash
      delete base_hash.order_by;

      // remove page num
      delete base_hash.page;

      return base_hash;
    };

    // get param from data-attribute if it's available. otherwise use give option 
    this.getPluginParam = function (name) {
      return $el.data(name) || this.options[name];
    };

    this.init = function (el) {

      $el = $(el);
      this.options = $.extend({}, option_defaults, this.options);

      this.collectElements();
      this.setDefauls();
      this.bindEvents();
      $el.show();
    };

    this.destroy = function ($el) {
      this.unbindEvents();
    };
  };

};

jQuery.plugin('catalogFilters', window.App.Plugin.CatalogFilters(jQuery, window));
/*global jQuery, window, App, I18n, PubSub, utag, Modernizr, navigator, BrowserDetect*/


window.Plugin = window.Plugin ||  {};
window.Plugin.Flickr = window.Plugin.Flickr ||  {};
window.Plugin.Flickr.FlickrImages = function FlickrImages($, win) {

  return function () {
    'use strict';

    var
    _self = this,
      $el,
      $imagesConteiner,
      $daytimeSelect,
      $userSelect,
      $locationSelect,
      $map,
      $imageTemplate,
      $messageTemplate,
      messageTimeout,
      trackingTimeout,
      // $loadMorePrope,
      $tagArea,
      pageNum = 1,
      noMoreImages = false,
      optionDefaults = {
        inputContainers: '.gallery-page :input:not(.tag-area-input):not(.focus-helper):not(#daytime_id)',
        // inputContainers: '.gallery-page :input:not(.tag-area-input):not(.focus-helper):not(#user_tag):not(#daytime_id)',
        imagesConteiner: '.gallery-page .gallery-page-image-items',
        perPage: 15,
        autoScrollToContentAfterVisits: 1
      },
      flickrClient,
      isLoading = false,
      daytimes = ['morning', 'day', 'evening', 'night'];

    _self.seachParams = {};

    /**
     * Collect all elements that needs to be cached
     * @return undedined
     */
    this.initializeElements = function () {

      $imagesConteiner = $el.find(this.options.imagesConteiner);
      $imageTemplate = $imagesConteiner.find('.template').detach();
      $messageTemplate = $el.find('.gallery-page-user-notification').hide();
      // $loadMorePrope = $el.find('.load-more-prope');
      $tagArea = $('.tag-area');
      $daytimeSelect = $('#daytime_id');
      $userSelect = $('#user_tag');
      $locationSelect = $('#place_id');

      $map = $('.map-abstract');

      flickrClient = new window.App.Module.Flickr(
        I18n.flickr ? I18n.flickr.api_key : '555354db44f90b47ce53da97265397cf',
        I18n.flickr ? I18n.flickr.user_id : '109154139@N08'
      );
    };

    /**
     * Run all other plugin init if neede
     * @return undefined
     */
    this.initOtherPlugin = function () {

      this.initTagsArea();
      this.initPlaces();
      this.initUsers();
      this.initDayTimes();
    };

    /**
     * Just notification helper
     * @param  {String} message that should be shown. This will be converted to default message if there is on debujs parameter or second parameter is false
     * @param  {boolean} showRealOne flag that forces function to show given error message.
     * @return {undefined}
     */
    this.showErrorMessage = function (message, showRealOne) {

      message = showRealOne || /debugjs/.exec(window.location.search) ? message : 'Something went wrong, please try again later.';
      $messageTemplate.find('.gallery-page-user-notification-text').text(message).end().show();

      clearTimeout(messageTimeout); // reset prevous hiding if there is going on. 

      messageTimeout = setTimeout(function () {
        _self.hideErrorMessage();
      }, 10000);
    };

    /**
     * Wrapper function that descripes more about functionality of showing message
     * @param  {String} message to been shown
     * @return {undefined}
     */
    this.showMessage = function (message) {
      _self.showErrorMessage(message, true);
    };

    /**
     * hideErrorMessage resets error message and hides notification container.
     * @return {undefined}
     */
    this.hideErrorMessage = function () {

      $messageTemplate.hide().find('.gallery-page-user-notification-text').text('');
      messageTimeout = undefined;
    };

    /**
     * Load tags from flickr service and init tags_area-plugin with returning result.
     * @return {undefined}
     */
    this.initTagsArea = function () {
      flickrClient.getUserTags(function (resp) {

        if (resp.isOk()) {
          var tags = resp.content;

          // init tags area with flickr tags
          $tagArea.tagArea({
            tags: tags
          });

          // if state has tags selected, set them
          var _state = HistoryUlrHelper.getStateFromUrlParams();

          if (_state.tags) {
            _self.setTagsSelected(_state.tags, true);
          }

        }
        else {
          _self.showErrorMessage(resp.message);
        }

      });
    };

    this.setTagsSelected = function (tags, silent) {

      var i;
      silent = silent ||  false;
      tags = tags.split(',');

      if (silent) {
        $tagArea.tagArea('setSilent', true);
      }

      for (i = tags.length - 1; i >= 0; i--) {
        $tagArea.tagArea('selectTag', tags[i]);
      }

      if (silent) {
        $tagArea.tagArea('setSilent', false);
      }
    };

    /**
     * Load Places from flicker service
     * @return undefined
     */
    this.initPlaces = function () {
      flickrClient.getPlacesForUser(function (resp) {
        if (resp.isOk()) {
          _self.initSelectInputForPlaces(resp.content);
        }
        else {
          _self.showErrorMessage(resp.message);
        }
      });
    };

    this.initUsers = function () {
      flickrClient.getUsers(function (resp) {
        if (resp.isOk()) {
          _self.initSelectInputForUsers(resp.content);
        }
        else {
          _self.showErrorMessage(resp.message);
        }
      });
    };

    this.initDayTimes = function () {
      $daytimeSelect.enhanceSelect({
        'showEmptyValues': true,
        functionsFromWidth: 0, 
        focusHelperReadonly: true
      });
    };

    /**
     * Init enhanceSelect-plugin for given places.
     * @param  Array of places that is used in select element
     * @return undefined
     */
    this.initSelectInputForPlaces = function (places) {
      var i, len = places.length,
        $option,
        $template = $($locationSelect.children().first()),
        window_location_search = window.location.search;

      for (i = 0; i < len; i++) {

        $option = $template.clone().val(places[i].getPlaceId()).text(places[i].getWoeName());

        if (new RegExp('place_id=' + places[i].getPlaceId()).test(window_location_search)) {
          $option.attr('selected', 'selected');
        }
        $locationSelect.append($option);
      }

      $locationSelect.enhanceSelect({
        'showEmptyValues': true,
        functionsFromWidth: 0,
        focusHelperReadonly: true
      });
    };

    this.initSelectInputForUsers = function (users) {
      var i, len = users.length,
        $option,
        $template = $($userSelect.children().first());

      for (i = 0; i < len; i++) {

        $option = $template.clone().val(users[i].getId()).text(users[i].getName());

        if (new RegExp('user=' + users[i].getId()).test(window.location.search)) {
          $option.attr('selected', 'selected');
        }
        $userSelect.append($option);
      }

      $('.gallery-page select.filter-set-select.user').enhanceSelect({
        'showEmptyValues': true,
        functionsFromWidth: 0,
        focusHelperReadonly: true
      });
    };

    /**
     * Handle returning images from flickr service.
     * @param Array of photos that shoudl be added;
     * @return indefined
     */
    this.addPhotosFromSearchCall = function (data) {
      var i, len,
        template;

      len = data.content ? data.content.length : 0;

      noMoreImages = (len === 0 || len < _self.options.perPage);

      for (i = 0; i < len; i++) {
        template = $imageTemplate
          .clone()
          .removeClass('template')
          .addClass('do-opacity-fade-in');

        // Fix cloned content for IE6-8. 
        // jQuery.clone uses cloneNode and it doesn't work incorrectly on HTML5 elements in IE6-8 
        // by creating elements like <:element>. http://bugs.jquery.com/ticket/10501. 
        // Html5shiv currently doesn't address cloneNode problem.
        if (BrowserDetect.browser === 'Explorer' && BrowserDetect.version <= 8) {
          template.html($imageTemplate.html());
        }

        _self.setImageTemplateValues(template, data.content[i]);

        $imagesConteiner.append(template);
      }
      isLoading = false;
      _self.fadeInContent();
      PubSub.publish('FlickGallery.newImages', {});

    };

    /**
     * Combines given template and image information.
     * @param {html} template that has structure for every image element.
     * @param {Object} photo object that has data of photo.
     */
    this.setImageTemplateValues = function (template, photo) {

      // set image attributes
      _self.setImageValues(template, photo);

      // set tags
      _self.setTagValues(template, photo);

      // set social sharing links
      _self.setScoalSharingLink(template, photo);
    };

    /**
     * Find and set all needed values for image
     * @param {html} template to be filled
     * @param {Object} photo data
     */
    this.setImageValues = function (template, photo) {
      var $img = template.find('.visuals img'), 
        fallback_src = photo._data.url_m || photo._data.url_c || photo._data.url_l;

      // set image attrs
      $img.one('load', _self.setImageRationClass)
        .one('error', function (e) {
          $(this).parents('.gallery-page-image-item').remove();
        });

      _self.setImageUrl($img, 'src', photo, photo.getUrlC, fallback_src);
      _self.setImageUrl($img, 'data-gallery-image-m', photo, photo.getUrlC, fallback_src);
      _self.setImageUrl($img, 'data-gallery-image-l', photo, photo.getUrlL, fallback_src);
      _self.setImageUrl($img, 'data-gallery-image-o', photo, photo.getUrlO, fallback_src);

      // set description
      template.find('.description a').text(photo.getTitle());
    };

    this.setImageUrl = function(img, attr, data, fn, fallback_src) {
      
      var value;
      
      try{
        value = fn.call(data);
        img.attr(attr, value)
      } catch(e) {
        img.attr(attr, fallback_src)
      }
    };

    this.setImageRationClass = function () {
      var img = $(this),
        className = img.height() > img.width() ? 'portrait' : 'landscape';

      img.addClass(className);
    };

    /**
     * Find and set all needed values for tags
     * @param {html} template to be filled
     * @param {Object} photo data
     */
    this.setTagValues = function (template, photo) {

      var tagList = template.find('.tag-list'),
        userTags = _self.parseUserTags(photo.getTags()),
        tagTemplate = $(tagList.children().first()).detach(),
        _tempTag,
        i,
        len = userTags.length;

      tagList.empty().hide();

      userTags.sort();

      for (i = 0; i < len; i++) {
        _tempTag = tagTemplate.clone();
        _tempTag.find('a').attr({
          'src': '#' + userTags[i],
          'title': '#' + userTags[i],
          'data-tag-value': userTags[i]
        }).text('#' + userTags[i]);
        tagList.append(_tempTag);
      }

      tagList.show();
    };

    this.setScoalSharingLink = function (template, photo) {

      var flickrImageShareUrl = 'http://www.flickr.com/photos/' + photo.getOwner() + '/' + photo.getId() + '/',
        fbShare = 'http://www.facebook.com/sharer/sharer.php?u=' + flickrImageShareUrl,
        twitterShare = 'http://www.twitter.com/share?url=' + flickrImageShareUrl;

      template.find('a.facebook').attr('href', fbShare);
      template.find('a.twitter').attr('href', twitterShare);
    };

    this.parseUserTags = function (tags) {
      var ret = [],
        i;

      tags = tags.split(' ');

      for (i = tags.length - 1; i >= 0; i--) {
        if (!/\:/.test(tags[i])) {
          ret.push(tags[i]); // filter away all result that contains ':'-character 
        }
      }
      return ret;
    };

    /**
     * Empty images container add add new images to it.
     * @param  Array of photos that were match for selected filters
     * @return undefined
     */
    this.replaceAllImages = function (resp) {

      $imagesConteiner.empty();

      if (resp.content && resp.content.length === 0) {
        _self.showMessage('Result with these filter was empty');
      }
      else {
        _self.addPhotosFromSearchCall(resp);
      }
      isLoading = false;

      setTimeout(function () {
        $imagesConteiner.height('auto');
      }, 1000);

    };

    /**
     * This is wrapper function for replaceAllImages. This is separated cause these functions are used on flickr callbacks.
     * @param  Array of photos that were match for selected filters
     * @return undefined
     */
    this.replaceAllImagesAndSnapToContent = function (resp) {
      if (resp.isOk()) {
        _self.replaceAllImages(resp);
        _self.snapToContent();
      }
      else {
        _self.showErrorMessage(resp.message);
      }
    };

    /**
     * This is wrapper function for replaceAllImages. This is separated cause these functions are used on flickr callbacks.
     * @param  Array of photos that were match for selected filters
     * @return undefined
     */
    this.replaceAllImagesAndScrollToContent = function (resp) {
      if (resp.isOk()) {
        _self.replaceAllImages(resp);
        _self.scrollToContent();
      }
      else {
        _self.showErrorMessage(resp.message);
      }
    };

    /**
     * reset deafult params for flickr search
     */
    this.setBaseParams = function () {
      _self.seachParams = {
        page: pageNum,
        tag_mode: 'all',
        // sort: 'date-posted-desc',
        per_page: _self.options.perPage,
        extras: 'description,tags,url_m,url_c,url_l,url_o'
      };
    };

    /**
     * Event handler gets all inputs, creates request params out of it and executes flickr query.
     * @return undefined
     */
    this.handleFilterChange = function () {

      // reset pagenum
      pageNum = 1;
      noMoreImages = false;
      _self.setBaseParams();
      _self.doSearchWithCurrentFilters();
      _self.pushCurrentStateToHistory();
    };

    /**
     * handles tracking calls and timeouts
     * @return {undefind}
     */
    this.afterQueryHandle = function () {

      if (trackingTimeout) { // kill previous tracking delay
        clearTimeout(trackingTimeout);
      }
      trackingTimeout = setTimeout(_self.pushEventToTracking, 2500); // give user time to settle down. 
    };

    /**
     * Helper method that can be used with $.map function.
     * It will loop all  of elements on list and compares attribute value with given value.
     * If it matches, it pushes current element to returning array.
     * @param  {[type]} attribute_name    to be compared
     * @param  {[type]} value             value to be found
     * @return {Function}                 function that compares fiven elements and attributes.
     */
    function selectByAttribute(attribute_name, value) {

      return function (i, item) {
        if (item.getAttribute('value') === value) {
          return item;
        }
      };
    }

    /**
     * Makes tracking call with current state
     * @return {undefined}
     */
    this.pushEventToTracking = function () {

      var currentState, cityName;

      if (!window.isTrackingAvailable) { // it trackig is not available. just return. 
        return;
      }

      currentState = HistoryUlrHelper.getState();

      if (currentState.place_id) {
        cityName = $locationSelect.children()
          .map(selectByAttribute('value', currentState.place_id))
          .first()
          .text();
      }

      utag.link({
        link_id: window.location,
        linkEvent: 'passItOnRequest',
        tags: currentState.tags,
        city: cityName,
        user_id: currentState.user,
        page: pageNum,
        link_text: 'pass it on:' + cityName + ':' + currentState.tags
      });
    };

    this.handleTagAreaChange = function (e) {

      $userSelect.enhanceSelect('select', '', true);
    };

    /**
     * Handle map-abstract interactions
     * @param  {Event} e click event from map
     * @return {undefined}
     */
    this.handleMapClick = function (e) {

      e.preventDefault();

      var value = e.target.getAttribute('data-location-id');
      if (value) {

        $locationSelect.enhanceSelect('select', value);
      }
    };

    /**
     * handle 'back to top' click
     * @param  {[type]} e [description]
     * @return {[type]}   [description]
     */
    this.handleBackToTop = function (e) {

      e.preventDefault();
      window.scrollTo(0, 0);
    };

    this.handleDaytimeChange = function (e) {

      var i;
      // remove all matching tags
      $tagArea.tagArea('setSilent', true);

      for (i = daytimes.length - 1; i >= 0; i--) {
        $tagArea.tagArea('removeTag', daytimes[i]);
      }
      $tagArea.tagArea('setSilent', false);

      // add selected value to tag area
      _self.setTagsSelected(e.currentTarget.value, false);

      setTimeout(function () { // let event loop to tick to select to default state
        $daytimeSelect.enhanceSelect('select', '', true);
      }, 50);
    };

    this.removeAllTags = function () {

      // remove all tags cause flickr rest api uses tags OR test
      $tagArea.tagArea('setSilent', true);
      $tagArea.tagArea('removeAllTag');
      $tagArea.tagArea('setSilent', false);
    };

    this.doSearchWithCurrentFilters = function () {

      $imagesConteiner.children().customAnimate({
        opacity: 0
      }, 500);
      isLoading = true;
      _self.hideErrorMessage();
      flickrClient.getSearch(undefined, _self.getSearchParams(), _self.replaceAllImagesAndScrollToContent, _self);

      _self.afterQueryHandle();
    };

    /**
     * helper function to flat array
     * @param  {Array} arr to be flatten
     * @return {Array}     flat array
     */
    function flattenArray(arr) {
      if (arr instanceof Array) {
        arr = arr.join(',');
      }
      return arr;
    }

    /**
     * Collect and extend search params from input values
     * @return {undefined}
     */
    this.extendSearchParamsWithInputs = function (params) {

      var tagContainer = $(_self.options.inputContainers);

      params = jQuery.extend({}, params);

      // handle basic inputs, but filter out daytime
      tagContainer.filter(':not(#daytime_id)').each(function () { // Iterate over inputs
        if ($(this).val()) {
          params[$(this).attr('name')] = $(this).val(); // Add each to features object
        }
      });

      params.tags = flattenArray(params.tags);
      return params;
    };

    this.extendSearchParamsWithUserSelect = function (params) {
      var val = $userSelect.val();
      if (val) {
        params = $.extend(params, {
          '_text': val
        });
      }
      return params;
    };

    /**
     * Extends object with param, if params is not undefined.
     * @param  {Object} obj   [description]
     * @param  {attributes} attrs [description]
     * @return {undefined}       [description]
     */
    function extendIfDefined(obj, attrs) {

      var i,
        keys = Object.keys(attrs),
        val;

      for (i = keys.length - 1; i >= 0; i--) {
        val = attrs[keys[i]];
        if (val) {
          obj[keys[i]] = val;
        }
      }

      return obj;
    }

    /**
     * gets current search params and push state to history
     * @return {undefined}
     */
    this.pushCurrentStateToHistory = function () {

      var _state = {},
        seachParams = _self.getSearchParams();

      _state = extendIfDefined(_state, {
        tags: seachParams.tags,
        place_id: seachParams.place_id,
        user: seachParams.user_tag // 'jotain'// /morning|day|evening|night/.exec(seachParams.tags)
      });

      HistoryUlrHelper.pushState(_state, HistoryUlrHelper.getParamsUrlFromState(_state));
    };

    /**
     * Scroll event handler.
     * Should contain load mdoe handling
     * @param  Event e (scroll event)
     * @return undefind
     */
    this.handleScroll = function (e) {

      var windowHeight = $(window).height(),
        last_image = $imagesConteiner.find('img:last'),
        shouldLoadMore = false;

      shouldLoadMore = last_image.length > 0 && (last_image.position().top + last_image.height()) - ($(window).scrollTop() + windowHeight * 1.75) < 0;

      // if there is filter defined, just return
      if (!shouldLoadMore || !_self.seachParams ||  noMoreImages ||  isLoading) {
        return;
      }

      pageNum += 1;

      _self.seachParams.page = pageNum;

      flickrClient.getSearch(undefined, _self.getSearchParams(), _self.addPhotosFromSearchCall, this);
    };

    this.handleImageTagClick = function (e) {

      e.preventDefault();
      $tagArea.tagArea('selectTag', e.target.getAttribute('data-tag-value'));
    };

    this.handleHistoryPopstate = function (e) {

      // reset pagenum
      pageNum = 1;
      _self.setBaseParams();

      _self.seachParams = $.extend({}, _self.seachParams, HistoryUlrHelper.getStateFromUrlParams());

      flickrClient.getSearch(undefined, _self.seachParams, _self.replaceAllImagesAndSnapToContent, this);

      _self.setInputValuesBasedOnUrl();

      _self.afterQueryHandle();
    };

    this.setInputValuesBasedOnUrl = function () {
      var val, tags;
      if (/place_id=[A-Za-z0-9]*/.test(window.location.search)) {
        val = /place_id=[A-Za-z0-9]*/.exec(window.location.search)[0].split('=')[1];
        $locationSelect.enhanceSelect('select', val, true);
      }
      else {
        $locationSelect.enhanceSelect('select', '', true);
      }

      if (/user=\@[A-Za-z0-9]/.test(window.location.search)) {
        val = /user=\@[A-Za-z0-9]*/.exec(window.location.search)[0].split('=')[1];
        $userSelect.enhanceSelect('select', val, true);
      }
      else {
        $userSelect.enhanceSelect('select', '', true);
      }
      tags = /tags=[A-Za-z0-9\,]*/.exec(window.location.search);
      _self.removeAllTags();
      if (tags) {
        _self.setTagsSelected(tags[0].split('=')[1], true);
      }
    };

    /**
     * Handle animations for new images.
     * @return {[type]} [description]
     */
    this.fadeInContent = function () {

      window.opacityFadeIn($('.do-opacity-fade-in'), function () {
        $(this).removeClass('do-opacity-fade-in');
      });
    };

    this.scrollToContent = function () {
      var pageViews = $.cookies.get('passItOnpageVisits') ||  0;
      $.cookies.set('passItOnpageVisits', pageViews + 1);
      if (pageViews > _self.options.autoScrollToContentAfterVisits) {
        $('html, body')
          .delay(500)
          .stop()
          .animate({
            scrollTop: $('article.gallery-page').offset().top
          }, 300);
      }
    };

    this.snapToContent = function () {

      window.scrollTo(0, $('article.gallery-page').offset().top);
    };

    /**
     * set elements as default state
     */
    this.setDefauls = function () {

      this.setBaseParams();

      if (!Modernizr.history || (Modernizr.history && !(/Chrome/).test(navigator.userAgent))) { // if history is defined, pop state will trigger image search
        // Trigger scrolling to content after image loading. 
        // This how container is high enough so scrolling won't end to early.
        flickrClient.getSearch(undefined, _self.getSearchParams(), function runBoth(data) {
          _self.addPhotosFromSearchCall(data);
          _self.afterQueryHandle();

        }, this);
      }
    };

    this.getSearchParams = function () {

      var params = _self.extendSearchParamsWithInputs(_self.seachParams);

      params = _self.extendSearchParamsWithUserSelect(params);

      return params;
    };

    this.bindEvents = function () {

      $(window).on('scroll.' + this.namespace, $.debounceScroll(this.handleScroll, 300));
      $(window).on('popstate.' + this.namespace, $.debounce(this.handleHistoryPopstate, 50));

      $tagArea.on('change.' + this.namespace, this.handleTagAreaChange);
      $(this.options.inputContainers).on('change.' + this.namespace, $.debounce(_self.handleFilterChange, 50)); // add some delay so other event handlers has time to act. 
      $imagesConteiner.on('click.' + this.namespace, '.tag-list-item', this.handleImageTagClick);
      $daytimeSelect.on('change.' + this.namespace, this.handleDaytimeChange);
      $userSelect.on('change.' + this.namespace, this.removeAllTags);
      $map.on('click.' + this.namespace, ' .map-abstract-location-label', this.handleMapClick);
      $('.gallery-page-to-top').on('click.' + this.namespace, this.handleBackToTop);
    };

    this.unbindEvents = function () {

      $(this.options.inputContainers).off('.' + this.namespace);
      $map.off('.' + this.namespace);
    };

    this.init = function (el) {

      if (!el) { // return if nothings happening
        return;
      }

      $el = $(el);
      this.options = $.extend({}, optionDefaults, this.options);

      this.initializeElements();
      this.initOtherPlugin();

      this.setDefauls();
      this.bindEvents();

      $el.show();
    };

    this.destroy = function ($el) {
      this.unbindEvents();
    };
  };
};

jQuery.plugin('flickrImages', window.Plugin.Flickr.FlickrImages(jQuery, window));
(function($) {

  $.plugin('formConfirmation', function() {

    "use strict";

    var _self = this, $form, confirmed = false,

    default_options = {
      hiddenWhenConfirm: null,
      progress: null,
      showWhenConfirm: null
    };

    this.confirmForm = function(){
      $form.find(':input').each(function(){

        $form.addClass("form-confirmation");
        var $input = $(this), value;

        if ($input.is("input:button") || $input.is("input:reset") || $input.is("input:submit"))
          return true;

        if ($input.is("input:checkbox")) {
          $input.after($('<div class="confirmation-checkbox confirmation-value">' + $input.parent().children('.checkbox-desciption').html() + '</div>'));
          // Disable clicks on checkbox labels
          $input.parent().on('click.disable_label_clicks', function(e) {
            e.preventDefault();
          });
          return true;
        }

        if ($input.is("input:text") || $input.is("textarea")) {
          value = $input.val();
        } else if ($input.is("select")) {
          value = $input.children(":selected").text();
        }

        $input.after($('<span class="confirmation-value">' + value + '</span>'));
      });

      $form.find(':reset').hide()
        .before($('<input type="button" class="button secondary back-to-form confirmation-button" value="' + I18n.repair_form.edit_label + '" />'));
      
      $form.find(':submit').val(I18n.repair_form.submit_label);
      //Adding the ID to prevent the repair form submit multiple times
      $form.find(':submit').attr('id','repair_form_submit');
      $('#repair_form_submit').click(function(){
        $(this).attr('disabled','disabled');
        $form.submit();
      });

      if($(_self.options.hiddenWhenConfirm).length > 0)
        _self.options.hiddenWhenConfirm.hide();

      if($(_self.options.showWhenConfirm).length > 0)
        _self.options.showWhenConfirm.show();

      _self.updateProgress('confirm');

      confirmed = true;
    };

    this.backToForm = function(e) {
      // Re-bind form validations
      $form.removeClass("form-confirmation");
      $form.find('.confirmation-checkbox').remove();
      $form.find('.confirmation-value').remove();
      $form.find(':reset').show();
      $(this).remove();
      $form.find(':submit').val(I18n.repair_form.proceed_label);
      // Enable label toggling
      $form.find('input:checkbox').parent().off('.disable_label_clicks');

      if($(_self.options.hiddenWhenConfirm).length > 0)
        _self.options.hiddenWhenConfirm.show();

      _self.updateProgress('fill');
      confirmed = false;
    };

    this.updateProgress = function(status) {
      var $progress = _self.options.progress;
      if($progress.length > 0) {
        $progress.find('.active').removeClass('active');
        $progress.find('.progress-step').each(function(){
          if($(this).data('status') === status) {
            $(this).addClass('active');
            return false;
          }
        });
      }
    };

    this.confirmFormProxy = function(el, valid) {
      if (confirmed) {
        return valid;
      } else {
        _self.confirmForm();
        return false;
      }
    };

    this.init = function(el) {
      this.options = $.extend({}, default_options, this.options);
      $form = $(el);

      $(document).on('confirm_form', this.confirmForm);
      $form.on('click.' + this.namespace, '.back-to-form', this.backToForm);
    };

    this.destroy = function(el) {
      $(document).off('confirm_form', this.confirmForm);
      $form.off('click.' + this.namespace);
    };

  });
})(jQuery);
/* global jQuery, I18n */


(function ($) {

  $.plugin('formValidation2', function () {

    'use strict';

    this.VERSION = '2.0.0';

    var _self = this,
      option_defaults = {
        submitCallback: $.noop
      },
      $form,
      validate,
      validateElement,
      getRule,
      ruleGroup,
      NewValidator,
      splitStringAfter,
      splitAndCleanupStrings,
      validateAll,
      resetErrorMessage,
      isValid,
      group_rules_errors,
      general_rules_errors,
      submitCallback,
      default_rules = {
        exists:       {is_valid: _validate_exists},
        checked:      {is_valid: _validate_checked},
        email:        {is_valid: _validate_email},
        imei:         {is_valid: _validate_imei},
        regex:        {is_valid: _validate_regex},
        purchase_date: {is_valid: _validate_date_within_one_year}
      },
      parameterised_rules = {
        same_as_: {is_valid: _validate_same_as},
        min_length_is_: {is_valid: _validate_min_lenght}
      };

    function _validate_exists(value) {
      return value && value.length > 0;
    }

    function _validate_checked(value, $element) {
      return $element.prop('checked');
    }

    function _validate_email(value) {
      // var tester = /^(("[\w-+\s]+")|([\w-+]+(?:\.[\w-+]+)*)|("[\w-+\s]+")([\w-+]+(?:\.[\w-+]+)*))(@((?:[\w-+]+\.)*\w[\w-+]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/;
      var tester = /^$|^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/;
      return tester.test(value);
    }

    function _validate_imei(value) {
      var tester = /^$|^((\w{11})|(\w{15})|\w{16}|\w{18})$/;
      return tester.test(value);
    }

    function _validate_regex(value, $element) {
      var tester = new RegExp(group_rules_errors[$element.attr('id')].regex.regex);
      return tester.test(value);
    }

    function _validate_same_as(value, $element, param) {
      $('#' + param).on('change.'  + _self.namespace + '.validation_observer', function () {
        validateElement($element);
      });

      return $('#' + param).val() === '' || $('#' + param).val() === value;
    }

    function _validate_min_lenght(value, $element, params) {
      return  value.length >= parseInt(params, 10);
    }

    function _validate_date_within_one_year(value) {
      var userDate,
        today,
        lastValidDate,
        splitChar = value.match(/\D/)[0],
        splitDate = value.split(splitChar);
      
      // Convert user date to a Date object
      userDate = new Date(splitDate[2], splitDate[1] - 1, splitDate[0]);
          
      // Copy user date object
      lastValidDate = new Date(userDate.getTime());

      // Move the user date by one year forward
      lastValidDate.setYear(lastValidDate.getFullYear() + 1);
      
      // Get current date
      today = new Date();
      // Reset the time
      today.setHours(0, 0, 0, 0);

      // User date is valid when it it not set in future and it is within one year range
      return (userDate.getTime() <= today.getTime() && today.getTime() <= lastValidDate.getTime());
    }

    // Bind event to this one. 
    // This get event target and passes it to validation function.
    validate = function (e) {
      validateElement($(e.target));
    };

    validateElement = function ($element) {
      var rules = splitAndCleanupStrings($element.data('valid-when')),
          rule,
          $error_element,
          valid = true;

      // run validators bind to rules      
      for (var i = 0; i < rules.length; i++) {
        rule = getRule(rules[i]);

        if ($element.parent().children('.field-error').length > 0) {
          $error_element = $element.parent().children('.field-error');
        } else {
          $error_element = $('<div class="field-error error"></div>');
        }

        if (!rule.is_valid($element.val(), $element)) {
          if ($.isFunction(rule.getMessage)) {
            $error_element.html(rule.getMessage());
          } else {
            $error_element.html(general_rules_errors[rules[i]]);
          }

          $element.before($error_element);
          valid = false;

          // If one error found, there is no need to check others
          break;

        } else {
          $error_element.remove();

        }
      }
 
      return valid;
    };

    getRule = function (rule_name) {
      var rule,
        param,
        splitted_name = splitStringAfter(rule_name, '_is_') || splitStringAfter(rule_name, '_as_');
      
      if (default_rules[rule_name]) { // check id defualt rule exists
        rule = default_rules[rule_name];
      } else if (splitted_name) {
        // parameterised rules
        rule = parameterised_rules[splitted_name[0]];
        param = splitted_name[1];

        // push rule to default rules
        default_rules[rule_name] = {is_valid: (new NewValidator(rule, param)), error_selector: rule.error_selector};
        rule = default_rules[rule_name];

      } else {
        rule = ruleGroup(rule_name);
      }

      return rule;
    };

    ruleGroup = function (rule_name) {
      if (typeof group_rules_errors === 'undefined') return;

      var context = rule_name.split('rules_')[1],
        rule_set = group_rules_errors[context],
        keys = Object.keys(rule_set),
        rules = [],
        rule;

      for (var i = keys.length - 1; i >= 0; i--) {
        rules.push({fn: getRule(keys[i]), message: rule_set[keys[i]].message});
      }

      rule = function (_rules) {
        var _message = '_errormessage';
        
        function _is_valid(value, $element) {
          var valid = true;
          for (var i = _rules.length - 1; i >= 0; i--) {
            valid = valid && _rules[i].fn.is_valid(value, $element);
            if (!valid) {
              _message = _rules[i].message;
              break;
            }
          }
          return valid;
        }

        return {
          getMessage: function () { return _message; },
          is_valid: _is_valid
        };
      
      }(rules);
       
      return rule;
    };

    NewValidator = function (rule, param) {
      var _rule = rule,
          _param = param;
      
      return function (value, $element) {
        return _rule.is_valid(value, $element, _param);
      };
    };

    splitStringAfter = function (value, split_after) {
    
      if (value.indexOf(split_after) > -1) {
        return [
          value.substring(0, value.indexOf(split_after) + split_after.length),
          value.substring(value.indexOf(split_after) + split_after.length, value.length)
        ];
      } else {
        return undefined;
      }
    };
  
    splitAndCleanupStrings = function (rules) {
      var ret = [],
      values = rules ? rules.split(' ') : [],
      val;

      for (var i = 0; i < values.length; i++) {
        val = $.trim(values[i]);
        if (val) ret.push(val);
      }
      return ret;
    };

    validateAll = function (e) {
      var valid = true,
        confirmed;

      $form.find('input, textarea, select').each(function () {
        var input = $(this),
        single_result = validateElement(input);
        valid &= single_result;
      });

      if (!valid) {
        e.preventDefault();
        e.stopImmediatePropagation();
        return valid;
      } else {
        confirmed = $form.data('formConfirmation').confirmFormProxy(undefined, valid);
        if(confirmed && $.isFunction(submitCallback))
          submitCallback($(this));
        return confirmed;
      }
    };

    // make alias for externals usege
    isValid = validateAll;

    resetErrorMessage = function(e) {
      $form.find('.field-error').remove();
    };

    // component initializer
    this.init = function (el) {
      this.options = $.extend({}, option_defaults, this.options);
      submitCallback = this.options.submitCallback;

      if (typeof I18n.form_validation_group_rules_messages !== 'undefined') {
        group_rules_errors = I18n.form_validation_group_rules_messages;
      }

      if (typeof I18n.form_validation_general_rules_messages !== 'undefined') {
        general_rules_errors = I18n.form_validation_general_rules_messages;
      }

      $form = $(el);
      $form.on('submit.' + this.namespace, validateAll);
      $form.on('change.' + this.namespace, 'input[type=text], textarea, select', validate);
      $form.on('click.' + this.namespace, 'input[type=checkbox]', validate);
      $form.on('click.' + this.namespace, 'input[type=reset]', resetErrorMessage);

    };

    // component uninitializer
    this.destroy = function (el) {
      $form.off('submit.' + this.namespace);
      $form.off('change.' + this.namespace);
      $form.off('click.' + this.namespace);
      $form.off('change.' + this.namespace + '.validation_observer');
      $form.removeData('formValidation2');
    };

  });
})(jQuery);
(function($) {

//Function for newsletter subscription
$("select.select-other-option").change(function() {

    var element = $("#for-" + $(this).attr("id"));	
    if($(this).find("option:selected").val() ==="other") {
	 $(element).show();
	 $(element).addClass("required-item");
    } else if ($(this).find("option:selected").val() !== "") {		  		    	 	    
	 $(element).hide();
	 $(element).removeClass("required-item");
    }
}).change();

	$.fn.formValidation = function(options) {
		
		var $wrap = $(this);

		return this.each(function() {
			validateForm = function() {
				var allOK = true;
				
				// each form
				$wrap.each(function() {
				  var items = $(this).find('label');
          var inputFile = $(this).find('.file');
          
          // for each form item
  				items.each(function() {
  				  // if not visible, no validation required
  					if (!$(this).is(':visible')) {
  						return true;
  					}
  
  					// check field type
  					var type = "";
  					var showError = false;
  					var errorNumber = 1;  // same field can have multiple error messages
  					var imei_regex = new RegExp(/^((\w{11})|(\w{15})|\w{16}|\w{18})$/g);
  					var phone_regexp = new RegExp(/^([ 0123456789-]*)$/g);
  
  					if ($(this).find("input").length) {
  						type = "input";
  					} else if ($(this).find("textarea").length){
  						type = "textarea";
  					}
  
  					if ($(this).hasClass('email')) {
  					  // check emtpy field and placeholder first
  					  var fieldEmpty = ($(this).find("input#email").val() === "");
  					  var placeholderSame = ($(this).find("input#email").attr("placeholder") === $(this).find("input#email").val());
  					  if ((fieldEmpty || placeholderSame)) {
  					    if ($(this).hasClass('required-item')) {
    					    errorNumber = 2;
    					    showError = true;
    					  }
  					  } else {
    						var filter = /^(("[\w-+\s]+")|([\w-+]+(?:\.[\w-+]+)*)|("[\w-+\s]+")([\w-+]+(?:\.[\w-+]+)*))(@((?:[\w-+]+\.)*\w[\w-+]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/;
    						var val = $(this).find(type).val();
    						showError = !val || !filter.test(val);
    					}
  					} else if ($(this).hasClass('email2')) {
  						var ours = $(this).find(type).val();
  						var other = $wrap.find('.required-item.email input').val();
  						showError = !ours || ours != other;
  					} else if($(this).hasClass('imei_code') && $(this).hasClass('required-item')){ 
  					  // lets do regexp match and 
  						var imeiValue = $(this).find('#' + $(this).attr('for')).val();
              var regexpOK = imeiValue.match(imei_regex);
              var luhnOK = checkLuhn(imeiValue);
              showError = !(regexpOK && luhnOK);
  					} else if($(this).hasClass('mobile_number')){
  					  var fieldEmpty = ($(this).find("input#mobile_number").val() === "");
  					  if (fieldEmpty) {
  					    if ($(this).hasClass('required-item')) {
                  errorNumber = 2;
                  showError = true;
                }
              } else {
                // lets do regexp match and 
                var phoneNumberValue = $(this).find('#' + $(this).attr('for')).val();
                var phoneNumberValueTrimmed = phoneNumberValue.replace(/\s/g, "");
                var regexpOK = phoneNumberValueTrimmed.match(phone_regexp);
                showError = !(regexpOK);
              }
            } else if($(this).hasClass('select') && $(this).hasClass('required-item')){ 		
  						
  						if ($(this).find("option:selected").val() === "") {													
  							showError = !$(this).find('select').val();
      						}
  						
  					} else if (($(this).find(type).attr('type') === "checkbox") && $(this).hasClass('required-item')) {
  						showError = !$(this).find(type).is(':checked');
  					} 
  					else {
  						// check that field is non-empty
  						if ($(this).hasClass('required-item')){
  						  showError = !$.trim($(this).find(type).val());
  						}
  					}
  					
  					if ($(this).hasClass('noSpecialChars')) {
  						var filter = /^[^*\[\]{}()!@#$%^\\&\+\=|\?<>\/;:~`]*$/;
  						var val = $(this).find(type).val();					 
  						var showError = !val || !filter.test(val);
    					}
  
  					if (showError) {
  					  if (errorNumber === 1) {
  						  $(this).find(".required-note").show();
  						  $(this).find(".required-note-2").hide();
  						} else if (errorNumber === 2) {
  						  $(this).find(".required-note-2").show();
  						  $(this).find(".required-note").hide();
  						}
              if($(this).parent().find('#campaign').is(':disabled')){
                $(this).parent().find('#campaign').attr('disabled',false);
              }
              $(this).parent().find('#campaign').addClass('has-error');
  						allOK = false;
  					} else {
  						$(this).find(".required-note").hide();
  						$(this).find(".required-note-2").hide();
              if(!$(this).parent().find('#campaign').hasClass("has-error")){
                $(this).parent().find('#campaign').attr('disabled','disbaled');
              }
  					}
  				});
				
        if(typeof I18n.input_file !== 'undefined' && typeof I18n.input_file.valid_file_extension !== 'undefined' && I18n.input_file.valid_file_extension.length > 0) {
          inputFile.each(function(){
            // <input type="file"> should not be put into the <label>, because clicking <label> will launch the browser file window, which is not nice.
            // So when it has class "file", validate the next element of <label>
            var showError = true;
            var $input = $(this).next().children('input');
            if($input.length > 0 && $input.attr('type') === "file")
            {
              var filename = $input.val();
              if (filename =='' && !$(this).hasClass('required-item')) {
                $(this).find('.required-note').hide();
                return;
              }
              if(filename) {
                if (filename.indexOf(";") != -1) {
              		// common technique to use ; in the filename for tampering, especially for IIS
              		$(this).find('.required-note').show();
        					showError = true;
        					allOK = false;
        					return allOK;
  				      }

                var ext = filename.match(/\.([^\.]+)$/);
                if ($.isArray(ext) && typeof ext[1] !== 'undefined') {
                  ext = ext[1];
                  if (BrowserDetect.version === 8) {
                    var arrayOfFileExtensions = $.trim(I18n.input_file.valid_file_extension);
                    var arrayTemp = [];
                    var arrayElem = "";
                    for (var i = 0, j = 0; i < arrayOfFileExtensions.length; i++) {
                      if (arrayOfFileExtensions[i] === ",") {
                        arrayTemp[j] = arrayElem;
                        arrayElem = "";
                        j++;
                      } else {
                        arrayElem += arrayOfFileExtensions[i];
                      }
                    }
                    arrayOfFileExtensions = arrayTemp;
                  } else {
                    var arrayOfFileExtensions = I18n.input_file.valid_file_extension.trim().split(',');
                  }
                  if($.inArray(ext.toLowerCase(), arrayOfFileExtensions) >= 0) {
                    showError = false;
                    if (BrowserDetect.version == 8 || BrowserDetect.version == 9) {
                      var uploadedFileSize = 0;
                    } else {
                      var uploadedFileSize = $input[0].files[0].size;
                    }
                    if(typeof I18n.input_file.max_size !== 'undefined' && parseInt(I18n.input_file.max_size) * 1048576 < uploadedFileSize) {
                      showError = true;
                    }
                  }else{
                  	showError=true;
                  	allOK=false;
                  }
                }
              }
            }
  
            if(showError) {
              $(this).find('.required-note').show();
            }
            else {
              $(this).find('.required-note').hide();
            }

  			 });
  		  } // endof file check
			 }); // endof items each 
        return allOK;
			 } // endof validate form function
			 
  			// check if the input field is not empty or placeholder
  			searchFieldNotEmpty = function(inputField) {
          if (inputField.val().trim().length == 0 || inputField.val() === inputField.attr('placeholder')) {
            return false;
          } else {
            true;
          }
        }
		});
		
		// Luhn check validator for IMEI field
		function checkLuhn(input) {
      var sum = 0;
      var numdigits = input.length;
      var parity = numdigits % 2;
      for(var i=0; i < numdigits; i++) {
        var digit = parseInt(input.charAt(i))
        if(i % 2 == parity) digit *= 2;
        if(digit > 9) digit -= 9;
        sum += digit;
      }
      return (sum % 10) == 0;
    }
		
	}

})(jQuery);
(function($) {
  $.plugin('navigationTileHighPrio', function() {
    
    var index = 0,
        tilesCount = 0,
        highPrioPatternPointer = 0,
        highPrioNavigationSet = false,
        $section,
        options;
    
    this.options = {
      highPrioPattern: [0,6,9,15],
      windowTreshold: 1680
    };
    
    
    function setHighPrio() {
      if (($(window).width() > options.windowTreshold) && !highPrioNavigationSet) {
        $section.find(".wrapper > ul > li").each(function() {
          if (options.highPrioPattern[highPrioPatternPointer%(options.highPrioPattern.length)] === index) {
            $(this).addClass("high-priority");
            var newsrc = $(this).find('.visuals').find('img').data('xl');
            if(newsrc !== undefined){
              $(this).find('.visuals').find('img').attr('src',newsrc);
            }
            highPrioPatternPointer++;
            if (highPrioPatternPointer === options.highPrioPattern.length) {
              index = -1; 
            }
          }
          index++;
        });
        highPrioNavigationSet = true;
      } else if (($(window).width() < options.windowTreshold) && highPrioNavigationSet) {
        unsetHighPrio();
      }
    }
    
    
    function unsetHighPrio() {
      $section.find(".wrapper > ul > li").each(function() {
        $(this).removeClass("high-priority");
      });
      highPrioNavigationSet = false;
      index = 0, highPrioPatternPointer = 0;
    }
    
    
    this.init = function($el) {
      $section = $el;
      options = this.options;
      tilesCount = $section.find(".wrapper > ul > li").size();
      
      setHighPrio();
      $(window).on('resize', $.debounce(setHighPrio, 200)); 
    };
       
    this.destroy = function($el) {
      // Unbinds
    };
    
  });
})(jQuery);
/*global viewport, $, jQuery, window, App, BrowserDetect*/

/**
 * This plugin is simple content viewer that collects some parts from page and shows then in overlay.
 * It has been create for Pass It On campaign and works quite well.
 *
 * TODO's
 * - write some handler that align images vertically
 *
 */


App.namespace('Plugin.ImageViewer', function (namespace) {

  namespace.ImageViewer = function ImageViewer($, win) {

    return function () {
      "use strict";

      var
      _self = this,
        $el,
        $template,
        $modalBox,
        modalBoxTargetWidth = 0.80, // We want the modal box to be 80% of viewport width, including padding
        $modalBoxWrapper,
        currentIndex = 0,
        currentScreenWidth = 0,
        optionDefaults = {
          min_resolution: 480,
          content: '.gallery-page-image-item',
          img: '.visuals img',
          gallery_image_m: 'data-gallery-image-m',
          gallery_image_l: 'data-gallery-image-l',
          template: ["<div class='image-viewer'>",
            "<div class='image-viewer-modal-box'>",
            "    <div class='image-viewer-modal-box-wrapper'>",
            "    </div>",
            "     <a class='tap-area prev' href='#prev'><div class='tap-area-controller'></div></a>",
            "     <a class='tap-area next' href='#next'><div class='tap-area-controller'></div></a>",
            "  </div>",
            "</div>"
          ].join('')
        };

      /**
       * Handler for image viewer trigger click.
       * This should show overlay viewer when trigger has been clicked.
       * @param  {Event} e 'click' event
       * @return {undefined}
       */

      this.showImageViewer = function (e) {
        e.preventDefault();

        if (viewport().width >= _self.options.min_resolution) {

          var $image = $(e.currentTarget),
            imageContainer = $image.parents(_self.options.content)[0];

          if (!imageContainer) {
            return;
          }

          // Set temp height to modal box, because we don't know image height yet
          _self.tempHeight($image);

          // Vertically center modal box
          _self.centerModalBox($modalBox);

          // Pass item/image container index number to function
          _self.setCurrentContent($el.find(_self.options.content).index(imageContainer));

        }

      };

      this.tempHeight = function (target) {
        var $image = target,
          modalBoxPadding = parseInt($modalBox.css('padding').replace('px', '') * 2),
          modalBoxTargetWidthPx = (viewport().width * 0.8) - modalBoxPadding,
          modalBoxTargetHeightPx = (viewport().height * 0.8) - modalBoxPadding,
          modalBoxTargetWidthPercent = modalBoxTargetWidthPx / viewport().width,
          percentage,
          tempHeight,
          tempWidth;

        // If modal box contains a previously loaded image,
        // hide modal box wrapper, so that we don't see the wrong image
        if ($modalBoxWrapper.find(_self.options.img)[0] != undefined) {
          $modalBoxWrapper.fadeTo(0, 0);
        }

        // Set modal box width to target width
        $modalBox.css('width', (modalBoxTargetWidthPercent * 100) + '%');

        // Calculate a percentage value, 
        // so that we can calculate temp height
        percentage = $image.width() / modalBoxTargetWidthPx;

        // Calculate temp height
        tempHeight = Math.round($image.height() / percentage);

        // Check if temp height is bigger than viewport height
        if (tempHeight >= viewport().height || $image.is('.portrait')) {

          // Set max modal box height
          $modalBox.height(modalBoxTargetHeightPx);

        }
        else {

          // Set temp height
          $modalBox.height(tempHeight);

        }

        // Vertically center modal box
        _self.centerModalBox($modalBox);

      }

      this.preloadImages = function () {

        _self.preloadImageIndex(currentIndex + 1);
        _self.preloadImageIndex(currentIndex + 2);
        _self.preloadImageIndex(currentIndex - 1);
      };

      this.preloadImageIndex = function (index) {

        var content = $($el.find(_self.options.content)[index]),
          preload_image = $('<img>'),
          images = content.find(_self.options.img);

        for (var i = images.length - 1; i >= 0; i--) {
          preload_image.clone().attr('src', images[i].getAttribute(_self.getImageUrlAttributeName()));
        };
      };

      this.hideImageViewer = function (e) {

        // Do not close overlay, when child elements are clicked
        if (e.target !== this) {
          return;
        }

        $template.fadeOut();
      };

      this.handleControlClick = function (e) {
        e.preventDefault();
        e.stopPropagation();

        var $target = $(e.currentTarget),
          index,
          $currentGalleryImage,
          totalGalleryImages = $el.find('.gallery-page-image-items').children().length;

        // Calculate new index value
        if ($target.is('.next')) {
          index = currentIndex + 1;
        }
        else if ($target.is('.prev')) {
          index = currentIndex - 1;
        }

        // Check if index is within range
        if (index >= 0 && index < totalGalleryImages) {

          $currentGalleryImage = $($el.find('img', _self.options.content).eq(index)[0]);

          _self.tempHeight($currentGalleryImage);

          _self.setCurrentContent(index);
        }

      };

      this.handleControlVisibility = function (index) {
        var $target,
          $newTarget,
          index = index,
          totalGalleryImages = $el.find('.gallery-page-image-items').children().length;

        // Indentify controller
        if (index <= 0) {
          $target = $($el.find('.prev'));
        }
        else if (index >= totalGalleryImages - 1) {
          $target = $($el.find('.next'));
        }

        // Disable/enable buttons
        if (index <= 0 || index >= totalGalleryImages - 1) {
          $target.fadeTo(0, 0);
        }
        else {
          $($el.find('.tap-area')).fadeTo(0, 1).css('opacity', '');
        }
      }

      this.setCurrentContent = function (index) {

        var original_content = $($el.find(_self.options.content)[index]),
          cloned_content = original_content.clone();

        // Fix cloned content for IE6-8. 
        // jQuery.clone uses cloneNode and it doesn't work incorrectly on HTML5 elements in IE6-8 
        // by creating elements like <:element>. http://bugs.jquery.com/ticket/10501. 
        // Html5shiv currently doesn't address cloneNode problem.
        if (BrowserDetect.browser === 'Explorer' && BrowserDetect.version <= 8) {
          cloned_content.html(original_content.html());
        }

        // If index is out of range, just return 
        if (!cloned_content || cloned_content.length === 0) {
          return;
        }

        _self.handleControlVisibility(index);

        // If template = image viewer is not visible,
        // show it
        if (!$template.is(':visible'))
          $template.fadeIn();

        // Hide container wich wraps image, caption and description
        $modalBoxWrapper.css('opacity', '').addClass('fadedOut').delay(500).queue(function (next) {

          // Replace container content with cloned content
          $modalBoxWrapper.clearQueue().html(cloned_content.html()).removeClass('fadedOut').css('opacity', '0');

          $modalBoxWrapper.find(_self.options.img)
            .css({
              'width': '',
              'height': ''
            })
            .on('load', {
              test: 'image is loaded'
            }, _self.onImageLoad)
            .map(_self.updateImageUrl);

          _self.scrollToContent(original_content);
          setTimeout(_self.preloadImages, 300); // give some time to current image to load
          currentIndex = index;
          next();
        });

      };

      this.onImageLoad = function (e, test) {
        var $target = $(e.target),
          modalBoxPadding = parseInt($modalBox.css('padding').replace('px', '') * 2),
          modalBoxTargetWidthPx = (viewport().width * 0.8) - modalBoxPadding,
          modalBoxTargetHeightPx = (viewport().height * 0.8) - modalBoxPadding,
          modalBoxTargetWidthPercent = modalBoxTargetWidthPx / viewport().width,
          percentage,
          tempHeight;

        // Remove temp height of modal box
        $modalBox.css('height', '');

        // Check if image height is bigger than viewport height,
        // or if target is a portrait image
        if ($target.height() >= viewport().height || $target.is('.portrait')) {

          // Set new height to image
          $target.css({
            'height': modalBoxTargetHeightPx,
            'width': 'auto'
          });

          // Check if width is now bigger than viewport width
          if ($target.width() >= modalBoxTargetWidthPx) {

            // Calculate a percentage value, 
            // so that we can calculate temp height
            percentage = $target.width() / modalBoxTargetWidthPx;

            // Calculate temp height
            tempHeight = Math.round($target.height() / percentage);

            // Set temp height
            $target.css('height', tempHeight);

          }
        }

        // Disable caption tag list links 
        $modalBoxWrapper.find('.tag-list a').on('click', _self.disableTagClickEvents);

        // Vertically center modal box
        _self.centerModalBox($target);

        // Show modal box
        $modalBoxWrapper.fadeTo('fast', 1);

      }

      this.disableTagClickEvents = function (e) {
        e.preventDefault();
      }

      this.centerModalBox = function (target) {
        var $target = target,
          $modalBox = $el.find('.image-viewer-modal-box'),
          newTopPosition = ((viewport().height - (16 * 2)) - $target.height()) / 2;

        // Set new top position
        $modalBox.css({
          'top': newTopPosition
        });

      }

      this.scrollToContent = function (content) {
        var $content = $(content);
        var scrollTo = $content.offset().top - viewport().height / 2 + $content.height() / 2;

        $('html, body')
          .delay(500)
          .stop()
          .animate({
            scrollTop: scrollTo
          }, 300);
      };

      this.updateImageUrl = function (i, img) {

        var src = img.getAttribute(_self.getImageUrlAttributeName());
        if (src) {
          img.setAttribute('src', src);
        }
      };

      this.getImageUrlAttributeName = function () {
        return currentScreenWidth > 800 ? _self.options.gallery_image_l : _self.options.gallery_image_m;
      };

      this.updateScreenWidth = function () {

        currentScreenWidth = viewport().width;

        _self.centerModalBox($modalBox);

        _self.handleImageLinks();

      };

      this.handleImageLinks = function () {
        var $targets = $el.find('.open-image, .description a');

        // Disable/enable links according to viewport size
        if (viewport().width >= _self.options.min_resolution) {
          $targets.attr('disabled', false).css('cursor', 'auto');
        }
        else {
          $targets.attr('disabled', true).css('cursor', 'default');
        }
      }

      this.handleDescriptionControlClick = function (e) {
        e.preventDefault();

        var $target = $(e.currentTarget);

        $target.siblings('.visuals').find('img').trigger('click', this.showImageViewer);

      }

      this.collectElements = function () {
        $template = $(this.options.template).hide();
        $modalBox = $template.find('.image-viewer-modal-box');
        $modalBoxWrapper = $template.find('.image-viewer-modal-box-wrapper');
        $el.append($template);

        this.updateScreenWidth();
      }

      this.bindEvents = function () {
        $el.on('click.' + this.namespace, this.options.img, this.showImageViewer);
        $el.on('click.' + this.namespace, '.image-viewer', this.hideImageViewer);
        $el.on('click.' + this.namespace + ' touchstart.' + this.namespace, '.tap-area', this.handleControlClick);
        $el.on('click.' + this.namespace, '.description', this.handleDescriptionControlClick)
        $(window).on('resize.' + this.namespace, $.debounce(this.updateScreenWidth, 500));

        // Check if gallery tile links should be enabled/disabled
        PubSub.subscribe('FlickGallery.newImages', this.handleImageLinks);

      };

      this.unbindEvents = function () {

        $el.off('.' + this.namespace);
      };

      this.init = function (el) {

        if (!el) { // return if nothings happening
          return;
        }

        $el = $(el);
        this.options = $.extend({}, optionDefaults, this.options);
        this.collectElements();
        this.bindEvents();

        $el.show();

      };

      this.destroy = function ($el) {
        this.unbindEvents();
      };
    };
  };

  jQuery.plugin('imageViewer', namespace.ImageViewer(jQuery, window));
});
(function($) {

  $.plugin('imeiStatusCheck', function() {

    var options = {
      }, 
      $status_dependent_elements, 
      $form_section, 
      $form, 
      $actions_section, 
      $loading_section, 
      loading_delay, 
      search_params = {}, 
      url;
 
    var onFormSubmit = function(e) {
      e.preventDefault();
      // validate imei before send?
      $form.find('.field-error').hide() ;

      if(validateForm()) {
        search_params = getLastSearchParams();

        $form.find('input[type="submit"]').attr('disabled', 'disabled');
  
        $.ajax({
          url: $form.attr('action'),
          data: search_params, 
          success: handleStatusResponse, 
          error: notifyUserAboutAjaxFailure, 
          beforeSend: queryStarted, 
          complete: queryComplete
        });
      } else {
        $form.find('.invalid-imei').css('display', 'block');
        checkResultStatus("invalid", options.relative_articles_prefix);
      }

      location.hash = '#main';
    };

    var queryStarted = function(){
      // add small delay if request hangs
      loading_delay = setTimeout(function(){$loading_section.slideDown(500);}, 700);
      $actions_section.hide();
    };

    var queryComplete = function(){
      clearTimeout(loading_delay);
      $loading_section.hide();
      $actions_section.show();
    };
 
    var getLastSearchParams = function() {
      var ret = {};
      ret['deviceId'] = $form.find('input#imei_code').val();
      ret['captcha'] = $form.find('input#captcha').val();
      return ret;
    };

    var handleStatusResponse = function(result) {
      if (result.errorMessage) {
        $form.find('.invalid-imei').show();
        checkResultStatus("invalid", options.relative_articles_prefix);
        reset();
        return;
      }
      window.remoteTypeDesignator = result.typeDesignator;
      window.remoteCallComplete = "OK";

      if(window.isIMEIAhead && window.isCollectionWidget){
        // slight delay to make sure the repair case button is not shown before redirection to troubleshooting kicks off
        $form_section.hide();
        $('.imei_warranty_check_default').hide();

        setTimeout(function(){
            if(typeof window.redirectTriggered === 'undefined' || window.redirectTriggered !== 'Y')
              handleStatusChange(result);
            }, 350);
        
      }else{
        handleStatusChange(result);
        $form_section.hide();
      }
    };
    
    function track_submit(checker, status) {
    	if (window.isTrackingAvailable) {
    		utag.view({ pName: nkT.pName + checker + status });
    	}
    }
    
    function checkResultStatus(status, checkerType) {

    	if (checkerType == 'imei_warranty_check') {
    		track_submit(":warranty checker:", status);
     	} else {
     		track_submit(":repair checker:", status);
     	}
    	
    }
    
    // test if the URL string (request parameters) containe repair=true
    function testRepairModeOn() {
      return decodeURI(window.location.search.replace(new RegExp('^(?:.*[&\\?]' + encodeURI("repair").replace(/[\.\+\*]/g, '\\$&') + '(?:\\=([^&]*))?)?.*$', 'i'), '$1')) === "true";
    }
    

    var handleStatusChange = function(statusData) {
      var status = statusData.warrantyStatus || statusData.repairCaseStatus;      
      var ppStatus = "";
      var articles_visible;
      
      if (!(window.isIMEIAhead && window.isCollectionWidget) || testRepairModeOn()) {
        if((typeof statusData.warrantyStatus !== 'undefined') && (statusData.warrantyStatus !== "in") && (statusData.warrantyStatus !== "Y"))  {
  
          if(statusData.pp1 === "Y")  // pp1 = Y if the IMEI is blacklisted
            ppStatus = "pp1";
          else if(statusData.pp2 === "N") // pp2 = N if the IMEI is not recognized in EM
            ppStatus = "pp2";
          else if(statusData.pp3 === "N") // pp3 = N if the IMEI is not valid in the current country
            ppStatus = "pp3";
          else if(statusData.pp3 === "Y") // pp3 = Y if the IMEI is valid in the current country
            ppStatus = "pp3Y";
  
          // Check if ppStatus has been set now and corresponding markup exists for ppStatus
          if(ppStatus !== ""){
            articles_visible = $status_dependent_elements.filter('.'+ options.relative_articles_prefix +'_'+ ppStatus);
  
            // Default ppStatus to warrantyStatus if the markup is absent
            if(articles_visible.length == 0)
              articles_visible = $status_dependent_elements.filter('.'+ options.relative_articles_prefix +'_'+ status);
          }
          articles_visible.show();
  
        } else {
          articles_visible = $status_dependent_elements.filter('.'+ options.relative_articles_prefix +'_'+ status).show();
        }
        
        if (typeof statusData.imei !== 'undefined' && statusData.imei !== null && statusData.imei !== 'null') {
          articles_visible.find(options.imei_placeholder).html(statusData.imei);
        } else {
          articles_visible.find(options.imei_placeholder).html(search_params.deviceId);
        }
      }
   
      $status_dependent_elements.filter('.'+ options.relative_articles_prefix +'_default').hide();
      if (statusData.token) {
        var href = $('a.token');
        href.attr('href', href.attr('href') + "&token=" + statusData.token +"&productCode=" + statusData.productCode);
      }
      
      if( $('.repair_case_button').hasClass('exceptionsEnabled') ) {      	  
	      if( statusData.pp1 == "Y" || statusData.pp2 == "N" || statusData.pp4 == "Y") {	
	    	  $('.repair_case_button').hide();
	      }    
      }      
      checkResultStatus(status === "Y" ? "valid" : "not supported", options.relative_articles_prefix);
      
    };
    

    var notifyUserAboutAjaxFailure = function() {
      // TODO trigger some user notification (by custom event ?)
      // http://www.sitepoint.com/jquery-custom-events/
      $form.find('.communication-error').show();
      checkResultStatus("error", options.relative_articles_prefix);
      reset();
    };

    var reset = function() {
      // reset component
      $form.find('input[type="submit"]').removeAttr('disabled');
    };

    var initComponent = function(el) {
      $form_section = $(el);

      $actions_section = $form_section.find('.actions');
      $loading_section = $form_section.find('.status-loading');
      // merge options
      options = this.options;
      // collect sections
      $status_dependent_elements = $('body').find('[class*="'+ options.relative_articles_prefix +'_"]');
      // hide elements it those haven been hidden by default
      $status_dependent_elements.filter('.'+ options.relative_articles_prefix +'_default').show();
      // find form for later use
      $form = $form_section.find('form');
      url = $form.attr('action');

      // bind form submit
      $form.on('submit', onFormSubmit);
      $form.show()

      // Subscribe to an external event
      $form.on("showWarrantyAndRepair", function(e, data) {
        handleStatusResponse(data);
      });

      //FIXME/TODO/HACK - remove this if it is not needed, why did the form not reset when I reloaded the page?
      reset();
    };
   
    var destroyComponent = function() {
      
    };

    return {
      init: initComponent, 
      destroy: destroyComponent
    };
  });
})(jQuery);
(function($) {

  /**
   * Pseudo-class 'layoutEnhancer'
   *
   * Rearranges the tiles on the page upon page load or resize. The basic idea is to remove the unnecessary empty
   * slots inside the tiles area by modifying the tiles layout.
   *
   * @author - tuomas.karhu@fusion.fi
   */
  $.plugin('layoutEnhancer', function() {

    /////////////////////////////////
    // internal plugin attributes
    /////////////////////////////////

    // known tile types
    var TILE_TYPE_IMAGE = 'image_tile';
    var TILE_TYPE_TEXT  = 'text_tile';

    // known tile importance levels
    var TILE_IMPORTANCE_MEDIUM  = 'importance_medium';
    var TILE_IMPORTANCE_HIGH    = 'importance_high';

    var $container;   // (jQuery obj) the wrapper div for all the tiles
    var tileDefs;     // (Array of type TileDef) tile definitions aka TileDef objects; see prepareTileDefs() below

    var maxRows = 100;   // (int) max # of rows in the view; TODO: don't hard code this!
    var maxCells = -1;  // (int) max # of cells in the view; recalculated on every resize event
    var rows = [];      // (a two dimensional Array of type int) -1 if no tile is in the cell, tile index if occupied

    // transition related
    var isAnimating  = false; // is the transition animation currently running
    var FADE_DURATION = 150;  // duration (milliseconds) for the fade in / out
    var FADE_DELAY    = 20;   // delay (milliseconds) between fades of each tile

    /////////////////////////////////
    // internal plugin logic
    /////////////////////////////////

    /**
     * Invoked in the beginning of the plugin lifecycle. Prepares the data structures needed while
     * reorganizing the tiles later.
     *
     * @param $tiles - The jQuery object containing all tile definitions
     */
    function prepareTileDefs($tiles, resizeOnReady) {
      //console.log("prepareTileDefs: len = ", $tiles.length);

      tileDefs = [];
      
      var abort = false;

      $tiles.each(function(i, tile) {
        if (abort) return;
        
        // define the tile type (in this version only image or text)
        // this is null for tiles with textual content
        var innerContent = $(tile).find('img.floating');
        var tileType = innerContent.length > 0 ? TILE_TYPE_IMAGE : TILE_TYPE_TEXT;
        var importance;

        if ($(tile).is('.high-importance'))
          importance = TILE_IMPORTANCE_HIGH;
        else
          importance = TILE_IMPORTANCE_MEDIUM;

        var w = -1.0;
        var h = -1.0;

        // image tile --> calculate based on aspect ratio
        if (tileType == TILE_TYPE_IMAGE) {
          // check whether the tile is vertical or horizontal

          // find the aspect ratio that is closest to the proportions of this image
          w = $(tile).width();
          h = $(tile).height();
          
          // handle lazy images by redoing the layout when the dimensions are known
          if (w <= 1 && h <= 1) {
            abort = true;
            innerContent.load(function(event) {
              // remove the event after it has fired for the first time
              // otherwise image sizes in different breakpoints will trigger this too
              $(this).unbind(event);
              prepareTileDefs($tiles, true);
            });
            return;
          }

          var cellsHorizontal, cellsVertical;
          var closestAr = 1000;
          var closestArInd = 0;
          var ar = w / h;

          // the differences in relation to the acceptable aspect ratios
          var arComp = [
            Math.abs(ar - (1 / 1)),
            Math.abs(ar - (2 / 1)),
            Math.abs(ar - (4 / 1)),
            Math.abs(ar - (1 / 2)),
            Math.abs(ar - (1 / 3)),
            Math.abs(ar - (2 / 3))
          ];

          for (var a=0; a<arComp.length; a++) {
            if (arComp[a] < closestAr) {
              closestAr = arComp[a];
              closestArInd = a;
            }
          }

          switch (closestArInd) {
            case 0:
              cellsHorizontal = 1;
              cellsVertical   = 1;
              break;
            case 1:
              cellsHorizontal = 2;
              cellsVertical   = 1;
              break;
            case 2:
              cellsHorizontal = 4;
              cellsVertical   = 1;
              break;
            case 3:
              cellsHorizontal = 1;
              cellsVertical   = 2;
              break;
            case 4:
              cellsHorizontal = 1;
              cellsVertical   = 3;
              break;
            case 5:
              cellsHorizontal = 2;
              cellsVertical   = 3;
              break;
          }
        }

        // text tile --> 1x1
        else {
          cellsVertical   = 1;
          cellsHorizontal = 1;
        }

        //console.log("tile", i, "[", tileType, "] .w=", $(tile).width(), "/.h=", $(tile).height(),
        //            "--> aspect r = ", (w/h), "--> sv=", cellsVertical, ", sh=", cellsHorizontal);

        // this untyped object is later on being referenced as 'TileDef object', even though it's not
        // defined as an instance of such class
        // TODO: define the class
        tileDefs.push({
          ind             : i,
          tileType        : tileType,
          importance      : importance,
          content         : $(tile),
          innerContent    : innerContent,
          cellsHorizontal : cellsHorizontal,
          cellsVertical   : cellsVertical,
          originalCellsHorizontal:  cellsHorizontal,
          originalCellsVertical:    cellsVertical,
          row             : -1,
          column          : -1,
          originalWidth   : w,
          originalHeight  : h
        });
      });
      
      if (resizeOnReady) {
        onResize();
      }
    }

    /**
     * Invoked on page load and on viewport resize. Hides the tiles, and later proceeds
     * to the reordering itself.
     */
    function onResize() {
      //hideTiles();
      reorderTiles();
    }

    /**
     * Invoked once the tiles have been hidden (hiding transition is complete).
     */
    function reorderTiles() {

      // bounds: how many cells can fit on one row
      var totalWidth = $container.parent().width();

      // define gutter
      var gutter = totalWidth < 640 ? 14 : 16;

      // define the max amount of cells on a row
      if (totalWidth < 240)
        maxCells = 1;
      else if (totalWidth < 320)
        maxCells = 1;
      else if (totalWidth < 480)
        maxCells = 2;
      else if (totalWidth < 640)
        maxCells = 2;
      else if (totalWidth < 768)
        maxCells = 4;
      else if (totalWidth < 1024)
        maxCells = 4;
      else if (totalWidth < 1278)
        maxCells = 8;
      else
        maxCells = 8;

      var unitWidth   = (totalWidth + gutter) / maxCells;
      var unitHeight  = unitWidth; // only square tiles at the moment

      //console.log('totalw=', totalWidth, '--> gutter=', gutter, 'cells=', maxCells, ', unitwidth=', unitWidth);

      // the y coordinate of the lowest point in any of the tiles
      var maxHeight = 0;

      // iterators: t = tile, r=row, c=column
      var t, r, c;

      // reset calculations i.e. create empty rows
      rows = new Array(maxRows);
      for (r = 0; r < maxRows; r++) {
        rows[r] = new Array(maxCells);
        for (c = 0; c < maxCells; c++) {
          rows[r][c] = -1;
        }
      }

      // iterate through all tiles and recalculate their positions and dimensions
      var tileX;
      var tileY;
      var tileWidth;
      var tileHeight;
      var innerWidth;
      var innerHeight;
      var found;

      for (t = 0; t < tileDefs.length; t++) {
        // reset cell span
        tileDefs[t].cellsHorizontal = tileDefs[t].originalCellsHorizontal;
        tileDefs[t].cellsVertical   = tileDefs[t].originalCellsVertical;

        // 1) the normal case: find a slot for each tile, on one row or another
        if (maxCells > 1) {

          // high importance --> more space if possible
          if (tileDefs[t].importance == TILE_IMPORTANCE_HIGH &&
              tileDefs[t].cellsHorizontal * 2 <= maxCells) {

            tileDefs[t].cellsVertical   *= 2;
            tileDefs[t].cellsHorizontal *= 2;
          }

          found = false;

          // try each row, left to right
          for (r = 0; r < rows.length; r++) {
            if (addToRow(r, tileDefs[t]))
            {
              //enought empty space found --> no need to check more rows
              //console.log('tile ', t,' added to row ', r);
              found = true;
              break;
            }
          }

          //console.log('reorder', t, ' done: rows = ');
          //printRows();

          // there's space on the current row
          if (found) {
            tileY = tileDefs[t].row * (unitHeight);
            tileX = tileDefs[t].column * (unitWidth);
          } else {
            // no space on any row --> too few rows defined
            //console.log('ERROR: couldnt fit image ', t,' on any row');

            // TODO: how to hide the tile properly?
            tileY = -10000;
            tileX = -10000;
          }

          tileWidth  = tileDefs[t].cellsHorizontal * unitHeight - gutter;
          tileHeight = tileDefs[t].cellsVertical * unitWidth - gutter;
        }

        // 2) a special case: just one cell available, so stretch all tiles to max width and stack
        // them vertically on top of each other
        else {
          tileY       = maxHeight;
          tileX       = 0;
          tileWidth   = unitWidth - gutter;
          tileHeight  = tileDefs[t].originalHeight * tileWidth / tileDefs[t].originalWidth;
          if (tileDefs[t].tileType == TILE_TYPE_IMAGE)
            tileHeight += gutter;
        }

        // update the tile position and scale on the DOM level
        if ($('body').hasClass('rtl')) {
			tileDefs[t].content.css({
	          'top'    : tileY + 'px',
	          'right'   : tileX + 'px',
	          'width'  : tileWidth,
	          'height' : tileHeight
        	});
        } else {
        	tileDefs[t].content.css({
	          'top'    : tileY + 'px',
	          'left'   : tileX + 'px',
	          'width'  : tileWidth,
	          'height' : tileHeight
        	});
        }


        // handle the inner content
        switch (tileDefs[t].tileType) {

          // images are scaled and cropped a bit in order to fill the whole tile area...
          case TILE_TYPE_IMAGE:
            if (maxCells > 1) {
              if (tileWidth < tileHeight) {
                innerWidth  = (unitWidth) * tileDefs[t].cellsHorizontal - gutter;
                innerHeight = tileDefs[t].originalHeight * (innerWidth / tileDefs[t].originalWidth);
              }
              else {
                innerHeight = (unitHeight) * tileDefs[t].cellsVertical - gutter;
                innerWidth  = tileDefs[t].originalWidth * (innerHeight / tileDefs[t].originalHeight) + gutter;
              }
            } else {
              innerWidth  = tileWidth;
              innerHeight = tileHeight - gutter;
            }

            //console.log('crop h = ', (innerWidth - tileWidth), 'crop v = ', (innerHeight - tileHeight));

            tileDefs[t].innerContent.css({
              'width':  innerWidth,
              'height': innerHeight
            });
            break;

          // ... whereas textual tiles remain as they are
          case TILE_TYPE_TEXT:
            // no op
            break;
        }

        //console.log('tile', t, ' (', tileDefs[t].column, ',', tileDefs[t].row, ') -->', '(', tileX, ',', tileY, ')');
        //console.log('tile', t, ' w/h=', tileDefs[t].content.width(), '/', tileDefs[t].content.height());

        // remember the lowermost point
        var tileBottom = tileY + tileDefs[t].content.height();
        if (tileDefs[t].tileType == TILE_TYPE_TEXT && maxCells == 1)
          tileBottom += gutter;

        if (tileBottom > maxHeight)
          maxHeight = tileBottom;
      }

      //console.log('all done, rows = ');
      //printRows();

      // show container (hidden in the beginning of the plugin lifecycle)
      $container.css({
        'visibility': 'visible'
      });

      // finally, resize the container block in order to make all tiles fit in it
      $container.width(totalWidth);
      $container.height(maxHeight);

      /* DEPRECATED: no animations
      // finally, resize the container block (with transition animation) in order to make all tiles fit in it
      // TODO: refine transition (at least duration based on distance)
      $container.animate({
        width  : totalWidth + 'px',
        height : maxHeight + 'px'
      }, FADE_DURATION, 'easeInOutSine');
      */
      // show tiles with transition
      //showTiles();
    }

    /**
     * Tries to add a tile to a particular row: checks if there's enough space on that row, and if the
     * tile is higher than one unit also the necessary space on the rows below. Basic idea: try to add
     * as high and as left as possible.
     *
     * @param rowIndex - (int) The index of the row (in Array 'rows') we're trying to add the tile
     * @param tile     - (TileDef object) The tile at hand
     * @return - true, if the tile was added, false if there was not enough space on the row
     */
    function addToRow(rowIndex, tile) {
      // loop through the cells of the row
      for (var c = 0; c < rows[rowIndex].length; c++) {
        var fits = true;

        // check if fits horizontally (on every cell necessary)
        for (var ch = 0; ch < tile.cellsHorizontal; ch++) {
          if (c + ch >= maxCells || rows[rowIndex][c + ch] >= 0) {
            //console.log('addToRow(', rowIndex, '): no space on cell ' + (c+ch), ' on row ' + (rowIndex));
            fits = false;
            break;
          }

          // check if fits vertically (on every row necessary)
          for (var cv = 0; cv < tile.cellsVertical; cv++) {
            if (rowIndex + cv >= maxRows || rows[rowIndex + cv][c + ch] >= 0) {
              //console.log('addToRow(', rowIndex, '): no space on cell ' + (c+ch), ' on row ' + (rowIndex+cv));
              fits = false;
              break;
            }
          }
        }

        // no conflict --> add to this row
        if (fits) {
          // update the 'rows' array
          for (var ch = 0; ch < tile.cellsHorizontal; ch++) {
            for (var cv = 0; cv < tile.cellsVertical; cv++) {
              rows[rowIndex + cv][c + ch] = tile.ind;
            }
          }

          // update the TileDef object itself
          tile.row    = rowIndex;
          tile.column = c;

          return true;
        }

        // didn't fit on this cell --> check the next cell horizontally
        else
        {
          continue;
        }
      }

      // no space on this row
      //console.log('addToRow(', rowIndex, '): no space on this row');
      return false;
    }

    /**
     * tmp helper util --> remove once done with development
    function printRows() {
      //console.log("\n\n***rows");
      var r, c, msg;
      for (r = 0; r < rows.length; r++) {
        msg = '';
        for (c = 0; c < rows[r].length; c++)
          msg += rows[r][c] + '\t';
        //console.log('row ', r, '* ', msg, ' *');
      }
      //console.log("***rows end\n\n");
    }
     */

    /////////////////////////////////
    // transitions
    /////////////////////////////////

    function hideTiles() {
      //console.log('hideTiles()');

      // add callback function only to the animation with most delay
      for (var t = 0; t < tileDefs.length; t++) {

        // if playing the show/hide animation at the moment, kill it
        if (isAnimating) {
          tileDefs[t].content.stop(true, false);
        }
        tileDefs[t].content.delay((tileDefs.length - t) * FADE_DELAY).fadeOut(FADE_DURATION,
          (t > 0) ? null : onHidden);
      }

      isAnimating = true;
    }

    function showTiles() {
      //console.log('showTiles()');

      // add callback function only to the animation with most delay
      for (t = 0; t < tileDefs.length; t++) {
        tileDefs[t].content.delay(t * FADE_DELAY + 200).fadeIn(FADE_DURATION, (t < tileDefs.length - 1) ? null : onShown);
      }
    }

    function onHidden() {
      //console.log('onHidden()');
      reorderTiles();
    }

    function onShown() {
      //console.log('onShown()');
      isAnimating = false;
    }

    /////////////////////////////////
    // public plugin interface
    /////////////////////////////////

    /**
     * The plugin initialization routine.
     */
    this.init = function($el) {
    	
      // check RTL
      if ($('body').hasClass('rtl')) {
      	$container = $el.find('.float-container').css({
        'position'   : 'relative',
        'visibility' : 'hidden',
        'padding'    : '0px',
        'margin'     : '0px',
        'right'      : '0px',
        'top'        : '0px'
      	});
      } else {
      	 $container = $el.find('.float-container').css({
        'position'   : 'relative',
        'visibility' : 'hidden',
        'padding'    : '0px',
        'margin'     : '0px',
        'left'       : '0px',
        'top'        : '0px'
      	});
      }	

      var $tiles = $container.find('.floating-tile').css({
        'position' : 'absolute',
        'margin'   : '0px',
        'padding'  : '0px'
      });

      // init reordering
      prepareTileDefs($tiles, false);
      
      // start listening to the resize events and reorder once at the beginning
      // TODO: fix the namespace problem
      //$(window).on('resize', reorderTiles);
      $(window).resize($.debounce(onResize, 10)).resize();
    };

    /**
     * The plugin 'destructor'.
     */
    this.destroy = function($el) {
      // TODO: implement the destructor properly
      // TODO: fix the namespace problem
      //$el.off('click.' + this.namespace);
    };

  });

})(jQuery);
/*global jQuery, App, PubSub*/


window.App = window.App || {};
window.App.Plugin = window.App.Plugin || {};
window.App.Plugin.LineFiller = function LineFiller($, win) {

  return function () {
    'use strict';

    var
    _self = this,
      $el,
      option_defaults = {
        container: '.gallery-page-image-item', 
        minScreenResolution: 480
      };

    this.refill = function () {
      var items = $el.children().filter(':not(.scaled)'),
        windowWidth = $el.width(),
        itemRow = [],
        item,
        i,
        len = items.length,
        sumValues,
        multip,
        gutterWidth = parseInt(_self.getGutterWidth(items), 10); // all images loaded. start handling tiles

      for (i = 0; i < len; i++) {

        item = items[i];

        if (parseInt($(item).width(), 10) <= gutterWidth) { // some image is still hanging, give some time to be ready
          setTimeout(_self.refill, 300);
          return;
        }

        // push more items to array for sum calculation and other handlings
        itemRow.push(item);

        // get the line sum.
        sumValues = $.map(itemRow, sumItemWidths(0, gutterWidth));

        // does images sum of widths greater that containers width
        if (sumValues[sumValues.length - 1] > windowWidth) {
          // if is. calculate multipier for all images.
          multip = ($el.width() - itemRow.length * gutterWidth) / $.map(itemRow, sumImageWidths(0))[itemRow.length - 1];

          // shring all images with multiplier
          $.map(itemRow, shrinkImager(multip, 'scaled'));

          // empty row for next round      
          itemRow = [];
        }
      }
    };

    /**
     * Just calculate gutter width.
     * @param  {Array} items  sample array of items to be handled
     * @return {Number}       gutter width value
     */
    this.getGutterWidth = function (items) {
      var item = $(items[0]),
        img = item.find('.visuals img'),
        gutterWidth = item.outerWidth(true) - img.width();

      return gutterWidth;
    };

    /**
     * Fuction that takes multiplier and returns other function that can be used with $.map function
     * @param  {Float}    multiplier that shoud be applied for image's x and y dimensions
     * @param  {String}   class name to be added after image is srinked
     * @return {Function} to ne used with $.map
     */
    function shrinkImager(multiplier, className) {
      return function (item) {
        var $item = $(item),
          img = $item.find('.visuals img');

        img.css({
          width: Math.floor(img.width() * multiplier),
          height: Math.floor(img.height() * multiplier)
        });

        $item.addClass(className);
      };
    }

    function sumItemWidths(sum, gutter) {
      return function (item) {
        return sum += $(item).outerWidth(true);
      };
    }

    function sumImageWidths(sum) {
      return function (item) {
        return sum += $(item).find('.visuals img').width();
      };
    }

    this.handleResize = function () {
      $el.children().removeClass('scaled');
      $el.children().find('.visuals img').css({
        'width': '',
        'height': ''
      });
      if(viewport().width >= _self.options.minScreenResolution ) {
        _self.refill();
      }
    };

    // all event binding belong to here
    this.bindEvents = function () {
      if(viewport().width >= _self.options.minScreenResolution ) {
        PubSub.subscribe('FlickGallery.newImages', this.refill);
      }
      $(window).on('resize.' + this.namespace, $.debounce(this.handleResize, 300));
    };

    // all event unbinding belong to here
    this.unbindEvents = function () {};

    this.init = function (el) {

      if (!el) { // return if nothings happening
        return;
      }

      $el = $(el);
      this.options = $.extend({}, option_defaults, this.options);

      this.bindEvents();

      if(viewport().width >= _self.options.minScreenResolution ) {
        setTimeout(this.refill, 1500);
      }
      $el.show();
    };

    this.destroy = function ($el) {
      this.unbindEvents();
    };
  };
};

jQuery.plugin('lineFiller', window.App.Plugin.LineFiller(jQuery, window));
/**
 * Live tile animation plugin
 *
 * expected data on target elem:
 *    data-rootclass      Live tile element class, e.g. 'social-media twitter'
 *    data-datafeed       URL to a JSON object, see code for supported data structures
 *    data-rotationdelay  Delay between each tile rotation in seconds, e.g. 5
 */


(function ($) {

  $.plugin('livetile', function () {
    
    var _this = this,
        $el, 
        slideshowInterval,
        $liveLink;
    this.data_options = {};

    this.init = function (el) {

      $el = $(el);
      this.data_options = $(el).data();
      _this.animate = (navigator.userAgent.indexOf('Android') == -1 && navigator.userAgent.indexOf('Silk') == -1 && BrowserDetect.browser != "Symbian" && (BrowserDetect.browser != "IEMobile" && BrowserDetect.version != 10) || (BrowserDetect.browser == "Explorer" && BrowserDetect.version != 11));
      _this.flip = {
        front: 'flip-front',
        back: 'flip-back'
      };

      if (typeof (this.data_options.datafeed) === "undefined" || typeof (this.data_options.rotationdelay) === "undefined" || typeof (this.data_options.rootclass) === "undefined") {
        return false;
      }

      
      // fetch data from source and start animation
      if ($el.size() !== 0) {
        $.getJSON(this.data_options.datafeed, this.handleDataResponse);
      }

      // start and stop animations when video overlay is opened
      $(document).on('videoStarted', this.stopLivetile);
      $(document).on('videoStopped', this.startLivetile);

    };

    // twitter data handler, parses data into <li> elements
    this.handleTwitterFeed = function (data) {
      if ($(data).length > 1) {
        var $list = $el.find('.caption ul.live');
        $(data).each(function () {
          $list.append('<li><span data=\'http://twitter.com/nokia/status/' + this.id_str + '\'>' + this.text + '</span></li>');
        });

        // init follow button
        !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
      }
    };

    // facebook data handler, parses data into <li> elements
    this.handleFacebookFeed = function (data) {
      var $window = $(window);
      if ($(data.data).length > 1) {
        var $list = $el.find('.caption ul.live');
        $(data.data).each(function () {
          if (typeof (this.message) !== "undefined") {
            var self = this;
            var lazyToggleFBTileWrapper= $.debounce(function() {
              _this.truncateAtBreakpoint(self.message, $list, self.link);
            }, 100);
            $window.on('resize.' + self.namespace, lazyToggleFBTileWrapper).resize();
            //$list.append('<li style="display:none" title="' + this.message + '"><span data=\'' + this.link + '\'>' + this.message + '</span></li>');
          }
        });
      }
    };

    this.handleVkontakteFeed = function (data) {
      var $list,link;
      var $window = $(window);
      if ($(data.response).length > 1) {
        $list = $el.find('.caption ul.live');
        $(data.response).each(function (index) {
          if(index !== 0){
            link = "http://vk.com/nokia/" + this.id;
            if (typeof (this.text) !== "undefined") {
              var self = this;
              var lazyToggleVKTileWrapper= $.debounce(function() {
                _this.truncateAtBreakpoint(self.text, $list, link);
              }, 100);
              $window.on('resize.' + self.namespace, lazyToggleVKTileWrapper).resize();
              //$list.append('<li style="display:none" title="' + this.text + '"><span data=\'' + link + '\'>' + this.text + '</span></li>');
            }
          }
        });
      }
    };

    // sina weibo data handler, parses data  into <li> elements
    this.handleSinaWeiboFeed = function (d) {
      var $list, link, mid;
      var tileclass = "sina-weibo-feed";
      var $window = $(window);
      if ($(d.data).length > 0 && $(d.data.statuses).length > 1) {
        $list = $el.find('.caption ul.live');
        $(d.data.statuses).each(function () {
          if (typeof (this.text) !== "undefined") {
            link = "http://e.weibo.com/" + this.user.id;
            // sina api doesn't return mid which should be used as weibo url
            // so it is needed to convert the id to mid
            mid = _this.id2mid(this.id.toString());
            if (mid) link = link + '/' + mid;
            // do not move "self" var as a global since "this" refers to d.data iteration object
            var self = this;
            var lazyToggleTileWrapper= $.debounce(function() {
              _this.truncateAtBreakpoint(self.text, $list, link, tileclass);
            }, 100);
            $window.on('resize.' + this.namespace, lazyToggleTileWrapper).resize();
          }
        });
      }
    };

    // Live social tile Text from external feed are overlapping in IE8 browsers, since its quite long
    // Hence truncating the text as much as possible and replace last few characters with "..."
    this.truncateAtBreakpoint = function (text, $list, link, tileclass) {
      var truncatedtext = text;
      if(viewport().width >= 160 && viewport().width < 240){
        if(text.length > 29){
          truncatedtext = _this.truncateText(text,29);
        }
      }
      if((viewport().width >= 240 && viewport().width < 320) || (viewport().width >= 1024 && viewport().width < 1280) ) {
        if(text.length > 60){
          truncatedtext = _this.truncateText(text,60);
        }
      }
      if(viewport().width >= 320 && viewport().width < 480){
        if(text.length > 110){
          truncatedtext = _this.truncateText(text,110);
        }
      }
      if(viewport().width >= 480 && viewport().width < 640){
        if(text.length > 75){
          truncatedtext = _this.truncateText(text,75);
        }
      }
      // For IE 8 - desktop version , for 1280 pixels text are overlapping.
      // Hence trucating is necessary for 1280 pixels as well.
      if(viewport().width >= 1280){
        if(text.length > 80){
          truncatedtext = _this.truncateText(text,80);
        }
      }
      if(tileclass === "sina-weibo-feed"){
        $list.append('<li style="display:none;" title="' + text + '"><span class="' + tileclass + '" data=\'' + link + '\'>' + truncatedtext + '</span></li>');
      }else {
        $list.append('<li style="display:none;" title="' + text + '"><span data=\'' + link + '\'>' + truncatedtext + '</span></li>');
      }
      
    };

    // Get the substring of the text for truncation
    this.truncateText = function (text, end) {
      return text.substring(0,end) + '&hellip;';
    };

    this.id2mid = function (id) {
      if (typeof (id) != 'string') {
          return false; 
      }
      var mid = '';

      for (var i = id.length - 7; i > -7; i = i - 7)
      {
          var offset1 = i < 0 ? 0 : i;
          var offset2 = i + 7;
          var num = id.substring(offset1, offset2);

          num = _this.int10to62(num);
          mid = num + mid;
      }
      return mid;
    };

    //convert decimal to 62bit
    this.int10to62 = function (int10) {
      var s62 = '';
      var r = 0;
      while (int10 != 0) {
          r = int10 % 62;
          s62 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.charAt(r) + s62;
          int10 = Math.floor(int10 / 62);
      }
      return s62;
    };

    this.handleDataResponse = function (data) {

      _this.handleTwitterFeed(data);
      _this.handleFacebookFeed(data);
      _this.handleSinaWeiboFeed(data);
      _this.handleVkontakteFeed(data);
      
      if ($(data).length > 1 || $(data.response).length > 1 || $(data.data).length > 1 || $(data.data.statuses).length > 1) {
        // hide static list if we get any data in
        $el.find('ul.default').hide();

        if (_this.animate) {
          $(window.translateZelements).each(function(index){ 
            $(this).addClass('zero-translate-z');
          });
        }

        // random delay before starting the animation
        setTimeout(_this.startLivetile, Math.floor((Math.random() * 2500) + 1));
      }
    };

    // animation function that will flip given tile
    function _flip($targetTile, iterator) {
      var _undo = (iterator % 2 === 0) ? _this.flip.front : _this.flip.back;
      var _flip = (iterator % 2 === 1) ? _this.flip.front : _this.flip.back;
      var $tileLink = $targetTile.find('.tile-content-wrapper');

      // animation disabled on Android because its causing blurry fonts
      if (_this.animate) {
        $targetTile.removeClass(_undo).addClass(_flip);
        $tileLink.removeClass(_undo).addClass(_flip);
        
        // chrome losing mouse focus on tile after flip animation
        //$targetTile.find('#livetile-link').trigger('mouseleave').trigger('mouseenter');
      }
    }

    // stops livetile by reseting slideshow interval
    this.stopLivetile = function () {
      clearInterval(slideshowInterval);
      slideshowInterval = undefined;
    };

   //
    this.copySOMELink = function ($tile) {
      $theLink = $tile.find("span").attr("data");
      $liveLink.attr("href", $theLink); 
    }

    // starts livetile animation
    this.startLivetile = function () {

      var iterator = 0,                                                   // iterator is used to decide which way the tile should flip
        $targetTile = $el,                           // $targetTile is the context in which we operate
        $list = $targetTile.find('.caption ul.live li').not('.follow'),   // $list keeps the list of tiles to flip through
        $next = $list.first().next(),                                     // $next identifies item that should be shown on following flip
        $follow = $targetTile.find('li.follow'),                          // $follow is the sharing tile (follow/like)
        $prev;

      $follow.hide();
      $liveLink = $targetTile.find('#livetile-link')
      _this.copySOMELink($list.first());
      $list.first().show();
      

      slideshowInterval = setInterval(function () {
        // any "fallback" can be run at this point, e.g. fadeIn/fadeOut        
        $prev = ($next.prev().not('.follow').size() === 0) ? $list.last() : $next.prev().not('.follow');

        // hide previous item and show the next one
        $prev.fadeOut(150, function () {
          $next.fadeIn(150);
          $next = ($next.next().size() === 0) ? $list.not('.follow').first() : $next.next();
          
        });
        _this.copySOMELink($next);
        
        _flip($targetTile, iterator);
        iterator += 1;

      }, _this.data_options.rotationdelay * 1000);         // delay between each rotation



      // this click will flip the tile and show followus tile instead of next in line (CLICK FACEBOOK ICON THINGY)
      if ($follow.length > 0) {
        $el.find('.tile-content-wrapper > a').unbind().on('click', function (e) {
          e.preventDefault();
          _this.stopLivetile();
          
          // init FB Like button, this needs to happen here, when the element is visible already (FB SDK limitation)
          if ($targetTile.is('.facebook')) {
            (function(d, s, id) {
              var js, fjs = d.getElementsByTagName(s)[0];
              if (d.getElementById(id)) return;
              js = d.createElement(s); js.id = id;
              js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=350309071724299";
              fjs.parentNode.insertBefore(js, fjs);
              }(document, 'script', 'facebook-jssdk'));
          }

          $prev = (typeof $prev === "undefined") ? $next : $prev;
          $next = $follow.show();

          $prev.fadeOut(150, function () {
            $next.fadeIn(150);
            $next = ($next.next().size() === 0) ? $list.first() : $next.next();
            $targetTile.find('.tile-content-wrapper > a').css('visibility', 'hidden');
          });

          // disable master SOME link
          $liveLink.attr("style", "cursor:default;outline:none"); 
          $liveLink.attr("onclick", "event.preventDefault();"); 
          if (BrowserDetect.version === 8) {
            $targetTile.find(".follow").css("height","165px");
            $liveLink.attr("href", "javascript: void(0)");
            $liveLink.attr("target", "");
          }
          _flip($targetTile, iterator);

          // start rolling again after timeout
          setTimeout(function(){
            $targetTile.find('.tile-content-wrapper > a').css('visibility', 'visible');
            
            // return SOME link behaviour to normal
            $liveLink.attr("style", ""); 
            $liveLink.attr("onclick", "");
            if (BrowserDetect.version === 8) {
              $liveLink.attr("target", "_blank");
            }
            
            _flip($targetTile, iterator+1);
            _this.startLivetile();
          }, 10*1000);

        });
      }
    };

  });
}(jQuery));
window.App = window.App || {};
window.App.Plugin = window.App.Plugin || {};
window.App.Plugin.LoadMore = function LoadMore($, win) {

  return function () {

    var _self = this,
      $el,
      option_defaults = {
        label_selector: '.load-more-label',
        loader_selector: '.load-more-loader',
        list_container_selector: '#list-container',
        load_more_trigger_selector: '.load-more-trigger'
      },
      load_more_url,
      loadmore_data_attr = 'loadmore';

    this.handleTriggerClick = function (_state) {
      _self.$label.hide();
      _self.$loader.show();

      $.ajax({
        url: _self.getNextPageUrl()
      }).done(_self.ajaxSuccessHandler).fail(_self.ajaxFailHandler).always(_self.ajaxDone);

    }

    this.getNextPageUrl = function () {
      return _self.$list_container.data(loadmore_data_attr);
    }

    this.ajaxSuccessHandler = function (data) {

      var current_container = $(_self.options.list_container_selector),
        result_container = $(data).find(_self.options.list_container_selector);

      result_container.find('a.overlay-video-trigger').defaultVideoOverlay();

      // add rows from result to existing container
      current_container.append(result_container.children());

      // update load_more_url      
      current_container.data(loadmore_data_attr, result_container.data(loadmore_data_attr));

      _self.updateLoadmorevisibility();

      PubSub.publish('image.added');
    }

    // hide load more trigger if there is no more results
    this.updateLoadmorevisibility = function () {
      // hide load more trigger if there is no more results

      load_more_url = $(_self.options.list_container_selector).data(loadmore_data_attr);

      if (!(/page=[0-9]/gi).test(load_more_url)) {
        $el.hide();
      }
      else {
        $el.show();
      }
    }

    this.ajaxFailHandler = function (jqXHR, textStatus) {}

    this.ajaxDone = function () {
      _self.$label.show();
      _self.$loader.hide();
      _self.fadeInContent();
    }

    this.fadeInContent = function () {
      if (win.opacityFadeIn) {
        win.opacityFadeIn($('.do-opacity-fade-in'), function () {
          $(this).removeClass('do-opacity-fade-in');
        });

      }
      else {
        $(this).removeClass('do-opacity-fade-in');
      }

    }

    // Unbind all events that plugin listend 
    this.bindEvents = function () {
      this.$load_more_trigger.on('click.' + this.namespace, this.handleTriggerClick);
    }

    // Bind all events that plugin listend 
    this.unbindEvents = function () {}

    // // Collen all element that plugin uses. (shared variables)
    this.collectElements = function () {

      this.options = this.getPluginParam($el, this.options, 'label_selector', 'loader_selector', 'list_container_selector', 'load_more_loader_trigger');

      this.$label = $el.find(this.options.label_selector);
      this.$load_more_trigger = $el.find(this.options.load_more_trigger_selector);
      this.$loader = $el.find(this.options.loader_selector);
      this.$list_container = $(this.options.list_container_selector);
      this.$loadCount = $el.find(this.options.load_count);
    }

    // set plugin varables to default state. 
    // this ensures that all elements are visible / hidden how they should be
    this.setDefaults = function () {
      this.$label.show();
      this.$loader.hide();
      $el.find('.wrapper').show();
      this.updateLoadmorevisibility();

    }

    // this could be moved to shared place

    // Function checks if data-attriibute exists for given option name. 
    // If it does, pick it from data-attribute, otherwise use given option. 
    this.getPluginParam = function (el, opts) {

      var names = Array.prototype.splice.call(arguments, 2);

      for (var i = 0; i < names.length; i++) {
        opts[names[i]] = el.data(names[i]) ? el.data(names[i]) : opts[names[i]];
      }
      return opts;
    }

    this.init = function (el) {

      $el = $(el);
      this.options = $.extend({}, option_defaults, this.options);

      this.collectElements();
      this.bindEvents();
      this.setDefaults();
    };

    this.destroy = function ($el) {
      this.unbindEvents();
    };

  }

};

jQuery.plugin('loadmore_1_1', window.App.Plugin.LoadMore(jQuery, window));
(function($) {
 
  $.plugin('movingImages', function() {
 
    var $window = $(window), $document = $(document), options, $element;

    this.options = {
      breakpoints:[], // resize with thiese breakpoints [0, 1024]
      debounceTime: 50
    };
 
    var setHeight = function() {
      if(options.breakpoints.length !==2 || ($(window).width() > options.breakpoints[0] && $(window).width() <= options.breakpoints[1])) {
        $element.css({ 'height': $element.outerWidth() }); 
      } else {
        $element.css({'height': ''});
      }
    };
 
    this.init = function($el) {
      $element = $el;
      options = this.options;
      var lazySetHeight = $.debounce(setHeight, options.debounceTime);
      $window.on('resize.' + this.namespace, lazySetHeight).resize();
    };
 
    this.destroy = function($el) {
      $window.off('resize.' + this.namespace);
    };
 
  });
 
})(jQuery);
/**
 * Notifications that provides common way to display error and notification messages.
 * Plugin listens PubSub events and adds those to notification area. 
 * 
 * 
 * requires: 
 *  - jquery 
 *  - pubsub.js
 * 
 * 
 * js example:
 * 
 * PubSub.publish('notifications.error', {
 *   headline: 'bb', 
 *   description: 'josadastain', 
 *   disposeDelay: 2000           // optional - can overwrite
 * });
 *
 * haml markup:
 *
 * .w-notifications
 *   .wrapper
 *     %ul.w-notifications-container
 *       %li.w-notifications-item.template
 *         .w-notifications-item-headline
 *         .w-notifications-item-decs
 *         %a.w-notifications-item-close
 *
*/


(function() {
  jQuery.plugin('notifications', function() {
    var _this = this;
    this.defaultOptions = {
      eventNamesSpace: 'notifications',
      eventNames: ['error', 'info'],
      template: '.w-notifications-item',
      container: '.w-notifications-container',
      itemClose: '.w-notifications-item-close',
      disposeDelay: 7000,
      animationSpeed: 200
    };
    /**
     * Handles all incomming pubsub events.
     *  
     * @param  {String} eventName that trigged pubsub event
     * @param  {Object} data      submitted data
     * @return {undefined}
    */

    this.handleNotificationEvent = function(eventName, data) {
      if (new RegExp("" + _this.options.eventNamesSpace + ".[" + (_this.options.eventNames.join(',')) + "]").test(eventName)) {
        return _this.addNotification(data, eventName.split('.')[1]);
      }
    };
    /**
     * Handler that closes notifications.
     * 
     * @param  {Event} e    Click event from close button
     * @return {undefined}
    */

    this.closeItem = function(e) {
      _this.container.empty();
      return _this.onItemChange();
    };
    /**
     * creates new notification and adds that to notification area.
     * 
     * @param {Object} data   PubSub event data
     * @param {String} type   Message type to be added
    */

    this.addNotification = function(data, type) {
      var delay, newItem;
      newItem = _this.buildItemByDataAndType(data, type);
      _this.container.append(newItem);
      _this.onItemChange();
      newItem.slideDown(_this.options.animationSpeed);
      delay = data.disposeDelay || _this.options.disposeDelay;
      return _this.disposeItemAfter(newItem, delay);
    };
    /**
     * create new notification item based on given type and data.
     * 
     * @param  {Object} data    Object that contains all content for new notification 
     * @param  {String} type    Type of new notification
     * @return {jQuery object}  created notification markup with filled content
    */

    this.buildItemByDataAndType = function(data, type) {
      var newItem;
      newItem = _this.template.clone().hide();
      _this.setOrHide(newItem, '.w-notifications-item-headline', data.headline);
      _this.setOrHide(newItem, '.w-notifications-item-decs', data.description);
      newItem.addClass(type);
      return newItem;
    };
    /**
     * Takes new item markup and fills it's content (if found).
     * 
     * @param {jQuery object} newItem   Template to be filled
     * @param {String} selector         Selector to found content to be filled
     * @param {String} value            Value to be used to fill selected html node
    */

    this.setOrHide = function(newItem, selector, value) {
      if (value) {
        return newItem.find(selector).html(value);
      } else {
        return newItem.find(selector).remove();
      }
    };
    /**
     * Gets jquery object and removes it from view after given delay.
     * 
     * @param  {[type]} item  Node to be removed
     * @param  {[type]} delay disposal delay
     * @return {undefined}
    */

    this.disposeItemAfter = function(item, delay) {
      return setTimeout(function() {
        return _this.disposeItem(item);
      }, delay);
    };
    /**
     * Gets jquery object and removes it from view.
    */

    this.disposeItem = function(item) {
      return item.slideUp(_this.options.animationSpeed, function() {
        item.remove();
        return _this.onItemChange();
      });
    };
    /**
     * Function that containes screen updates after items has been changed.
     * 
     * @return {undefined}
    */

    this.onItemChange = function() {
      if (_this.container.children().length === 0) {
        return _this.el.hide();
      } else if (_this.container.children().length === 1) {
        return _this.el.show();
      }
    };
    /**
     * Bind all event that we need for plugin to work
     * @return {undefined}
    */

    this.bindEvents = function() {
      if (this.options.itemClose) {
        this.el.on('click.' + this.namespace, this.options.itemClose, this.closeItem);
      }
      return PubSub.subscribe(this.options.eventNamesSpace, this.handleNotificationEvent);
    };
    /**
     * Collect all cacheable elements to variables
    */

    this.collectElements = function() {
      this.template = $(this.options.template).removeClass('template').detach();
      return this.container = this.el.find(this.options.container);
    };
    /**
     * Plugin interface method to be called when plugin in attached to some element
     * @param  {HTML element} el element to be used as root element for plugin
     * @return {undefined}
    */

    this.init = function(el) {
      if (el.length === 0) {
        return;
      }
      this.el = el;
      this.options = $.extend({}, this.defaultOptions, this.options);
      this.collectElements();
      return this.bindEvents();
    };
    /**
     * Plugin interface method to be called when plugin in removed from some element
     * @param  {HTML element} el element that has been used as root element for plugin
     * @return {undefined}
    */

    this.destroy = function(el) {
      this.el.off('.' + this.namespace);
      return PubSub.unsubscribe(this.options.eventNamesSpace);
    };
    /**
     * Return this instance so jquery.plugin can find init and destroy methods
    */

    return this;
  });

}).call(this);
(function($) {

  $.plugin('offersTableFilters', function() {  

    var $window = $(window), $form, ajaxUrl, loadTarget, columnHeaders, columnFooters;

    function updateFormHiddenParameters() {
      $form.find('input[type=hidden]').each(function() {
        var nam = $(this).attr('name') + '=',
        val = window.location.search,
        idx = val.indexOf(nam),
        end = val.indexOf('&', idx),
        end = end == -1 ? val.length : end,
        val = val.substring(idx + nam.length, end);
        if (idx > 0 && val) {
          $(this).attr('value', val);
        }
      });
    }

    function loadTarget(url) {
      if (window.history && history.replaceState) {
        history.replaceState(null, null, url);
      }
      updateFormHiddenParameters();
      $loadTarget.load(ajaxUrl + url.substring(1), function() {
        $offers.trigger('contentReload');
        if ($offers.offset().top < $(window).scrollTop())
          $('html, body').animate({ scrollTop: $offers.offset().top }, 400);
      });
    }

    function bindEvents() {
      $offers.on('click', columnHeaders, function(event) {
        loadTarget($(this).attr('href'));
        event.preventDefault();

        // highlight elements
        var position = $(this).closest('th').index() + 1;
        $('thead th, tbody td').removeClass('highlight');
        $('thead th:nth-child(' + position + '), tbody td:nth-child(' + position + ')').addClass('highlight');

      });
	    
      // Test for offers filters changes
      $form.on('change', function(event) {
        loadTarget('?'+$form.serialize());
      });
   
      // Test for offers table column hover, excluding the info column
      $offers.on('mouseenter mouseleave', columnHeaders, function(event) {
        var position = $(this).closest('th').index() + 1;
        $('thead th, tbody td').removeClass('hover');
        if (event.type == 'mouseenter') {
          $('thead th:nth-child(' + position + '), tbody td:nth-child(' + position + ')').addClass('hover');
        }
      });

      $offers.find('th.highlight').each(function() {
        var position = $(this).index() + 1;
        $('tbody td:nth-child(' + position + ')').addClass('highlight');
      });

      $offers.on('click', columnFooters + ","+paginationFooters, function(event) {
        loadTarget($(this).attr('href'));
        event.preventDefault();
      });
    };
    
    this.init = function($el) {
      $offers = $el;
      $form = $('.offers-filters form');
      ajaxUrl = $form.attr("ajax-url");
      $loadTarget = $('#' + $form.attr("data-target"));
      columnHeaders = 'thead th:not(.info) a';
      columnFooters = '.footer li a';
      paginationFooters = '.offers-list .pagination li a';
      bindEvents();
    };
    
    this.destroy = function($el) {
    };

  });

})(jQuery);
 $.plugin('openOnNewWindow', function() {

    var el, options;

    var init = function($el) {
      options = this.options;
      el = $($el);
      el.attr('target', '_new_tab')
      el.on('click.' + this.namespace, open);
    },
   
    open = function(e){
      window.open('http://maps.nokia.com/map=51.51615621,-0.083722984,17/title=Orange', '_new_tab');
      e.preventDefault();
      return false;
    },  

    destroy = function($el) {
      $el.off('click.' + this.namespace);
    };

    return {
      destroy: destroy, 
      init: init
    };
    
  });
// Known issues:
// * sometimes YouTube player steals the focus and prevents event triggering (detected in FF, IE)

(function($) {
 $.plugin('showOverlay', function() {

    var $window = $(window),
        options, 
        $trigger, 
        $section,
        $section_wrapper,  
        $overlayPart,
        $closeButton,
        $templateContainer, 
        $overlayContent, 
        $aside_navigation,
        index = 0,
        original_scroll_position, 
        doFade, 
        isOpen = false,
        eventNamespace,
        showCallback,
        hideCallback,
        overlayClass = 'responsive-video-overlay',
        overlayCloseButtonClass = 'overlay-close',
        is = BrowserDetect,
        supportedBrowser = $.inArray(is.browser, ['Chrome', 'Safari', 'Firefox', 'Mozilla']) > -1,
        supportedOS = $.inArray(is.OS, ['Mac', 'Windows']) > -1,
        supportedIE = is.browser === 'Explorer' && is.version > 7,
        useCustomControls = (supportedBrowser && supportedOS) || supportedIE;
 
    // Define options and their defaults
    this.options = {
      overlayContent: false, 
      trigger: false,
      callback: $.noop,
      section_wrapper: false
    };
 
   this.init = function($el) {
      eventNamespace = this.namespace;
      doFade = (BrowserDetect.browser === 'Explorer' && BrowserDetect.version < 8) ? false : true;
      options = this.options;
      $section = $el;
      if(!this.options.section_wrapper)
        $section_wrapper = $($el.find('.wrapper').get(0));
      else
        $section_wrapper = $($el.find(this.options.section_wrapper).get(0));

      $trigger = $el.find(options.trigger);

      $overlayContent = $el.find(options.overlayContent);

      $aside_navigation = $('.aside-navigation');
      removeOldOverlay();

      $templateContainer = getTemplateContainer();
      $section_wrapper.append($templateContainer);
      $closeButton = $templateContainer.find('.close');

      showCallback = this.options.showCallback;
      hideCallback = this.options.hideCallback;

      $trigger.on('click', triggerShowOverlay);
    };

    function triggerShowOverlay(e) {
      e.preventDefault();
      index = $trigger.index($(this));
      showOverlay();
    }

    this.destroy = function($el) {
      // Unbinds
    };
 
    function showOverlay() {
      if(isOpen) {
        return;
      }

      $aside_navigation.hide();
      if(typeof $overlayPart === 'undefined') {
        $overlayPart = getOverlayPart();
      }
      
      if(doFade) {
        $('#container > #main').prepend($overlayPart);
        $overlayPart.animate({ 'opacity': '.85'}, function() {
          $(this).css({'height': '100%'});
        });
        $templateContainer.animate({ 'opacity': '1'}, function() {
          $(this).css({'height': 'auto'});
        });
      }
      
      if ($.isFunction(showCallback))
        showCallback($section);

      original_scroll_position = Math.floor($('body').scrollTop());

      var width = $templateContainer.width();
      var height = width * 3 / 4;

      $('html,body').animate({'scrollTop': Math.floor($templateContainer.offset().top - Math.max(($(window).height() - height) / 2, 0)) });

      initContentComponenetsIfNeeded();
      bindEvents();
      isOpen = true;
      repositionCloseButton(isOpen);
    }

    function closeOverlay(event) {
      //$('html,body').animate({'scrollTop': original_scroll_position});
      $('body').scrollTop(original_scroll_position);
     
      $aside_navigation.show();

      // If there is active player, close it. Stopping an 
      // active player doesn't work reliably on mobile devices.
      if (App.Video.currentPlayer) {
        App.Video.currentPlayer.close();
      }

      $overlayPart.css({ 'opacity': '0', height: '1'});
      $templateContainer.css({ 'opacity': '0', height: '0'});
      isOpen = false;
      repositionCloseButton(isOpen);
      event.preventDefault();
      event.stopPropagation();
      unbindEvents();

      if ($.isFunction(hideCallback)) {
        hideCallback($section);
      }
    }

    function getOverlayPart() {
      var _overlay = $('<div class="' + overlayClass + '"><div></div><div>');
      return _overlay;
    }

    function bindEvents() {
      // Close overlay by pressing ESC
      $(document).on('keyup.' + eventNamespace, function (event) {
        if (event.which === 27 && isOpen) {
          closeOverlay(event);
        }
      });

      // Close overlay by clicking close button
      $overlayPart.on('click.' + eventNamespace, closeOverlay);
      $closeButton.on('click.' + eventNamespace, closeOverlay);
    }

    function unbindEvents() {
      $(document).off('.' + eventNamespace);
      $overlayPart.off('.' + eventNamespace);
      $closeButton.off('.' + eventNamespace);
    }

    function getTemplateContainer() {
      var _wrapper =
        $('<div class="overlay-wrapper"> \
          <div class="responsive-gallery"> \
            <a class="close" href="#" style="display: block;"></a> \
          </div> \
        </div>').css({height: 1,  opacity: 0, overflow: 'hidden'});

      if($overlayContent) {
        _wrapper.find('.responsive-gallery').prepend($overlayContent.detach().show());
      }

      _wrapper.find('ul.controls li a').bind('click',function(e) { e.preventDefault();}); 
      
      return _wrapper; 
    }

    function initContentComponenetsIfNeeded() {
      if($overlayContent.hasClass('standalone-slideshow')) {
       // $section.find('.content-wrapper').slideshow2 ({ arrows: true, verticalNavigation: true});
       // $section.find('.slide:first').show();
      }
    }

    function removeOldOverlay(){
      $overlayContent.remove(); 
    }

    // TODO Find a better way to handle close button positioning
    function repositionCloseButton(overlayOpen) {
      if ($closeButton.length > 0 && !useCustomControls) {
        if (overlayOpen) {
          // Move close button to the top right corner of the viewport
          $closeButton.addClass(overlayCloseButtonClass).prependTo($('#container > #main'));
        } else {
          // Move close button back to overlay container, so it can be hidden when the overlay is closed
          $closeButton.removeClass(overlayCloseButtonClass).appendTo($templateContainer.find('.responsive-gallery'));
        }
      }
    }
  });
})(jQuery);
(function($) {

  $.plugin('productAvailabilityNotifier', function() {  

    var $window = $(window), options, $section, $notifierHeight;

    this.options = {
      postURL: "/ajax/product_availability_notifier_server.haml"
    };
    
    function adjustSubmitNotifyMeHeight() {
      // no height adjustment for non-js thank you page
      if ($(".product-notifier").find(".nonjs-hidden-area").text() === "") {
         $notifierHeight = $(".product-notifier").find(".unhidden-area").height() + $(".product-notifier").find("header h3").outerHeight(true);
         $(".product-notifier").find(".content").css("height", $notifierHeight);
         
         // check if error label(s) are set visible because of inline-block use send button needs to move too when error msgs appear
         if ($section.find("form div.validation-error-block label span:visible").length > 0) {
           $section.find(".actions").css("margin-top", "0").css("margin-bottom", "0.5em").css("vertical-align", "bottom");
         } else if ($section.find("form div.validation-error-block label span:hidden").length > 0) {
           $section.find(".actions").css("margin-top", "0.6em");
         }
       }
    };
  
    function submitNotifyMe() {
      // send the form data to server via ajax $.post
      var data = {
                  email: $("#email").val(),
                  agreed: $(".agreement-block input").is(':checked')
                  };
      
      $.post(options.postURL, function(data) {
        // if all validation OK, display thank you page
        $(".product-notifier").find(".unhidden-area").fadeOut(function() {
          $(".product-notifier").find(".hidden-area").fadeIn();
        });
      }).fail(function() {
        $section.find(".validation-error-block").find("span.error").show();
        adjustSubmitNotifyMeHeight();
      });
    }
  
    function bindEvents() {
      
      // when DOM has loaded for the component, set the height
      $(".product-notifier").ready(function() {
        adjustSubmitNotifyMeHeight();
      });
      
      // form submit via JS
      // NOTE: DISABLED because WAL app don't accept AJAX POST requests
      /*
      $section.find("form").submit(function(event) {
         event.preventDefault();
         return validateForm() ? submitNotifyMe() : adjustSubmitNotifyMeHeight();
      });
      */
      
      // always first hide server error message
      $section.find("form input.button.submit").click(function() {
        $section.find(".validation-error-block").find("span.error").hide();
        setTimeout(function() { adjustSubmitNotifyMeHeight(); },20);   // for desktop
        setTimeout(function() { adjustSubmitNotifyMeHeight(); },200);  // for slower devices
      });
    };
    
    
    this.init = function($el) {
      $section = $el;
      options = this.options;
      bindEvents();
      
      $(window).on('resize', $.debounce(adjustSubmitNotifyMeHeight, 300));
    };
    
    this.destroy = function($el) {
    };

  });

})(jQuery);
(function($) {
  $.plugin('productBasedScreening', function() {
    var $window = $(window), $element, $form;

    var onSubmit = function(){
      var IMEI_code = $.trim($form.find("#deviceId").val()), url = $form.attr('action') + '&' + $form.serialize();
      if (IMEI_code === "") {
        $form.find(".required-note").css("cssText", "display: none !important");
        $form.find(".invalid-imei").css("cssText", "display: inline-block !important");
      } else {
        $.ajax({
            url: url,
            dataType: 'json',
            timeout: 10000,
            async: false,
            cache: true,
            success: function(data) {
              if(data.deviceStatus === "supported" || data.deviceStatus === "not supported") {
                data.IMEI  = IMEI_code.toString().substring(0, 8) + IMEI_code.substring(8).replace(/./g, "*");

                var validPhoneModelCookie = { "valid" : ((data.deviceStatus === "supported")? true : false), "imei" : data.IMEI };
                var expiryDate = new Date();
                if(I18n.IMEI_checker.cookie_expiration > 0) {
                  expiryDate.setDate(expiryDate.getDate() + parseInt(I18n.IMEI_checker.cookie_expiration));
                } else {
                  expiryDate = null;
                }
                $.cookies.set("nkValidPhoneModel", validPhoneModelCookie, {
                    expiresAt: expiryDate,
                    path: I18n.IMEI_checker.cookie_path
                  });

                load_dynamic_support_contacts(validPhoneModelCookie, function(){ $('html, body').animate({ scrollTop: $element.offset().top }, 400); });

                track_submit(data.deviceStatus === "supported" ? "valid" : "not supported");
              } else if(data.deviceStatus === "error") {
                $form.find(".required-note").css("cssText", "display: none !important");
                $form.find(".invalid-imei").css("cssText", "display: inline-block !important");
                track_submit("invalid");
              }
            },
            error: function(xhr, textStatus, errorThrown) {
              $form.find(".required-note").css("cssText", "display: none !important");
              $form.find(".request-error").css("cssText", "display: inline-block !important");
              track_submit("error");
            }
        });
      }
      return false;
    };

    function track_submit(status) {
        if (window.isTrackingAvailable) {
        	utag.view({ pName: nkT.pName + ":imei validator:" + status });
        }
    }

    var startLiveChat = function(event){
      event.preventDefault();
      window.open(I18n.live_chat.launch_url, 'ChatWindow',
                  'resizable=yes,location=no,status=no,toolbar=no,menubar=no,directories=no,scrollbars=yes,width=700,height=580,top=20,left=20'
      );
    };

    function load_dynamic_support_contacts(valid_phone_param, callback) {
      var data_string = 'validCountry=' + contact_support_valid_country;
      var displayed_imei;
      if($.cookies.get("nkValidPhoneModel")) {
        data_string += '&deviceStatus=' + $.cookies.get("nkValidPhoneModel").valid;
        displayed_imei = $.cookies.get("nkValidPhoneModel").imei
      } else if (jQuery.isPlainObject(valid_phone_param) && valid_phone_param.hasOwnProperty('valid')) {
        data_string += '&deviceStatus=' + valid_phone_param.valid;
        displayed_imei = valid_phone_param.imei;
      }
      data_string = I18n.IMEI_checker.product_screening_url.indexOf('?') !== -1 ? "&" + data_string : "?" + data_string;
      $("#product_based_screening").load(I18n.IMEI_checker.product_screening_url + data_string, function() {
          var $container = $(this);
          $form = $container.find("form");
          $form.on("submit." + this.namespace, onSubmit);
          PubSub.publish('image.added');

          if (window.opacityFadeIn) {
            window.opacityFadeIn($('.do-opacity-fade-in'), function () {
              $(this).removeClass('do-opacity-fade-in');
            });
          }

          $container.find("p.imei").append(displayed_imei);
          $container.find(".change-imei a").on('click', function(event){
            event.preventDefault();
            if($.cookies.get("nkValidPhoneModel")) {
              $.cookies.del("nkValidPhoneModel",{path: I18n.IMEI_checker.cookie_path});
            }
            load_dynamic_support_contacts();
          });

          if ($.isFunction(callback)) {
              callback();
          }
          loadLiveChat();
      });
    }

    function loadLiveChat(){
      if(I18n.live_chat && I18n.live_chat.status_url.length > 0 && $(".live-chat").length > 0) {
        $.ajax({
            url: I18n.live_chat.status_url,
            dataType: "jsonp",
            cache: true,
            timeout: 5000,
            jsonp: false
        });
      }
    }

    // called by Live Chat status check
    window.chatStateSelector = function(data){
      var data_string = (I18n.live_chat.load_url.indexOf('?') !== -1 ? "&" + jQuery.param(data) : "?" + jQuery.param(data))
      $.ajax({
          type: "GET",
          url: I18n.live_chat.load_url + data_string,
          cache: true,
          timeout: 5000,
          success: function(teaserData) {
            if (teaserData) {
              $('.live-chat-default').replaceWith(teaserData);
              var $live_chat = $('.live-chat');
              if ($live_chat.hasClass('.transition-ease-fast'))
              if (window.opacityFadeIn) {
                window.opacityFadeIn($('.do-opacity-fade-in'), function () {
                  $(this).removeClass('do-opacity-fade-in');
                });
              }

              PubSub.publish('image.added');
              if (data && data.liveChatStatus === "online") {
                  $live_chat.children('a.tile-content-wrapper').bind('click', function(e) {
                  startLiveChat(e);
                });
              }
            }
          }
      });
    };

    this.init = function($el) {
      $element = $el;
      load_dynamic_support_contacts();
    };

    this.destroy = function($el) {
      $form.off("submit." + this.namespace, onSubmit);
      $('.start-live-chat').off("click." + this.namespace, startLiveChat);
    };

  });

})(jQuery);
(function($) {

  $.plugin('productCompareView', function() {

    var $window = $(window), options, $section;

    this.options = {  
      debounceTime: 250,
      startFromWidth: 640
    };

    // Draw borders
    function draw() {
      $section.find('.product').height('auto').each(function() {
        $(this).css({ 'height': $(this).closest('ul.product-list').outerHeight()+'px' });
      });
    }

    // Undraw
    function unDraw() {
      $section.find('.product').each(function() {
        $(this).css({ 'height': 'auto'});
      });
    }

    var enhanceAreas = function() {
      var $areaLink = $section.find('h3 a'), 
        isDesktop = $window.width() >= options.startFromWidth;


      $('.product-list').toggleClass('bordered-content', isDesktop);

      if(isDesktop) {
        if($areaLink.hasClass('enh-toggle')) {
          $areaLink.removeClass('enh-toggle enh-toggle-active').enhanceToggle('destroy');
          $section.find('.enh-toggle-opened').removeClass('enh-toggle-opened');
        }
        draw();
      } else {
        if(!$areaLink.hasClass('enh-toggle')) {
          $areaLink.addClass('enh-toggle').enhanceToggle({silent: true, closeEvent: 'compare_view'});
        }
        unDraw();
      }
    };

    /*

    */

    this.init = function($el) {
      $section = $el;
      options = this.options;

      var $sectionLink = $section.find('h2').not(':first').find('a');
      $sectionLink.addClass('enh-toggle').enhanceToggle();

      var lazyEnhance = $.debounce(enhanceAreas, options.debounceTime);
      $window.on('resize.' + this.namespace, lazyEnhance).resize();
    };

    this.destroy = function($el) {
      $window.off('resize.' + this.namespace);
    };

  });

})(jQuery);
(function($) {

  $.plugin('productComparison', function() {

    // define plugin variables
    var _self = this,
      $catalog,
      $compareSelector,
      $compareSelectorList,
      $catalog,
      $startComparisonLink,
      uncheckLink = '<a class="uncheck-link" href="#">' + I18n.get('product_comparison', 'remove_from_collection') + '</a>',
      emptyCompareItem = '<li class="empty"><div class="visuals"></div></li>',
      comparisonStorage = false,
      localStorage = null,

      // define plugin options
      default_options = {
        storageName: 'phones_for_comparison', 
        compare_selector: '.compare-selector',
        compare_selector_list_selector: '.wrapper > .content-wrapper > .phone-list > ul',
        start_comparison_link_selector: 'a.start-comparison',
        catalog_selector: '.catalog', 
        catalog_item_selector: '.wrapper .content-wrapper > ul > li',
        compare_link_selector: 'a.compare'
       };

    // Initialize the storage if it exists
    function getStorage() {
      try {
        var storage = $.cookies.get(_self.options.storageName);
      } catch (e) {}
      return storage ? storage : (localStorage != null ? localStorage : false);
    }

    // Remove the storage
    function deleteStorage() {
      try {
        $.cookies.del(_self.options.storageName);
      } catch (e) {}
      localStorage = null;
      updateComparisonLink();
    }

    // Save the storage
    function saveToStorage(data) {
      try {
        $.cookies.set(_self.options.storageName, data);
        if (!$.cookies.get(_self.options.storageName)) {
          localStorage = data;
        }
      } catch (e) {
        localStorage = data;
      }
      comparisonStorage = getStorage();
      updateComparisonLink();
      if(!$compareSelector.hasClass('open')) {
        $compareSelector.css({ 'display': 'block' }).animate({ 'height': '160px' }, function() {
          $compareSelector.css({ 'height': 'auto' }).addClass('open');
        });
      }
    }

    // Update product compare buttons
    function updateCatalogButtons(pid, state) {
      var $base = $catalog.find('[data-pid="' + pid + '"]');
      switch (state) {
        case 'default':
          $base.find('a.compare').removeClass('selected disabled').find('span').text(I18n.get('product_comparison', 'compare'));
          $base.find('a.uncheck-link').remove();
        break;
        case 'selected':
          if (comparisonStorage && comparisonStorage.length === 1) {
            $base.find('a.compare').addClass('disabled').find('span').text(I18n.get('product_comparison', 'start_comparison_short'));
          } else {
            $base.find('a.compare').addClass('selected').removeClass('disabled').find('span').text(I18n.get('product_comparison', 'start_comparison_short'));
          }
          if ($base.find('a.uncheck-link').length == 0) {
            $base.find('a.compare').append(uncheckLink);
          }
        break;
      }
    }

    function updateAllCatalogSelectedButtons() {
      updateAllCatalogButtons('selected');
    }

    function updateAllCatalogButtons(state) {
      $.each(comparisonStorage, function(key, value) {
        updateCatalogButtons(value.pid, state);
      });
    }

    function appendTrayItem($el) {
      $compareSelectorList.find('li.empty').first().removeClass('empty').addClass('selected').attr('data-pid', $el.parents('[data-pid]').attr('data-pid')).html('<div class="visuals"><img src="' + $el.parents('[data-image-url]').attr('data-image-url') + '" /><a class="remove" href="#" title="' + I18n.get('product_comparison', 'remove') + '">' + I18n.get('product_comparison', 'remove') + '</a></div><span>' + $el.parents('[data-model-name]').attr('data-model-name') + '</span>');
      // Treat the first tray item as a special case
      $compareSelectorList.find('li').first().addClass('first');
    }

    function updateComparisonLink() {
      if (!comparisonStorage || comparisonStorage.length < 1) {
        $startComparisonLink.empty().removeClass('enabled');
      } else if (comparisonStorage.length === 1) {
        var a = $startComparisonLink.empty().append('<span>' + I18n.get('product_comparison', 'add_one_more_product') + '</span>').removeClass('enabled');
        a.attr('href', modifyLinkUrl(a.attr('data-href')));
        a.attr('onclick', 'return false;');
      } else {
        var a = $startComparisonLink.empty().append('<span>' + I18n.get('product_comparison', 'start_comparison') + '</span>').addClass('enabled');
        a.attr('href', modifyLinkUrl(a.attr('data-href')));
        a.removeAttr('onclick');
      }
    }

    function modifyLinkUrl(href) {
      var ids = "";
      $.each(comparisonStorage, function(key, value) {
        if (ids) {
          ids += '-';
        }
        ids += value.pid;
      });
      if (/products=/.test(href)) {
        return href.replace(/products=[^&]*/, 'products=' + ids);
      }
      return href += (/\?/.test(href)?'&':'?') + 'products=' + ids;
    }

    function addToStorage(event) {
      event.preventDefault();
      if($(this).hasClass('disabled')) {
        // do nothing
      } else if($(this).hasClass('selected')) {
        startComparison();
      } else {
        // Storage doesn't exist yet
        if(!comparisonStorage) {
          appendTrayItem($(this));
          var tmpStorage = [];
          tmpStorage.push({ pid: $(this).parents('[data-pid]').attr('data-pid'), modelName: $(this).parents('[data-model-name]').attr('data-model-name'), imageUrl: $(this).parents('[data-image-url]').attr('data-image-url') });
          saveToStorage(tmpStorage);
          updateAllCatalogButtons('selected');
        // Too many items selected
        } else if(comparisonStorage && comparisonStorage.length >= 3) {
          $(this).addClass('disabled').find('span').text(I18n.get('product_comparison', 'maximum_selected'));
        // Save to storage
        } else {
            appendTrayItem($(this));
            comparisonStorage.push({ pid: $(this).parents('[data-pid]').attr('data-pid'), modelName: $(this).parents('[data-model-name]').attr('data-model-name'), imageUrl: $(this).parents('[data-image-url]').attr('data-image-url') });
            saveToStorage(comparisonStorage);
            updateAllCatalogButtons('selected');
        }
      }
    }

    function startComparison () { 
      if(comparisonStorage && comparisonStorage.length > 1) {
        window.location.href = $startComparisonLink.attr('href');
      }
      return false;
    }

    function deleteFromStorage(event) {
      // Set variables, get the parent li's data-pid value
      var pid = parseInt($(this).closest('li').data('pid'), 10),
          found = null,
          i;
      // Check the index of the found item
      $.each(comparisonStorage, function(i, e) {
        if (parseInt(e.pid, 10) === pid) {
          found = i;
          return false;
        }
      });
      // Deletion routine if an item index was found
      if(found !== null) {
        comparisonStorage.splice(found, 1);
        if(comparisonStorage.length<1) {
          $compareSelector.animate({ 'height': '0' }, 250, 'easeInOutQuart', function() {
            $compareSelector.removeClass('open').css({ 'display': 'none' });
            deleteStorage();
          });
        } else {
          saveToStorage(comparisonStorage);
        }

        $compareSelectorList.append(emptyCompareItem).find('[data-pid="' + pid + '"]').remove().end().find('li').first().addClass('first');
        $(this).remove();
        updateCatalogButtons(pid, 'default');
        $catalog.find(_self.options.compare_link_selector).each(function() {
          if($(this).hasClass('disabled')) {
            $(this).removeClass('disabled').find('span').text(I18n.get('product_comparison', 'compare'));
          }
        });
        updateAllCatalogButtons('selected');
      }
      event.preventDefault();
      return false;
    }
    
    function loadInPreRendederedItems() {
      var tmpStorage = [];
      $compareSelectorList.find('li.selected').each(function (key, val) {
        tmpStorage.push({ pid: $(val).attr('data-pid'), modelName: $(this).attr('data-model-name'), imageUrl: $(this).find('img').attr('src') });
      });
      if (tmpStorage.length >= 1) {
        $compareSelectorList.find('li.selected').each(function (key, val) {
          $(val).removeClass('selected').addClass('empty').removeAttr('data-pid').empty().append('<div class="visuals">');
        });
        saveToStorage(tmpStorage);
      }
    }

    function initializeMarkup(markup) {
      if (!comparisonStorage) return;
      updateAllCatalogButtons('selected');
    }


    this.collectElements = function() {

        $compareSelector = $(this.options.compare_selector);
        $compareSelectorList = $compareSelector.find(this.options.compare_selector_list_selector);
        $startComparisonLink = $compareSelector.find(this.options.start_comparison_link_selector);
 
        $catalog = $(this.options.catalog_selector);
    }

    // Initialize the plugin
    this.init = function(el) {

      this.options = $.extend({}, default_options, this.options);
      
      // Check if we have a storage, if so, store it in a variable, if not return false;
      comparisonStorage = getStorage();
      this.collectElements();

      loadInPreRendederedItems();

      // We have a storage and items in it
      if(comparisonStorage) {
        // Open the tray
        $compareSelector.addClass('open');
        // Build the compare selector and touch the source listing (e.g. catalog) based on what's in the storage
        $.each(comparisonStorage, function(key, value) {
          // Add phone to compare list
          $compareSelectorList.find('li.empty').first().removeClass('empty').addClass('selected').attr('data-pid', value.pid).html('<div class="visuals"><img src="' + value.imageUrl + '" /><a class="remove" href="#" title="' + I18n.get('product_comparison', 'remove') + '">' + I18n.get('product_comparison', 'remove') + '</a></div><span>' + value.modelName + '</span>');
        });
        // Selected state to catalog for the phones in the compare list
        updateAllCatalogButtons('selected');
      }

      updateComparisonLink();
      bindEvents();    

      loadmore_content_hooks.push(initializeMarkup);
    };




    function bindEvents () {
      // Add items to the storage
      $catalog.on('click', 'a.compare', addToStorage);
      // Remove items from the storage
      $catalog.on('click', 'li a.uncheck-link', deleteFromStorage);
      $compareSelectorList.on('click', 'a.remove, img', deleteFromStorage);
      $startComparisonLink.on('click', startComparison);
      $(document).on('newProductContent', updateAllCatalogSelectedButtons);

    }

    // destroy the plugin
    this.destroy = function($el) {

      $catalog.off('click');
      $catalog.off('click');
      $compareSelectorList.off('click');
      $startComparisonLink.off('click');
      $(document).off('newProductContent');
    };


  });

})(jQuery);
(function($) {

  $.plugin('productLinks', function() {

    var _self = this,
        $el,
        default_options = {
          pid: 'default pid',
          selectorURL: 'default selectorURL'
        };

    function onClickHandler(e) {
      var $this = $(this),
          url = $this.attr('href'),
          $anchorTarget;

      // Set target
      $anchorTarget = $(url);

      // Check if url starts with an anchor tag and check if url is not just a # tag
      if(url.substr(0, 1) == "#" && url.length > 1) {
        // If url is an anchor, prevent event
        e.preventDefault();

        // If history.pushState isn't undefined, add anchor to address bar
        if(history.pushState){
          history.pushState(null, null, url);
        }

        // Check if target exists and scroll to target
        if($anchorTarget.length > 0) {
          scrollHandler($anchorTarget);
        }
      }
    }

    function scrollHandler(anchorTarget) {
      var $anchorTarget = anchorTarget,
          targetPosition;

      // Calculate target position
      targetPosition = $anchorTarget.offset().top;

      // Animate to target
      $('html,body').animate({'scrollTop': targetPosition}, 300);
    }

    function positionDropdownMenu() {
      $('.w-product-links-items').css({'top': $('.w-product-links-trigger').outerHeight()});
    }

    function deleteCookie() {
      try {
        $.cookies.del('product_selector');
      } catch(e) {}  
    }

    function setCookie() {
      try {
        $.cookies.set('product_selector', {id: this.options.pid, url: this.options.selectorURL});
      } catch(e) {}
    }

    function bindEvents() {
      $el.on('click.' + this.namespace, '.w-product-links-anchor-trigger', onClickHandler);
    }

    function unbindEvents() {
      $el.off('click.' + this.namespace, '.w-product-links-anchor-trigger');
    }

    this.init = function(el) {
      
      $el = $(el);
      this.options = $.extend({}, default_options, this.options);

      bindEvents();
      positionDropdownMenu();
      setCookie();

    };
  
    this.destroy = function($el) {
      unbindEvents();
    };

 
  });
})(jQuery);


$.fn.productLink = $.fn.productLink || {};
// TODO: Refactor these as methods of the plugin
$.fn.productLink.deleteCookie = function() {
  try {
    $.cookies.del('product_selector');
  } catch(e) {}  
};

$.fn.productLink.setCookie = function($pid, $selectorURL) { 
  try {
    $.cookies.set('product_selector', {pid: $pid, url: $selectorURL});
  } catch(e) {}  
};


$.fn.productLink.renderProductlinkFromCookie = function() {
  try {
      var cookieUrl = $.cookies.get('product_selector')['url'];
      $.get(cookieUrl, function(data) {
        // if ($("#main .product-hero-area-page-actions").length > 0){
        //   $("#main .product-hero-area-page-actions").append($(data).filter('.w-product-links'));
        // } else if ($("#main .page-header-page-actions").length == 0 ) {
        //   $("#main h1").after('<div class="page-header-page-actions"/>');
        //   $("#main .page-header-page-actions").append($(data).filter('.w-product-links'));
        // }

        if ($("#main .page-header").length > 0){
          if ($("#main .page-header-page-actions").length > 0){
            $("#main .page-header-page-actions").prepend($(data).filter('.w-product-links'));
          } else if ($("#main .page-header-page-actions").length == 0 ) {
            $("#main h1").after('<div class="page-header-page-actions"/>');
            $("#main .page-header-page-actions").prepend($(data).filter('.w-product-links'));
          }
        }

        $('#main').append($(data).filter('.product-links-list'));

        $('.w-product-links-trigger').enhanceToggle({ silent: true, closeOnClickOutside: true});
        $('.w-product-links').productLinks({ pid: 'some id', selectorURL: "some url" });
      });
  } catch(e) {}    
};

(function($) {

  $.plugin('productSelector', function() {

    var _self = this,
        $window = $(window),
        options,
        needle,
        $section,
        $filters = $('.filters'),
        $loadMore = $('.load-support'),
        phoneListToggle = 'a.view-all-phones.toggle',
        $phoneListWrapper = $('.phone-list-wrapper'),
        trackSearch = true;

    // Define options and their defaults
    this.options = {
      phoneListUrl: '//' + window.location.host + window.location.pathname + '?action=accessorysearch&showproducts=true',
      debounceTime: 500,
      itemsPerLoad: I18n.get('product_selector', 'itemsperload')
    };

    var buildSearch = function () {
      $section.find('.search').show().css('opacity', '1');

      // custom tracking
      if (window.isTrackingAvailable) {
        $('div.search input').on("focus", function(){
          if (trackSearch) {
            utag.link({ link_id:window.location, link_text: nkT.pName + ":search product", linkEvent: nkT.pName + ":search product" });
            trackSearch = false;
          }
        });
      }
    };

    // Load in the phone list and append the phone list only (basically we reload the same page via AJAX and append a fragment)
    // Clone the phone list without an id as the haystack in the quick search results
    var buildPhoneList = function() {
      if ($phoneListWrapper.size() === 0) {
        $(".product-selector .content-wrapper").append("<div class='phone-list-wrapper'></div>");
        $phoneListWrapper = $('.phone-list-wrapper');
      }

      if (options.dynamic & $section.hasClass('product-list-open')) {
        $phoneListWrapper.find('.adaptive-exclude').removeClass('adaptive-exclude').show();
      } else {
        if ($section.hasClass('product-list-open')){
          var $pwrapper = $section.find('.phone-list-wrapper');
          $pwrapper.find('li').filter(':visible').find('.adaptive-exclude').removeClass('adaptive-exclude');
          $pwrapper.show();
        }
      }
      PubSub.publish('image.added');
    };

    var openPhoneList = function(event) {
      $element = $(this);
      if(!$section.hasClass('product-list-open')) {
        var height = $phoneListWrapper.outerHeight();
        $phoneListWrapper.css({ 'height': '0', 'display': 'block' }).stop().animate({ 'height': height }, 250, 'easeInOutQuart', function () {
          $phoneListWrapper.css({ 'height': 'auto' });
        });
        $element.addClass('open');
        $section.addClass('product-list-open');
        $('.results-wrapper').hide();
        $phoneListWrapper.find('.adaptive-exclude').removeClass('adaptive-exclude').show();
        PubSub.publish('image.added');
      } else {
        return;
      }
      event.preventDefault();
    };

    var togglePhoneList = function(event) {
      $element = $(this);
      if(!$section.hasClass('product-list-open')) {
        var height = $phoneListWrapper.outerHeight();
        $phoneListWrapper.css({ 'height': '0', 'display': 'block' }).stop().animate({ 'height': height }, 250, 'easeInOutQuart', function () {
          $phoneListWrapper.css({ 'height': 'auto' });
        });
        $element.addClass('open');
        $section.addClass('product-list-open');
        $phoneListWrapper.find('.adaptive-exclude').removeClass('adaptive-exclude').show();
        PubSub.publish('image.added');
      } else {
        $phoneListWrapper.animate({ 'height': '0' }, 250, 'easeInOutQuart', function () {
          $phoneListWrapper.css({ 'height': 'auto', 'display': 'none' });
          $element.removeClass('open');
          $section.removeClass('product-list-open');
        });
      }
      event.preventDefault();
    };

    // Reset the quick search field
    var blurSearch = function(event) {
      $section.find('input[type="text"]').val('').blur();
      // TODO: chain these
      $('.results-wrapper').find('li').hide();
      $('.results-wrapper').find('.notification').hide();
      $('.results-wrapper').hide();
      //$(options.resultsWrapper).hide();
      if($section.hasClass('product-list-open')) {
        if (options.dynamic) {
          $phoneListWrapper.find('li').show();
        } else {
          $phoneListWrapper.find('li[data-type='+$section.find('a.checked[category]').attr('category')+']').hide().slice(0,options.itemsPerLoad).show();
        }
      }

    };

    var escapeHTML = function(s) {
      return s.split('&').join('&amp;').split('<').join('&lt;').split('"').join('&quot;');
    };

    // Quick search the phone lists – hide results from the big list or filter results from the search field list
    var quickSearch = function(event) {
      $element = $(this);
      var newNeedle = $element.val();
      if ($element.attr('placeholder') == newNeedle) {
        newNeedle = "";
      }
      newNeedle = $.trim(newNeedle.toLowerCase());
      if (newNeedle == needle) {
        return;
      }
      needle = newNeedle;
      var $quickResultsWrapper = $('.results-wrapper'),
        $allPhones = $phoneListWrapper.find('.view-all-phones-list'),
        $notification = $phoneListWrapper.find('.notification'),
        $items = $phoneListWrapper.find('li'),
        needles = needle.split(' '),
        value = $section.find('a.checked[category]').attr('category'),
        padding = (options.dynamic) ? {} : { 'padding-bottom': '0.75em' }; // rly?

      if (needle.length > 0 && event.keyCode !== 27) {
        // Perform the search. Two options: filter the phone list or do a quick search.
        // Filter the phone list: Check if the product list is open and filter
        var $selector = (options.dynamic) ? $items : $items.filter('[data-type='+value+']'),
          foundSome = false;
        $selector.show().each(function(){
          // if item doesnt match search term, hide it. otherwise load its image
          var modelName = $(this).attr('data-model-name').toString().toLowerCase(),
            found = true;
          for (var i = 0; i < needles.length; i++) {
            found &= modelName.indexOf(needles[i]) >= 0;
          }
          if (found) {
            $(this).find('.adaptive-exclude').removeClass('adaptive-exclude');
            foundSome = true;
          } else {
            $(this).hide();
          }
        });

        $section.css(padding);
        $loadMore.hide();

        if (foundSome) {
          PubSub.publish('image.added');
          $allPhones.show();
          $notification.hide();
        } else {
          $allPhones.hide();
          $notification.find('em').html(escapeHTML(needle));
          $notification.show();
        }
      // 0 characters in the needle
      } else if (needle.length < 1) {
        if (options.dynamic) {
          $items.show();
          $section.css({ 'padding-bottom': '0' });
          $loadMore.show();
        } else {
          $items.filter('[data-type='+value+']').hide().slice(0,options.itemsPerLoad).show();
          if (options.itemsPerLoad < $items.filter('[data-type='+value+']').length) {
            $section.css({ 'padding-bottom': '0' });
            $loadMore.show();
          }
        }
        $allPhones.show();
        $notification.hide();
        
        
      // User hit ESC
      } else if(event.keyCode === 27) {
        $allPhones.show();
        $notification.hide();
        if (options.dynamic) {
          $section.css({ 'padding-bottom': '0' });
          $loadMore.show();  
        } else if (options.itemsPerLoad < $items.filter('[data-type='+value+']').length) {
          $section.css({ 'padding-bottom': '0' });
          $loadMore.show();
        }
        
        blurSearch();
      }
    };

    // change between two (or more) lists
    var radioSwitch = function(event) {
      var value = $(this).attr('category'),
        $items = $phoneListWrapper.find('li');

        event.preventDefault();

      $('.product-selector a[category]').removeClass("checked");
      $('.product-selector a[category]').children('.enh-radio-selected').removeClass("enh-radio-selected");
      $(this).addClass('checked');
      $(this).children('.enh-radio-wrapper').addClass('enh-radio-selected');

      // reset the search when switching categories
      if (options.dynamic) {
        $items.show();
      } else {
        $items.filter('[data-type='+value+']').hide().slice(0, options.itemsPerLoad).show();
      }
      $phoneListWrapper.find('.view-all-phones-list').show();
      $phoneListWrapper.find('.notification').hide();
      $section.css({ 'padding-bottom': '0' });
      $loadMore.show();
      blurSearch();
      
      $items.hide().filter('[data-type='+value+']').slice(0, options.itemsPerLoad).show().find('img').removeClass('adaptive-exclude');
      PubSub.publish('image.added');
      if ($items.filter(':hidden[data-type='+value+']').length > 0) {
        $section.css({ 'padding-bottom': '0' });
        $loadMore.show();
      }

      if ($items.filter('[data-type='+value+']').length > options.itemsPerLoad) {
        $loadMore.show();
        $section.css({ 'padding-bottom': '0' });
      } else {
        $loadMore.hide();
        $section.css({ 'padding-bottom': '0.75em' });
      }

      if (window.isTrackingAvailable) {
        utag.link({ link_id:window.location, link_text: nkT.pName + ":" + value + " filter", linkEvent: nkT.pName + ":" + value + " filter" });
      }
    };

    var buildBinds = function() {
      // Quick searching the cloned phone list
      var lazyQuickSearch = $.debounce(quickSearch, options.debounceTime);
      $section.on('keyup focusin', 'input[type="text"]', lazyQuickSearch);
      // Phone list toggle click
      $section.on('click', phoneListToggle, togglePhoneList);
      // Open view all phones with search field focus
      $section.on('focus', 'input[type="text"]', openPhoneList);
      // Radio button switch
      $section.find('.radios a').on('click', radioSwitch);
      // disable form submit in all cases
      $section.find('form').attr('onSubmit', 'return false;');
    };

    this.init = function($el) {
      options = this.options;
      $section = $el;
      buildSearch();
      buildPhoneList();
      buildBinds();
    };

    this.destroy = function($el) {
      // Unbinds
    };

  });

})(jQuery);
(function($) {
  "use strict";
  $.plugin('rating_block', function() {
    var options,
        $componentRoot,
        $inputMaxChars,
        $yesButton,
        $noButton,
        $minInputWidth,
        $breakpoint,
        $starsHitArea,
        $starsAmount,
        $starRating,
        $starsYOffset,
        $alreadyRated,
        $isRTL,
        $contentArea,
        $title,
        $cookieValues,
        $maxCookieValues,
        ratingPrefix,
        placeholderSupported;

    this.options = {
      title: I18n.get('rating_block', 'title'), // Title shown in the rating block
      useStars: false,                 // render component using either yes/no dialogue or stars
      showNoRatingCount: false,        // show amount of no-votes
      cookieName: 'topicRatingCookie', // cookie name
      callback: 'NA',                  // callback function for utag tracking library function
      ratingCountUrl: '/ajax/get_page_rating_count.html', // url for fetching existing ratings
      submitOptionUrl: '',             // url for sending rating via GET
      submitTextUrl: '',               // url for sending rating via POST
      locale: '', 
      itemId: '',                   // topic ID
      masterId: 'NA'
    };

    this.init = function(el) {
      options = this.options;
      $componentRoot = el;
      $inputMaxChars = 200;
      $minInputWidth = 250;
      $breakpoint = 240;
      $cookieValues = [];
      $maxCookieValues = 25;
      $isRTL = $('body').hasClass('rtl');
      $starsHitArea = 20;
      $starsYOffset = 22;
      $starsAmount = 5;
      $starRating = 0;
      $alreadyRated = false,
      ratingPrefix = 'rating';

      // Placeholder attribute is not supported in browsers below IE10
      placeholderSupported = !(BrowserDetect.browser == 'Explorer' && BrowserDetect.version <= 9);

      initCookie();
      initLayout();
      bindEvents();
    };
        
    var initCookie = function() {
      $cookieValues = $.cookies.get(options.cookieName);
      if ($cookieValues === null) {
        $cookieValues = [];
        $.cookies.set(options.cookieName, $cookieValues);
      }

      for (var i = 0; i < $cookieValues.length; i++) {
        if ($cookieValues[i] === options.itemId) {
          $alreadyRated = true;
          break;
        }
      }
    };
    
    // Updates topic cookie appending topic ID to the queue of 25 elements.
    // Older elements get deleted if queue overflows.
    var updateCookie = function() {   
      if (options.itemId !== 'NA' && options.itemId !== "") {
        // refresh cookieValues variable from actial cookie because multiple widgets can be on same page
        initCookie();
        
        // remove first element if table overflows
        if ($cookieValues.length === $maxCookieValues) {
          $cookieValues.shift();  
        }

        // append new element to table
        $cookieValues.push(options.itemId);
        
        // generate new cookie data and update browser cookie
        $.cookies.set(options.cookieName, $cookieValues, {
          expires: 30
        });
      }
    };

    // Create rating block component layout and initialize yes/no buttons or stars
    var initLayout = function() {
      //$componentRoot.html($('<div>', {class: 'rating-block-wrapper'}));
      $componentRoot.html('<div class="rating-block-wrapper"><div class="rating-block-content"><h4 class="title">' + options.title + '</h4></div></div>');
      $contentArea = $componentRoot.find(".rating-block-content");
      $title = $componentRoot.find('.title');

      // Check from the cookie whether an item has been already rated
      if ($alreadyRated) {
        showThankYou();
      } else {
        setRatingBlockTitle(options.title);

        if (options.useStars) {
          initializeStars();
        } else {
          intializeYesNoButtons();
        }
      }
    };
    
    var initializeStars = function() {
      $contentArea.append('<div class="rating-block-stars"></div>');
      var starsContainer = $componentRoot.find('.rating-block-stars');
      
      // inject stars and init hit area
      for (var $i = 1; $i <= $starsAmount; $i++) {
        starsContainer.append("<div id='"+$i+"-star-"+options.itemId+"' class='star'></div>");
      }
      
      $componentRoot.find('.star').css("height", $starsHitArea);
      $componentRoot.find('.star').css("width", $starsHitArea);
      $contentArea.show('fast');
    };

    var intializeYesNoButtons = function() {
      /*jshint multistr: true */
      var markup = '\
        <div class="rating-block-buttons">\
          <div class="button button-yes">' + I18n.get('rating_block', 'button_yes') + '</div>\
          <div class="button button-no">' + I18n.get('rating_block', 'button_no') + '</div>\
        </div>';

      $contentArea.append(markup);
      $yesButton = $componentRoot.find('.button-yes');
      $noButton = $componentRoot.find('.button-no');
      $contentArea.fadeIn('fast');
      equalizeButtons();
      showRatingCount();
    };

    // Set default title if there is no title defined in page related yml
    var setRatingBlockTitle = function(title) {
      $title.text(title);
    };
    
    /*
    * Make yes-no buttons the same size
    */
    var equalizeButtons = function() {
      var maxWidth = Math.ceil(Math.max($yesButton.width(), $noButton.width()));
      $yesButton.width(maxWidth);
      $noButton.width(maxWidth);
    };

    /*
    * Show error message if user hasn't filled the other reason textarea
    */
    var showFieldError = function(show) {
      var fieldErrorElName = '.field-error';

      if(!$componentRoot.find(fieldErrorElName).length) {
        $componentRoot.find(".input-wrapper").prepend('<div class="field-error">'+I18n.get('rating_block', 'empty_field_message')+'</div>');
      }

      $componentRoot.find(fieldErrorElName).toggle(show);
    };
    
    /*
    * Handler for yes/no buttons
    */
    var ratePage = function(event) {
      if ($(event.target).hasClass('button-yes')) {
        // User pressed 'yes', show thank you
        hideRatingArea(function() {
          sendRating({metric: 1, option: 0}, showThankYou, true);
          sendTrackingData(ratingPrefix + ' yes');
        });
      } else {
        // User pressed 'no', show a list of reasons
        hideRatingArea(function() {
          sendRating({metric: 1, option: 1}, showWhyNo);
          sendTrackingData(ratingPrefix + ' no');
        });
      }
    };

    /*
    * Handler for no reason options
    */
    var specifyWhyNo = function(event) {
      var self = $(event.target),
          optionId = self.attr("href").split('#')[1];

      if (self.parents('.reason').is(':last-child')) {
        // Select option is 'other', show the form for other reason
        hideRatingArea(function() {
          sendRating({metric: 2, option: optionId}, showCommentForm);
          sendTrackingData(ratingPrefix + ' ' + optionId);
        });
      } else {
        // Send the rating and show thank you
        hideRatingArea(function() {
          sendRating({metric: 2, option: optionId}, showThankYou, true);
          sendTrackingData(ratingPrefix + ' ' + optionId);
        });
      }

      return false;
    };

    /*
    * Send other reason when submit or enter key is pressed 
    */
    var submitOtherText = function(e) {
      if(!placeholderSupported) {
        // Trigger submit event for placeholder enhancePlaceholder
        $componentRoot.find(".submit-form").trigger("submit");
      }
        
      var otherReason = $componentRoot.find(".text-field").val();

      // Other reason textarea is not empty
      if(otherReason.length > 0) {
        showFieldError(false);
        // Send the rating and show thank you
        hideRatingArea(function() {
          sendRating({metric: 3, option_text: otherReason}, showThankYou, true);
          sendTrackingData('free text');
        });
      } else {
        showFieldError(true);
      }

      e.preventDefault();
    };

    var bindEvents = function() {
      // buttons
      $componentRoot.on("click", ".button-yes, .button-no", ratePage);
      $componentRoot.on("click", ".reasons", specifyWhyNo);
      $componentRoot.on("click", ".button-send", submitOtherText);

      // stars
      $componentRoot.find(".star").bind({
        mouseup: function() {
          // unbind events after click
          $(this).parent().children().unbind('mouseenter').unbind('mouseleave').unbind('click');
          $(this).parent().css('cursor', 'default');
          
          switchToGreyedOut($(this));  
          var starValue = $(this).attr("id").charAt(0);
         
          sendTrackingData(starValue); 
          updateCookie();             
          showThankYou();
        },
        mouseenter: function() {
          var starNumber = parseInt($(this).attr("id").charAt(0), 10);
          var starDisplacement = 0;
          if ($isRTL) {
            starDisplacement = -starNumber*$starsHitArea;
          } else {
            starDisplacement = starNumber*$starsHitArea - 100;
          }
           
          if ($.browser && $.browser.msie && false) {
            // might need something IE8 specific here
          } else {
            $(this).parent().css("background-position", starDisplacement + "px -"+$starsYOffset+"px");
          }  
        },
        mouseleave: function() {
          if ($isRTL) {
            $(this).parent().css("background-position", "0 -"+$starsHitArea+"px");
          } else {
            $(this).parent().css("background-position", -$starsAmount*$starsHitArea + "px -"+$starsYOffset+"px");
          }
        }    
      });
    };
    
    var switchToGreyedOut = function($star) {
      var bgpos = $star.parent().css('background-position'); 
      var xpos = 0;
      // we need an IE8 hack to get bg-position
      if (!bgpos) {
        xpos = $star.parent().css('background-position-x');
        $star.parent().css("background-position-x", xpos); 
        $star.parent().css("background-position-y", "-2px");
      } else {
        xpos = bgpos.split(" ")[0];
        $star.parent().css("background-position", xpos+" -2px");
      }
    };
    
    var hideRatingArea = function(callback) {
      $contentArea.fadeOut('fast', function() {
        $componentRoot.find(".reasons, .rating-block-buttons, .rating-block-votes-count, .input-wrapper, .stars-rating").remove();
       
        if ($.isFunction(callback)) {
          callback($(this));
        }
      });
    };

    var showThankYou = function() {
      setRatingBlockTitle(I18n.get('rating_block', 'thank_you'));
      $contentArea.fadeIn('fast');
    };

    var showFailedMessage = function() {
      setRatingBlockTitle(I18n.get('rating_block', 'failed_message'));
      $contentArea.fadeIn('fast');
    };

    var showWhyNo = function() {
      var list = "";
      setRatingBlockTitle(I18n.get('rating_block', 'why_no'));
      $contentArea.fadeIn('fast');

      // Build a list of why no reasons
      $.each(I18n.get('rating_block', 'why_no_reasons'), function(id, reason) {
        list += '<li class="reason"><div class="reason-wrapper"><a href="#'+reason.id+'">'+reason.title+'</a></div></li>';
      });

      $contentArea.append('<ul class="reasons">'+list+'</ul>');
    };

    var showCommentForm = function() {
      /*jshint multistr: true */
      var markup = '\
        <form class="submit-form">\
        <div class="input-wrapper">\
        <textarea class="text-field enh-placeholder" name="feedback-field" maxlength="' + $inputMaxChars + '" placeholder="' + I18n.get('rating_block', 'other_reason_placeholder') + '"></textarea>\
        </div>\
        <div class="rating-block-buttons">\
        <div class="button button-send">' + I18n.get('rating_block', 'button_send') + '</div>\
        </div>\
        </form>\
        ';   

      setRatingBlockTitle(I18n.get('rating_block', 'why_other'));

      $contentArea.append(markup).fadeIn('fast');
      
      if(!placeholderSupported) {
        $contentArea.find('.enh-placeholder').enhancePlaceholder();
        // Prevent form submission
        $contentArea.find(".submit-form").submit(function(e) {
          e.preventDefault();
        });
      }
    };

    /* 
    * Fetch data on how many have already rated the item
    */
    var showRatingCount = function() {
      var output,average = "";
      var metaratings;//averagevalue,,total;

      if(options.ratingCountUrl.length > 0) {
        $.getJSON(options.ratingCountUrl+'?id='+options.itemId+'&locale='+options.locale, function(data) {
          if(typeof(data.yes) !== 'undefined' && data.yes > 0) {
            if(options.showNoRatingCount && data.no > 0) {
              output = I18n.get('rating_block', 'yes_no_rating_count_label').replace('{0}', data.yes).replace('{1}', data.no);
              //total = data.yes+data.no;
              //averagevalue = Math.round((((data.yes*5)+(data.no*1))/total)*10)/10;
              //average  = I18n.get('rating_block', 'average_count_label').replace('{0}', I18n.get('rating_block', 'average_rating')).replace('{1}', I18n.get('rating_block', 'best_rating'));
            } else {
              output = I18n.get('rating_block', 'count_label').replace('{0}', data.yes);
            }
            
            metaratings = '<meta itemprop="ratingValue" content="'+I18n.get('rating_block', 'average_rating')+'"/><meta itemprop="bestRating" content="'+I18n.get('rating_block', 'best_rating')+'"/><meta itemprop="ratingCount" content="'+I18n.get('rating_block', 'rating_count')+'"/>';
            output = '<div class="rating-block-votes-count" itemrprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">'+output+metaratings+'</div>';
            $contentArea.append(output);
            
          }
        });
      }
    };
    
    /*
    * Send rating data when user performs the rating and set a cookie to save the rated item
    */
    var sendRating = function(data, callback, setCookie) {
      var requestType = '',
          requestUrl = '';

      if(typeof(data.option_text) !== 'undefined') {
        // Use POST request and other url when sending freeform answers
        requestType = "POST";
        requestUrl = options.submitTextUrl;
      } else {
        requestType = "GET";
        requestUrl = options.submitOptionUrl;
      }

      if(requestUrl.length > 0 && requestType.length > 0) {
        // Append additional parameters to the data to be sent
        data.local_id = options.itemId;
        data.master_id = options.masterId;
        data.locale = options.locale;

        $.ajax({
          url: requestUrl, 
          data: data,
          type: requestType, 
          dataType: "html"
        })
        .done(function() {
          if (typeof setCookie !== 'undefined' && setCookie) {
            updateCookie();
          }

          if ($.isFunction(callback)) {
            callback($(this));
          }
        })
        .fail(function() {
          showFailedMessage();
        });
      }
    };

    /*
    * Send tracking data
    */
    var sendTrackingData = function(ratingValue) {
      if (window.isTrackingAvailable && options.callback && options.callback !== 'NA' && typeof(ratingValue) !== 'undefined') {
        options.callback(options.itemId, ratingValue);
      } 
    };

    this.destroy = function($el) {
    
    };
	});
})(jQuery);
(function($) {

  $.plugin('searchSuggestions', function() {

    var _self = this,
        $el,
        $markup = "<div class='search-suggestions'><ul></ul></div>",
        $searchSuggestionsAvailable = false,
        $minCharacters = 0,
        $maxResultsCount = 0,
        $searchSuggestions = [],
        $selectedIndex = -1,
        $originalSearchText = ""


    function bindEvents() {
      
      $el.keydown(function(event) {
        //console.log("keyup");
        
        
        if ($(this).val().length >= $minCharacters) {
          
          // highlight first item if arrow up/down
          if (event.keyCode === 40) {
            // down
            if (($selectedIndex > -1) && ($selectedIndex + 1 < $(".search-suggestions li").length)) {
              $(".search-suggestions li:eq("+$selectedIndex+")").removeClass("selected");
            }
            if ($selectedIndex + 1 < $(".search-suggestions li").length) {
              $selectedIndex++;
              $(".search-suggestions li:eq("+$selectedIndex+")").addClass("selected");
            }
            // set also the input field text to match selection
            if ($selectedIndex > -1) {
              var selectedText = $(".search-suggestions li:eq("+$selectedIndex+")").text();
              $el.val(selectedText);
            } else {
              $el.val($originalSearchText);
            }
          } else if (event.keyCode === 38) {
            // up
            if ($selectedIndex > -1) {
              $(".search-suggestions li:eq("+$selectedIndex+")").removeClass("selected");
              $selectedIndex--;
              if ($selectedIndex > -1) {
                $(".search-suggestions li:eq("+$selectedIndex+")").addClass("selected");
              }
            }
            // set also the input field text to match selection
            if ($selectedIndex > -1) {
              var selectedText = $(".search-suggestions li:eq("+$selectedIndex+")").text();
              $el.val(selectedText);
            } else {
              $el.val($originalSearchText);
            }
          } else if (event.keyCode === 13) {
            // enter
            $el.parent().prepend("<input type='hidden' name='recommended' value='true'>");
            $(".w-contextual-search").find('form').submit();
          } else if (refreshSuggestionList()) {
            $selectedIndex = -1;
            $originalSearchText = $el.val();
            $(".search-suggestions").show();
          }
        } else {
          $selectedIndex = -1;
          $(".search-suggestions").hide();
        }
      });
      
      // hide suggestions if clicked anywhere
      $("body").mouseup(function(event) {
        $selectedIndex = -1;
        $(".search-suggestions").hide();
      });
    }
    
    
    function refreshSuggestionList() {
      // clear everything first
      $(".search-suggestions li").remove();
      // populate list with matched items
      var listItems = "";
      for (var i = 0; i < $searchSuggestions.length; i++) {
        // just test the substring and match all occurances
        if ($searchSuggestions[i].search(new RegExp($el.val(), "i")) >= 0) {
          // print the list items with suggestions
          listItems += "<li>"+$searchSuggestions[i]+"</li>";
        }
      }
      // insert matched elements on screen
      $(".search-suggestions ul").append(listItems);
      
      // bind action for each li that fills the input field with selection and submits the form
      $(".search-suggestions ul li").mouseup(function() {
        $el.val($(this).text());
        $(".search-suggestions").hide();
        // inject hidden input field for recommended=true attribute because the in JSP the form has no action attribute
        $el.parent().prepend("<input type='hidden' name='recommended' value='true'>");
        // submit
        $el.parent().submit();
      });
      
      if (listItems.length > 0) {
        return true;
      } else {
        return false;
      }
    }
    
    
    function loadSearchSuggestionsData() {
      if (I18n.site_search_suggestions) {
        try {
          $minCharacters = I18n.site_search_suggestions.min_characters;
          $maxResultsCount = I18n.site_search_suggestions.max_count;
          $searchSuggestions = I18n.site_search_suggestions.suggestions;
          $searchSuggestionsAvailable = true;
        } catch (exception) {};
      }
    }

    this.init = function(el) {
      
      $el = $(el);
      
      loadSearchSuggestionsData();
      
      if ($searchSuggestionsAvailable) {
        // insert the skeleton
        $el.after($markup);
        // bind key-event
        bindEvents();
        // kun valitaan suggestion -> page reload -> &recommended=true
      }
    };
  
    this.destroy = function($el) {
    };

 
  });
})(jQuery);
(function($) {

  $.plugin('simpleSlide', function() {

    var options = {
        triggerNext: '.next', 
        triggerPrev: '.prev', 
        slides: '.slide', 
        animation: 'slideRight',
        allowLoop: true,
        speed: 500, 
        autoPlay: false,
        autoPlayDelay: 7000, 
        minAnimatedResolution: 640 // same as tablet-lite
        // speed: 'slow', 
        // transition_class_prefix: 'transition-ease-'
      },
      $el,  
      _this, 
      $container, 
      $slides, 
      $slides_container, 
      $nextTrigger,
      $prevTrigger, 
      $animationInterval,
      $current_slide,
      $window = $(window),
      is = BrowserDetect,
      isLegacyIE = (BrowserDetect.browser == 'Explorer' && BrowserDetect.version <= 8),
      supportedIE = (is.browser === 'Explorer' && is.version > 7),
      supportedBrowser = $.inArray(is.browser, ['Chrome', 'Safari', 'Firefox', 'Mozilla']) > -1,
      supportedOS = $.inArray(is.OS, ['Mac', 'Windows']) > -1,
      videoEventsSupported = (supportedBrowser && supportedOS) || supportedIE,
      slideAnimationProperty = (function() { return property = $('body').is('.rtl') ? 'right' : 'left'; })(),
      videoIsPlaying;
    
    this.slideRight = function(e) {
      slideElements(slideAnimationProperty, 'width', !isInverse(e));
    };

    this.slideLeft = function(e) {
      slideElements(slideAnimationProperty, 'width', isInverse(e));
    };


    /*
    * Handles control button classes. 
    * 1. if looping is enabled, it just returns. 
    * 2. if looping is disabled, it up updates controls classes depending on which state slides are. 
    */
    var updateControls = function() {     
      if($slides.size() === 1) {
        
        $prevTrigger.hide();
        $nextTrigger.hide();

      } else if(!options.allowLoop) {
      // if looping is enabled, do your tricks
        // if first slide is visible, disable 'prev' control
        (($slides.index($current_slide) === 0) ? $.fn.addClass : $.fn.removeClass)
          .apply($prevTrigger, ['disabled']);
        
        // if last slide is visible, disable 'next' control
        (($slides.index($current_slide) === $slides.length - 1) ? $.fn.addClass : $.fn.removeClass)
          .apply($nextTrigger, ['disabled']);
      } 

   };

    var isInverse = function(e) {
      return e && e.target && $(e.target).is('.prev');
    };
    /*
    * Default animation function that handles currenty all animation direction
    * @direction tells which css value should be changed
    * @window_measure difines which orientation of window should be measired
    */
    var slideElements = function(direction, window_measure, inverse) {
      var current_from  = {'opacity':1}, 
          current_to    = {'opacity':0}, 
          next_from     = {'opacity':0},
          window_measure;
    
      var next_slide = getNextSlide(!inverse); 
      window_measure  = $current_slide[window_measure]();

      // have to set map values like this. 
      // {variable_left: 0} sets map key as variable_left, not as content value of variable_left,
      if(!inverse) {
      
        current_from[direction] = 0;
        current_to[direction]   = parseInt(window_measure * 0.7);
        next_from[direction]    = window_measure * -1;

      } else {
        current_from[direction] = 0;
        current_to[direction]   = parseInt(window_measure * 0.7 * -1);
        next_from[direction]    = window_measure;
     }
   
      // if animation is enabled for current screen size
      if(options.minAnimatedResolution && $(window).width() >= options.minAnimatedResolution && !isLegacyIE) {
        // animate old slide
        $slides_container.height($current_slide.outerHeight());
        $current_slide.css(current_from).animate(current_to, {speed: options.speed,
          complete: function() {
            $current_slide.hide();
          }}
        );

        // add little delay so next slide wont go top of old one
        setTimeout(function() {
          // animate new slide

          // $slides_container.height('auto');
          next_slide.css(next_from).show().animate(current_from, {speed: options.speed,
            complete: function() {
              $current_slide = next_slide;
              $slides_container.height($current_slide.outerHeight());
              updateControls();
            }}
          );
        }, options.speed * 1);
      } else { // just change next slide 

        $current_slide.css(current_from).hide();
        next_slide.css(current_from).show();
        $current_slide = next_slide;
        updateControls();
      
      }
    };



    var getNextSlide = function(inverse){
      var ret
      if (options.allowLoop) {
        ret = inverse ?
          ( $current_slide.prev()[0] || $slides.last()[0]  ) : 
          ( $current_slide.next()[0] || $slides.first()[0] )
      } else {
        ret = inverse ? 
          ( $current_slide.prev()[0] || $slides.first()[0] ) : 
          ( $current_slide.next()[0] || $slides.last()[0]  )
      }
    
      return $(ret);
    };


    // set default values for elements
    var setElementDefaults = function() {
      // set current slide as first one on startup
      // or if slides have changed and current slide is detached from tree
      if(!$current_slide || !$current_slide.parent()[0]) {
        $current_slide = $slides.first();
        $slides.hide();
        $slides.first().show();
      } 
      $nextTrigger.show();
      $prevTrigger.show();
      
      // set all slides as same height as first visible one
      $slides.width($slides.filter(':visible').first().width('100%').width());
  
      if(!videoIsPlaying) {
        $slides_container.height('auto');
      }
      
      updateControls();
    };

    var collectElements = function(el) {
      $container        = $(el);
      $slides           = $container.find(options.slides);
      $slides_container = $slides.parent(); 
      $nextTrigger      = $container.find(options.triggerNext);
      $prevTrigger      = $container.find(options.triggerPrev);
    };
 

    var handleVideoStart = function() {
      videoIsPlaying = true;
      $slides_container.height('auto');
    };
      
    var handleVideoStop = function() {
      videoIsPlaying = false;
      $slides_container.height('auto');
    };



    // resets 
    var resetInterval = function() {
   
      clearInterval($animationInterval);
      $animationInterval = setInterval(function() {
        triggersSlide();
      }, options.autoPlayDelay);
    };


    var triggersSlide = function(e) {
      
      if($(e.target).is('.disabled')) {
        return;
      }
      // if current element is visible. Just ensure that other scripts won't interfere this one.  
      if($current_slide.is(':visible')) {
        // triggers animation
        _this[options.animation](e);
      }
      // if triggers comes from event, stop propagagation
      if(e) {
        e.stopPropagation();
      }
    }

    var bindEvents = function() {
      $nextTrigger.on('click.' + this.namespace, triggersSlide);
      $prevTrigger.on('click.' + this.namespace, triggersSlide);

      // On mobile devices video events are not always available and cannot be relied on
      if (videoEventsSupported) {
        $el.on('videostart.' + this.namespace, handleVideoStart);
        $el.on('videostop.' + this.namespace, handleVideoStop);
      } else {
        $el.on('videoinitialized.' + this.namespace, handleVideoStart);
        $el.on('playerdestroyed.' + this.namespace, handleVideoStop);
      }

      if(options.autoPlay) {
        $nextTrigger.on('click.' + this.namespace, resetInterval);
        resetInterval();
      }
      
      $(window).on('resize.' + this.namespace, $.debounce(setElementDefaults, 150));
      $slides_container.find('img').on('load.' + this.namespace , $.debounce(setElementDefaults, 150));

      $el.on('contentReload.' + this.namespace, function(){
        initView();
      });
    };

    var initView = function() { 
      collectElements($el);
      setElementDefaults();
    };

    this.init = function(el) {
      $el = el;
      _this = this;
      // combine options
      $.extend(options, this.options);
      initView();
      bindEvents();
    };

    this.destroy = function() {
   
      // unbind events 
      $nextTrigger.off('click.' + this.namespace);
      $prevTrigger.off('click.' + this.namespace);
      $el.on('videostart.' + this.namespace);
      $el.on('videostop.' + this.namespace);
      $el.off('contentReload.' + this.namespace);
      $slides_container.find('img').off('load.' + this.namespace);
      $(window).off('resize.' + this.namespace);
    };
    
  });
})(jQuery);
// NOTE: This is just for proto testing. Real survey is under /tag-container
(function($) {

  $.plugin('sitewideSurveyTest', function() {

    var $window = $(window), options, $section, $surveyType, $surveyPopup, $surveyAccepted = false, $surveyTimerTimestamp = null, $surveyTimerElapsed = false;
    var $surveyEnabled, $surveyType, $expiresInDays, $settingsMaxPageVisits, $surveyTimeout, $surveySitewide, $surveyPriorityClass, $surveyType, $campaignID, $popupImageURL;
    var $surveyBreakpoint = 640;               // same as tablet-lite breakpoint limit in the css
    var $cookieTime, $cookiePageVisits;
    var $surveyDoneCookie = "S_SURVEY_DONE";     // sets the time when survey was taken
    var $pageVisitsCookie = "S_PAGE_VISIT";      // sets the number of page visits
    var $surveyTimerCookie = "S_TIMER";          // cookie that keeps track wether survey timer has started or not and if the survey has been accepted or not
    var $overrideCookie = "S_SURVEY_OVERRIDE";   // cookie that has settings that can override CMS settings
    
    // get the needed cookies
    var surveyCookies = {
      done: $surveyDoneCookie,
      pageVisits: $pageVisitsCookie
    };

    this.options = {
    };
    
    this.init = function($el) {
      $section = $el;
      options = this.options;

      // load all cms settings and cookies
      loadSurveyCookieAndSettingsData();
      
      // override none, some or all settings made above 
      loadOverrideCookie();
      
      // set color 
      setSurveyColor();
        
      // survey needs to be enabled AND expireCookie needs to be true AND page visits count must be exceeded
      // AND cookie policy banner must not be shown 
      if ($surveyEnabled) {
        // stupid width alignment gimmick for the email field (because of needed form validation markup structure)
        $window.on('resize.' + this.namespace, $.debounce(emailFieldWidthDebounce, 100));
        
        if ($surveyType === "timer") {
          if (testSurveyExpiresCookie() && !$("#cookie-notification").is(":visible") || true) {
            
            // set the timer if its not already on
            if (!$surveyTimerElapsed) {
              if ($surveyTimerTimestamp === null) {
                $surveyTimerTimestamp = new Date().getTime();
                //console.log("start timestamp: "+$surveyTimerTimestamp);
                $.cookies.set($surveyTimerCookie, {timerTimestamp: $surveyTimerTimestamp, timerElapsed: $surveyTimerElapsed}, getCookieOptions());
                // display banner when time is elapsed on the same page
                triggerTimedBanner($surveyTimeout);
              } else if (($surveyTimerTimestamp + $surveyTimeout*1000) < new Date().getTime()) {
                // reloading page or landing to a new page
                $surveyTimerElapsed = true;
              } else {
                // reloading page or landing to a new page
                var timeDiffSeconds = (($surveyTimerTimestamp + $surveyTimeout*1000) - new Date().getTime()) / 1000;
                triggerTimedBanner(timeDiffSeconds);
              }
            }
            
            // display banner on any new pages after time has elapsed
            if ($surveyTimerElapsed) {
              prepareAndDisplayBanner();
            }
          }
        } else if (testSurveyExpiresCookie() && testAndSetSurveyPageVisitsCookie() && !$("#cookie-notification").is(":visible") || true) {     
          /* display survey banner  */
          prepareAndDisplayBanner();
        }
      }
    };
    
    
    // set email field width properly to "100%"
    function emailFieldWidthDebounce() {
      try {
        if ($(window).width() < $surveyBreakpoint) {
          var paddingWidth = ($("#sitewide-survey input.email").outerWidth() - $("#sitewide-survey input.email").width());
          var newWidth = $("#sitewide-survey .buttons").width() - $("#sitewide-survey input.submit").outerWidth() - paddingWidth;
          //console.log("window width: "+$(window).width()+", 1: "+$("#sitewide-survey .buttons").width()+", 2: "+$("#sitewide-survey input.submit").outerWidth()+", 3: "+paddingWidth+", newWidth: "+newWidth);
          $("#sitewide-survey input.email").width(newWidth + 2);
        }
      } catch (e) {}
    }
    
    
    // trigger local timeout for timed banner
    function triggerTimedBanner(currentTimeout) {
      if (currentTimeout > 0) {
        setTimeout(function() {
          //console.log("banner shown in time: "+new Date().getTime()+" (delta = "+(new Date().getTime() - $surveyTimerTimestamp)+")");
          prepareAndDisplayBanner();
          $surveyTimerTimestamp = null;
          $surveyTimerElapsed = true;
          $.cookies.set($surveyTimerCookie, {timerTimestamp: $surveyTimerTimestamp, timerElapsed: $surveyTimerElapsed}, getCookieOptions());
        }, currentTimeout*1000);
        //console.log("timer triggered with delay of: "+currentTimeout*1000);
      }
    }


    // set survey color
    function setSurveyColor() {
      $('#sitewide-survey').addClass($surveyPriorityClass);
    }
    
    
    // display the survey banner
    function prepareAndDisplayBanner() {
        var content = $('#sitewide-survey').remove();
        $("header#masthead").after(content);
        content.slideDown("slow");
        
        registerButtonListeners(content);
    }
    
    // show thank you message
    function showThankYou() {
      $("#sitewide-survey .wrapper").css("height", $("#sitewide-survey .wrapper").height());
      $('#sitewide-survey .description').fadeOut("slow", function() {
        $('#sitewide-survey .description-thanks').fadeIn("slow", function() {
          setTimeout(function() {
            $('#sitewide-survey').slideUp("slow");
          }, 2500);
        });
        
      });
    }
    
    
    // register button event handlers
    function registerButtonListeners(content) {
      /* events for desktop breakpoint buttons */
      content.on('click', '.cancel', function(event) {
        $('#sitewide-survey').slideUp("slow");
        // lastly set the cookies
        setSurveyExpiresCookie();
        resetPageVisitsCookie();
        resetSurveyTimerCookie();
      });
      
      content.on('click', '.ok', function(event) {
        $surveyAccepted = true;
        resetSurveyTimerCookie();
        resetPageVisitsCookie();
        
        // if "optin", open the popup immediately, "exit" will start beforeunload listener, "timer" will set a timer based popup
        if (($surveyType === "optin") || ($surveyType == "timer")) {
          openSurveyPopup(true);
          $('#sitewide-survey').slideUp("slow");
        } else if ($surveyType === "exit") {
          showThankYou();
          registerExitSurveyListener();
        }
        
        // lastly set the cookie
        setSurveyExpiresCookie();
      });
      
      content.on('submit', function(event) {
        // submit form with ajax if no validation errors
        if (!$("#sitewide-survey form").find(".validation-error-block").children().is(":visible")) {
          // show thanks page and fade out regardless of posting result
          showThankYou();
          
          // inject campaignID
          $("#sitewide-survey form").prepend("<input type='hidden' name='campaignID' value='"+$campaignID+"'>");
          // inject survey URL params
          var surveyURLParams = replaceSurveyParams(I18n.get('sitewide_survey', 'survey_url_params'));
          $("#sitewide-survey form").prepend("<input type='hidden' name='urlParams' value='"+surveyURLParams+"'>");
          
          var data = $('#sitewide-survey form').serialize();
          var url = $('#sitewide-survey form').attr('url');
          $.post( url, data, function( data ) {
            // do not wait for success
          });

          // lastly set the cookies
          resetPageVisitsCookie();
          setSurveyExpiresCookie();
        }
        // do not reload the page
        return false;
      });
    }
    
    
    // Sitecatalyst JS controls the actual sample ratio how many users get to see the survey
    function isSample() {
      var ms = new Date().getMilliseconds();
      return nkT.samplingRatio > ms / 10;
    }

    
    // opens the survey popup if user has accepted to participate
    function openSurveyPopup(directToSurvey) {
      var surveyURL = getSurveyURL();
      if ($surveyAccepted && window.isTrackingAvailable && (surveyURL !== null) || true) {
        if (directToSurvey) {
          $surveyPopup = window.open(surveyURL,"Survey","left=0,top=0,width=600,height=600,menubar=no,status=no,toolbar=no,location=no,titlebar=no,scrollbars=yes");
        } else {
          var parentURL = window.document.location.host;
          var surveyIdForTracking = getUrlVar(surveyURL, "Q84660534");
          $surveyPopup = window.open("","Survey","left=0,top=0,width=200,height=160,menubar=no,status=no,toolbar=no,location=no,titlebar=no,scrollbars=yes");
          $surveyPopup.document.write("<script>\
                                        var hostWindowURL = '"+parentURL+"'; \
                                        \
                                        var poller = setInterval(function(){startParentListener()},3000); \
                                        \
                                        function startParentListener() { \
                                          try { \
                                            if ((this.opener !== null) && (this.opener.document.location.host === hostWindowURL)) { \
                                              /* this.opener === null ? cns.log('OK: null') : cns.log('OK: '+this.opener.document.location.host); */ \
                                            } else { \
                                              /* cns.log('Window closed!'); */ \
                                              launchSurvey(); \
                                            } \
                                          } catch (ex) { \
                                            /* cns.log('URL changed, permission error...'); */ \
                                            launchSurvey(); \
                                          } \
                                        } \
                                        function launchSurvey() { \
                                          clearInterval(poller); \
                                          var surveyURL = document.getElementById('survey-url').getAttribute('data'); \
                                          if ((surveyURL !== null) && (surveyURL !== 'undefined')) { \
                                            this.location.assign(document.getElementById('survey-url').getAttribute('data')); \
                                            this.resizeTo(600,600); \
                                            this.focus(); \
                                            /* manual tracking event for this exit survey event (last because can fail) */ \
                                            try { \
                                              utag.link({ surveyId : '"+surveyIdForTracking+"', linkEvent: 'survey accept', link_text:'digium survey invite accepted', link_id:'"+window.location+"'}); \
                                            } catch(e) {}; \
                                          } else { \
                                            this.close(); \
                                          } \
                                        } \
                                       </script>");
          $surveyPopup.document.write("<style>body {margin: 0;} p {margin: 1em;}</style><div style='background:#124191;padding:1em'><img src='"+$popupImageURL+"' style='width:66px' alt='Nokia'></div>"); // Nokia logo
          $surveyPopup.document.write("<span id='survey-url' data='"+surveyURL+"'></span>");
          $surveyPopup.document.write("<p>"+I18n.get('sitewide_survey', 'survey_spash_screen')+"</p>"); // content
          $surveyPopup.document.close();
        }
      }
    }
    
    // helper to get URL param
    function getUrlVar(url, key) {
      var result = new RegExp(key + "=([^&]*)", "i").exec(url); 
      return result && unescape(result[1]) || ""; 
    }


    // wire up events related to exit survey
    function registerExitSurveyListener() {  
      // open popup instantly and try to blur it in the background     
      openSurveyPopup(false);
      $surveyPopup.blur();
      $window.focus();
    }
    
    
    /**
     * Cookie related code below
     */
    function loadSurveyCookieAndSettingsData() {
      // cookies
      $cookieTime = $.cookies.get($surveyDoneCookie);
      $cookiePageVisits = $.cookies.get($pageVisitsCookie) || 0;
      var tempCookie = $.cookies.get($surveyTimerCookie);
      if (tempCookie !== null) {
        (tempCookie["timerTimestamp"] !== undefined) ? ($surveyTimerTimestamp = tempCookie["timerTimestamp"]) : null;
        (tempCookie["timerElapsed"] !== undefined) ? ($surveyTimerElapsed = tempCookie["timerElapsed"]) : false;
      }
      
      // settings
      $surveyEnabled = I18n.get('sitewide_survey', 'enabled')
      $expiresInDays = I18n.get('sitewide_survey', 'expires_in_days');
      $settingsMaxPageVisits = I18n.get('sitewide_survey', 'page_visits');
      $surveySitewide = I18n.get('sitewide_survey', 'survey_sitewide');
      $surveyPriorityClass = I18n.get('sitewide_survey', 'priority_class');
      $surveyType = I18n.get('sitewide_survey', 'type');
      $campaignID = I18n.get('sitewide_survey', 'campaign_id');
      $popupImageURL = I18n.get('sitewide_survey', 'popup_image_url');
      $surveyTimeout = I18n.get('sitewide_survey', 'timer_interval');
    }
    
    
    // override CMS/cookie settings with this override cookie if available
    function loadOverrideCookie() {
      var overrideCookie = $.cookies.get($overrideCookie);
      if ((overrideCookie !== null) && (overrideCookie !== undefined)) {
        (overrideCookie["survey_enabled"] !== undefined)? ($surveyEnabled = overrideCookie["survey_enabled"]) : "";
        (overrideCookie["expires_in_days"] !== undefined) ? ($expiresInDays = overrideCookie["expires_in_days"]) : "";
        (overrideCookie["settings_max_page_visits"] !== undefined) ? ($settingsMaxPageVisits = overrideCookie["settings_max_page_visits"]) : "";
        (overrideCookie["survey_sitewide"] !== undefined) ? ($surveySitewide = overrideCookie["survey_sitewide"]) : "";
        (overrideCookie["survey_priority_class"] !== undefined) ? ($surveyPriorityClass = overrideCookie["survey_priority_class"]) : "";
        (overrideCookie["survey_type"] !== undefined) ? ($surveyType = overrideCookie["survey_type"]) : "";
        (overrideCookie["timer_interval"] !== undefined) ? ($surveyTimeout = overrideCookie["timer_interval"]) : "";
      }
    }
    
    // testing purposes only
    function createTestOverrideCookie() {
      $.cookies.set($overrideCookie, {survey_enabled: "true", survey_sitewide: "false", survey_type: "optin"}, getCookieOptions());
    }
    
    // save current time in millis
    function setSurveyExpiresCookie() {
      var cookieOptions = getCookieOptions();
      $.cookies.set($surveyDoneCookie, (new Date()).getTime(), cookieOptions);
    }
    
    
    // returns true if survey time has expired
    function testSurveyExpiresCookie() {
      var currentTime = (new Date()).getTime();
      if ($cookieTime === null || (currentTime > ($cookieTime + $expiresInDays * 86400 * 1000))) {
        return true;
      } else {
        return false;
      }
    }


    // reset survey timer cookie
    function resetSurveyTimerCookie() {
      $surveyTimerTimestamp = null;
      $surveyTimerElapsed = false;
      $.cookies.set($surveyTimerCookie, {timerTimestamp: $surveyTimerTimestamp, timerElapsed: $surveyTimerElapsed}, getCookieOptions());
    }
    
    // save current page visits
    function setPageVisitsCookie() {
      $.cookies.set($pageVisitsCookie, $cookiePageVisits + 1, getCookieOptions());
    }
    
    
    // reset page visits to 0
    function resetPageVisitsCookie() {
      $.cookies.set($pageVisitsCookie, 0, getCookieOptions());
    }
    
    
    // returns true if survey page visits exceeded
    function testAndSetSurveyPageVisitsCookie() {
      if ($cookiePageVisits !== null && ($cookiePageVisits >= $settingsMaxPageVisits)) {
        setPageVisitsCookie();
        return true;
      } else {
        setPageVisitsCookie();
        return false;
      }
    }
    
    // we need one extra option for the cookie 
    function getCookieOptions() {
      // default is sitewide survey
      var i = 1;
      if ($surveySitewide !== null && $surveySitewide !== undefined) {
        i = $surveySitewide ? 1 : 2;
      }
      return {
        path: getPathsForCookie(i) // default = 2, 1 = sitewide
      };
    }

    // this function will create the "paths" cookie option
    function getPathsForCookie(count, path) {
      path = path || window.location.pathname;
      if (path[0] === "/") {
        path = path.substring(1);
      }
      var allPaths = path.split("/");
      var result = "";
      for (var i = 0; i < count && i < allPaths.length; i++) {
        result += "/" + allPaths[i];
      }
      return result;
    }
    
    
    /**
     * Survey URL related code below
     */
    function getSurveyURL() {
        var surveyURL = I18n.get('sitewide_survey', 'survey_url');
        var surveyURLParams = I18n.get('sitewide_survey', 'survey_url_params');
        
        if (surveyURLParams !== null && surveyURLParams !== undefined) {
          surveyURLParams = replaceSurveyParams(surveyURLParams);
          surveyURL = surveyURL + surveyURLParams;
        }
      return surveyURL;
    };
    
    
    function replaceSurveyParams(surveyParams) {
      try {
          var hqe = $.cookies.get("hqe") || {};
        
          return surveyParams.
          replace("{siteCatalystVisitorId}", getSiteCatalystVisitorId()).
          replace("{countryCode}", utag.data['sCountry']).
          replace("{languageCode}", utag.data['sLang']).
          replace("{deviceName}", encodeURIComponent(utag.data['meta.ncsearch:productmodel'] || "")).
          replace("{optionalProductId}", encodeURIComponent(utag.data['meta.ncsearch:productid'] || "")).
          replace("{reservedForFuture}", getUniqueId()).
          replace("{reservedTwoForFuture}", "1").
          replace("{digiumLanguageCode}", nkT.languageCode).
          replace("{hqeTriggered}", getHqeTriggered(hqe)).
          replace("{hqeAction}", getHqeAction(hqe)).
          replace("{pageName}", nkT.pName);
      } catch(e) {
        return "";
      }
    }
    
    
    function getHqeTriggered(hqe) {
      return hqe.total >= 2 ? "1" : "0";
    }
  
    function getHqeAction(hqe) {
      if (hqe.video == 1) {
        return "video";
      }
      else if (hqe.compare == 1) {
        return "compare";
      }
      else {
        return "interaction";
      }
    }
  
    function getSiteCatalystVisitorId() {
      var id = utag.data['cp.s_vi'] || "";
      return id.match(/[0-9A-F]+-[0-9A-F]+/g);
    }
  
    function getUniqueId(){
      var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r&0x3 | 0x8);
        return v.toString(16);
      });
      return guid;
    }

    this.destroy = function($el) {
    };

  });

})(jQuery);

// uncomment the following lines in Tag Container
//$('#container').sitewideSurvey();
//$('#sitewide-survey .buttons').normalizeHeights({elementWrapper: 'input.equal-width', minScreenWidth: 480, normalizeWidths: true, normalizeHeights: false});
(function($) {

  // ---------------------------------------------------------------------------
  // Auto scroll the feeds, and click the title to change feeds.

  $.plugin('socialStream', function() {

    // This can be extended to take care of animiation direction (slide left, right, up, down), circular etc.
    this.options = {
      speed: 4000,
      circular: false,
      itemsInDisplay: 1
    };

    var $container, $topicSelect, $stream, $activeStreamContainer, options, autoPlayInterval;

    function autoScroll() {
      // Option 1
      // clearInterval(autoPlayInterval);
      // autoPlayInterval = setInterval(function(){
      //   var $firstChild = $stream.children(":first");
      //   $firstChild.animate({'marginTop': '-' + $firstChild.height()}, 'slow', function(){
      //     $firstChild.removeAttr('style');
      //     $stream.append($firstChild);
      //   });
      // }, options.speed);
      
      // Option 2
      clearInterval(autoPlayInterval);
      autoPlayInterval = setInterval(function(){
        var streamOffsetTop = $stream.offset().top;
        $stream.children('li').each(function(){

          if($(this).is(":nth-last-child(" + options.itemsInDisplay + ")")) {
            if(options.circular) {
              // scroll to top by default, this can be be extended by different directioins
              $stream.animate({scrollTop: 0}, 'slow');
            } else {
              clearInterval(autoPlayInterval);
            }
            return false;
          }

          var totop = 0;
          if ($(this).offset().top === streamOffsetTop) {
            totop = $(this).height() + $stream.scrollTop() + 1;
          } else if(($(this).offset().top + $(this).height()) > streamOffsetTop && $(this).offset().top < streamOffsetTop) {
            totop = $(this).height() +$(this).offset().top - streamOffsetTop + $stream.scrollTop() + 1;
          }

          if(totop > 0) {
            $stream.animate({scrollTop: totop}, 'slow');
            return false;
          }
          
        });

      }, options.speed);
    }

    function onChangetopic(){
      var $activeTopic = $(this).find(':selected');
      $container.find('.stream-content-wrapper.active').removeClass('active');
      $activeStreamContainer = $container.find('.stream-content-wrapper:eq(' + $activeTopic.index() + ')');
      $activeStreamContainer.addClass('active');
      PubSub.publish('image.added');

      // change the active stream, and restart the autoscroll.
      clearInterval(autoPlayInterval);
      $stream = $activeStreamContainer.find(".streams");
      setTimeout(autoScroll, options.speed);
    }

    this.init = function($el) {
      options = this.options;
      $.extend(options,this.options);

      $container = $el
      $topicSelect = $container.find(".topic select");
      $activeStreamContainer = $container.find('.stream-content-wrapper.active');
      $stream = $activeStreamContainer.find(".streams");

      // Autoscroll starts
      setTimeout(autoScroll, options.speed);
      
      $stream.on('mouseenter.'+ this.namespace, function(){
        clearInterval(autoPlayInterval);
      });
      $stream.on('mouseleave.'+ this.namespace, autoScroll);
      $(window).on('resize.'+ this.namespace, autoScroll);

      // Topic dropdown
      $topicSelect.on('change.'+ this.namespace, onChangetopic);
    };

    this.destroy = function($el) {
      $stream.off('mouseenter.'+ this.namespace);
      $stream.off('mouseleave.'+ this.namespace);
      $(window).off('resize.'+ this.namespace);
      clearInterval(autoPlayInterval);
    };

  });

})(jQuery);
(function($) {
 
  $.plugin('splitColumns', function() {

    /* Currently split one container to two columns */
 
    var $window = $(window), options, $container;

    this.options = {
      breakpoints:[], // resize with thiese breakpoints [0, 1024]
      debounceTime: 50
    };
 
    var splitTwoColumns = function() {

      if((options.breakpoints.length !==2 || ($(window).width() > options.breakpoints[0] && $(window).width() <= options.breakpoints[1])) && $container.find('.col').length == 0) {
        var tilesHeight, prevTileBottom = 0;

        $container.width('50%'); // in order to calculate the heigh of element after putting them in two columns
        tilesHeight = $container.height();

        $container.children().each(function(){
          if (prevTileBottom > 0)
            var tileTop = prevTileBottom;
          else
            var tileTop = $(this).position().top;

          tileBottom = tileTop + $(this).outerHeight();          

          if(tileTop < tilesHeight/2 && tileBottom >= tilesHeight/2) {
            var $col1 = $('<div class="col"></div>'),
            $col2 = $('<div class="col"></div>');

            $(this).prevAll().each(function(i, item){
              $col1.prepend(item);
            });
            $col2.append($(this).nextAll());
            
            if((tilesHeight/2 - tileTop) >= (tileBottom - tilesHeight/2))
               $col1.append($(this));
            else
               $col2.prepend($(this));

            $container.width(''); // reset the width as they are already put in columns.
            $container.empty().append($col1).append($col2);
            return false;
          }
          prevTileBottom = tileBottom;
        });
      }

    };
 
    this.init = function($el) {
      $container = $el;
      options = this.options;
      var lazySpitTwoColumns = $.debounce(splitTwoColumns, options.debounceTime);
      $window.on('resize.' + this.namespace, lazySpitTwoColumns).resize();
    };
 
    this.destroy = function($el) {
      $window.off('resize.' + this.namespace);
    };
 
  });
 
})(jQuery);
(function($) {

  $.plugin('splitToSlides', function() {

    var $window = $(window), 
        options, 
        $section, 
        $original_tiles, 
        $current_tiles,
        $tileCount,  
        $tile_container,
        $slide_before_video, 
        videoIsPlaying,
        is = BrowserDetect,
        supportedIE = is.browser === 'Explorer' && is.version > 7,
        supportedBrowser = $.inArray(is.browser, ['Chrome', 'Safari', 'Firefox', 'Mozilla']) > -1,
        supportedOS = $.inArray(is.OS, ['Mac', 'Windows']) > -1,
        videoEventsSupported = (supportedBrowser && supportedOS) || supportedIE;

    this.options = {
      slide_class: 'slide', 
      tiles: '.content_wrapper',
      singleClass: 'single',  
      resolutions: {0: 1, 480: 2, 768: 3, 1024: 4},
      useParentContainer: false
    };

    var bindEvents = function() {
      // On mobile devices video events are not always available and cannot be relied on
      if (videoEventsSupported) {
        $section.on('videostart.' + this.namespace, handleVideoStart);
        $section.on('videostop.' + this.namespace, handleVideoStop);
      } else {
        $section.on('videoinitialized.' + this.namespace, handleVideoStart);
        $section.on('playerdestroyed.' + this.namespace, handleVideoStop);
      }

      $(window).on('resize.' + this.namespace, $.debounce(initTiles, 500));
    };

    var initTiles = function() {
      if(videoIsPlaying) {
        return;
      }
      var newTileCount = getTileCountForCurrentResolution();
      // if tilecount have not changed, dont do anything. 
      // Slides should not been changed.
      
      if(newTileCount !== $tileCount) {
        $tileCount = newTileCount; 
        $current_tiles = groupVideos($tileCount);
        updateDomSlides($current_tiles);
      }
    };
    
    /*
    * Calcules tilecount for current screen size. 
    * It uses options.resolutions to define how many tiles there should be.  
    */
    var getTileCountForCurrentResolution = function() {
      
      var ret, 
          windowSize = $(document).width();
          if (options.useParentContainer) {
            windowSize = $section.width();
          }
          //console.log("window size: "+windowSize);
      
      for (var reso in options.resolutions) {
        //console.log("resolutions: "+reso);
        if (reso < windowSize) {
          ret = reso;
        } else {
          break;
        }
      }
    
      return Math.min(options.resolutions[ret], $original_tiles.size());
    };


    var handleVideoStart = function() {
      $slide_before_video = $section.find('.' + options.slide_class).filter(':visible');
      if( !(BrowserDetect.browser === 'IEMobile') ) {
        $slide_before_video.hide();
      }
      videoIsPlaying = true;
    };
    
    var handleVideoStop = function() {
      $slide_before_video.show();
      videoIsPlaying = false;
    };
    

    var initElements = function() {
      
      $original_tiles = $section.find(options.tiles);
      $tile_container = $original_tiles.parent();
      $original_tiles.detach();

      // if there is only one slide. Add class for it
      if($original_tiles.size() === 1) {
        $original_tiles.addClass(options.singleClass);
      }
    };

 
    var updateDomSlides = function(groupedVideos) {
      var i, len;
      // create DOM elemments
      for(i = 0, len = groupedVideos.length; i < len; i++) {
        groupedVideos[i] = $('<div class="'  +options.slide_class + '"/>').append(groupedVideos[i]);
      }
      // attach elements to dom
      $tile_container.html(groupedVideos);

      $section.trigger('contentReload');
    };


    var groupVideos = function(groupSize) {
      var isLecasyIE = (BrowserDetect.browser === 'Explorer' && BrowserDetect.version < 9);
      var i, len, index, slides = [], video, 
          width = (100 / groupSize).toFixed(isLecasyIE ? 0:2) + '%';
    
      // group elements
      for (i = 0, len = $original_tiles.length; i < len; i++) {
        
        // create group pointer
        index = parseInt(i / groupSize);
        
        // init group id not exist
        if(slides[index] === undefined) { slides[index] = []; }
         
        video = $($original_tiles[i]).clone(true);
        
        // add devided size for image
        video.width(width);

        // push element to group 
        slides[index].push(video);
      }

     return slides;
    };

    this.init = function($el) {
      $section = $el;
      options = this.options;
      $.extend(options, this.options);
      $el.show();
      initElements();
      bindEvents();
      initTiles();

    };

    this.destroy = function($el) {
      $section.off('videostop.' + this.namespace);
      $section.off('videostart.' + this.namespace);
    };

 });
})(jQuery);

(function($) {

  $.plugin('stickyNavigation', function() {

    var _self = this,
        $el,
        cloneContainerId = 'aside-navigation-clone-container',
        $cloneContainer,
        window_width,
        default_options = {
          breakpoint: 640
        };

    function onClickHandler(e) {
      var $this = $(this),
          url = $this.attr('href'),
          $anchorTarget;

      // Set target. Check first if clicked link should scroll to top
      if(url.replace('#', '') == 'top') {
        var nameAttr = url.replace('#', '');
        $anchorTarget = $('[name="top"]');
      } else {
        $anchorTarget = $(url);
      }

      // Check if url starts with an anchor tag and check if url is not just a # tag
      if(url.substr(0, 1) == "#" && url.length > 1) {
        // If url is an anchor, prevent event
        e.preventDefault();

        // If history.pushState isn't undefined, add anchor to address bar
        if(history.pushState){
          history.pushState(null, null, url);
        }

        navigationStateHandler($this);

        // Check if target exists and scroll to target
        if($anchorTarget.length > 0) {
          scrollHandler($anchorTarget);
        }
      }
    }

    function scrollHandler(anchorTarget) {
      var $anchorTarget = anchorTarget,
          targetPosition;

      // Calculate target position
      targetPosition = $anchorTarget.offset().top - $cloneContainer.outerHeight(true);

      // Animate to target
      $('html,body').animate({'scrollTop': targetPosition}, 300);
    }

    function initialNavigationStateHandler() {
      var hash = window.location.hash,
          $anchorTarget = '';

      // Check that hash contains only letters, numbers, dash and underscores.
      // If a hash contains '=' or any other special characters, page will break 
      // due to an invalid selector.
      if(/^[A-Za-z0-9_-]+$/.exec(hash.substr(1, hash.length))) {
        $anchorTarget = $(hash);
      }

      // Check if link has an anchor and if target exists
      if(hash && $anchorTarget.length > 0){
        // Add active class to all links with matching hash
        $('a[href='+hash+']').parent().addClass('is-active');
      }
    }

    function navigationStateHandler(clickTarget) {
      var $this = clickTarget,
          $parent = $this.parent('.aside-navigation-item');

      // Loop through all .aside-navigation widgets
      $('.aside-navigation').each(function(){
        $('.aside-navigation-item', $(this)).eq($parent.index()).siblings().removeClass('is-active');
        // Add active class to clicked item
        $('.aside-navigation-item', $(this)).eq($parent.index()).addClass('is-active');
      });
    }

    function stickyNavigationHandler(e) {
      var elPositionTop = $el.offset().top,
          documentScrollTop = $(document).scrollTop(),
          cloneContainerTopPosition;

      // If viewport is smaller than breakpoint, recalculate position,
      // so that sticky navigation is shown after aside navigation is out of view
      if($(window).width() < _self.options.breakpoint){
        elPositionTop = $el.offset().top + $el.height();
      }

      // Clone target
      if($cloneContainer == undefined){
        // Create container for clone
        $cloneContainer = $('<div></div>').attr('id', 'aside-navigation-clone-container').appendTo('body').hide();

        // Clone target
        $($el.clone(true).attr('id', 'clone').appendTo($cloneContainer));

        // Check if sticky navigation needs to be constrained
        stickyNavigationStateHandler();

        // Style clone and hide it from vieport
        $cloneContainer.css({'position':'fixed', 'top': -($cloneContainer.height()), 'left': '0', 'width': '100%', 'z-index': '999'});
      }

      // Get top position of clone
      cloneContainerTopPosition = $cloneContainer.css('top').replace('px', '');

      // Show/hide/animate clone, if scroll position is bigger or equal to target element's position
      if(documentScrollTop >= elPositionTop) {
        // Show clone
        if($cloneContainer.hasClass('is-constrained') == true) {
          if($cloneContainer.is(':animated') == false && cloneContainerTopPosition < 0) {
            $cloneContainer.show().animate({'top': '0'}, 250, 'easeInOutQuart');
          }
        } else {
          $cloneContainer.css({'top': '0'});
          $cloneContainer.show();
        }
      } else {
        // Hide clone
        if($cloneContainer.hasClass('is-constrained') == true) {
          if($cloneContainer.is(':animated') == false && cloneContainerTopPosition > -($cloneContainer.height()) ) {
            $cloneContainer.animate({'top': -($cloneContainer.height())}, 250, 'easeInOutQuart', function() {
              $(this).hide();
            });
          }
        } else {
          $cloneContainer.hide();
        }
      }

      // Check if sticky navigation needs to be constrained
      stickyNavigationStateHandler();
    }

    function stickyNavigationStateHandler() {
      // Sticky navigation is constrained when viewport is smaller than breakpoint
      if($cloneContainer && window_width > _self.options.breakpoint) {
        $cloneContainer.removeClass('is-constrained');
      } else if($cloneContainer) {
        $cloneContainer.addClass('is-constrained');
      }
    }

    function cacheWindowWidth() {
      window_width = viewport().width;
    }

    function bindEvents() {
      $el.on('click.' + this.namespace, 'a', onClickHandler);
      $(window).on('scroll.' + this.namespace, stickyNavigationHandler);
      $(window).on('resize.' + this.namespace, $.debounce(stickyNavigationHandler, 50));
      $(window).on('resize.' + this.namespace, $.debounce(cacheWindowWidth, 200));

      // Improve support for touch devices
      // $(window).on('touchstart.' + this.namespace, stickyNavigationHandler);
      // $(window).on('touchmove.' + this.namespace, $.debounceScroll(stickyNavigationHandler, 100));
      // $(window).on('touchend.' + this.namespace, stickyNavigationHandler);
    }

    function unbindEvents() {
      $el.off('click.' + this.namespace, 'a');
      $(window).off('scroll.' + this.namespace);
      $(window).off('resize.' + this.namespace);
    }

    this.init = function(el) {
      
      $el = $(el);
      this.options = $.extend({}, default_options, this.options);
      cacheWindowWidth();
      bindEvents();
      stickyNavigationHandler(undefined);
      initialNavigationStateHandler();
      // Hide all component back to top elements on page
      $('body.js .back-to-top').hide();
    };
  
    this.destroy = function($el) {
      unbindEvents();
    };
 
  });
})(jQuery);

(function($) {

  $.plugin('swipe', function() {

    var options = {
      on_drag_start: function() {},
      on_drag:        function() {},
      on_drag_stop:  function() {},
      preventDefaultEvents: true, 
      debug: false
    };
    
    var $el,
        startX, 
        startY, 
        pos_diff_X = 0, 
        pos_diff_Y = 0, 
        trackable, 
        isMoving = false, 
        speedSamplerTimer,
        current_speed_X = 0,
        current_speed_Y = 0, 
        pluginBinded = false, 
        usePointEvents = false;


    this.init = function(el) {
      $el = $(el);
      usePointEvents = window.navigator.msPointerEnabled;

      $.extend(options, this.options);

      this.bind();
    }

    this.bind = function() {
      if (pluginBinded) {
        return;
      }

      if(usePointEvents) {
        $el.on("MSPointerDown." + this.namespace, onTouchStart);
        $el.on('MSPointerUp.' + this.namespace, onTouchEnd);
      } else {
        $el.on('touchstart.' + this.namespace , onTouchStart);
        $el.on('touchend.' + this.namespace, onTouchEnd);
      }
      
      pluginBinded = true;
    }

    this.unbind = function() {

      $el.off('touchstart.' + this.namespace);
      $el.off('touchend.' + this.namespace);
      $el.off('MSPointerDown.' + this.namespace);
      $el.off('MSPointerUp.' + this.namespace);
      pluginBinded = false;
    }

    function cancelTouch() {
    
      $el.off('touchmove.' + this.namespace);
      $el.off('MSPointerMove.' + this.namespace);
      
      startX = null;
      isMoving = false;
      clearInterval(speedSamplerTimer);
    }

    function onTouchEnd() {
      cancelTouch();
      options.on_drag_stop(pos_diff_X, pos_diff_Y);
    }


    function onTouchMove(e) {
      e.preventDefault();
      if (isMoving) {
        var x = trackable(e).pageX;
        var y = trackable(e).pageY;
        pos_diff_X = startX - x;
        pos_diff_Y = startY - y;
        options.on_drag(pos_diff_X, pos_diff_Y)
      }
    }
    
    var trackable = function(e) {
      
      if(e.originalEvent) {
        e = e.originalEvent;
      }

      if (e.targetTouches && e.targetTouches.length === 1) {
        return e.touches[0];
      } else {
        return e;
      }
    }
    
    function onTouchStart(e) {
      // e.preventDefault();
      startX = trackable(e).pageX;
      startY = trackable(e).pageY;
      isMoving = true;

      if(usePointEvents) {
        $el.on('MSPointerMove.' + this.namespace, onTouchMove);
      } else {
        $el.on('touchmove.' + this.namespace, onTouchMove);
      }
      
      options.on_drag_start();
    }
  });

})(jQuery);
/*global $, jQuery, window, App*/


window.App = window.App || {};
window.App.Plugin = window.App.Plugin || {};
window.App.Plugin.TagArea = function TagArea($, document) {

  return function() {
    "use strict";

    var
    _self = this,
      $el, // root element where plugins is initialized to  
      $options_container, // container for available options. 
      $input_field, // holds input field that handles available tags filtering. 
      $native_select,
      silent = false,
      option_defaults = {

        new_tag_input: '.tag-area-input', // input field for filtering and adding new tags
        new_tag_options: '.tag-area-new-tag-options', // container for available options when something is typed on input field

        tag_item: '.tag-area-item', // tag item on list  
        tag_item_remove: '.tag-area-item-remove', // hook for button to remove selected tags
        tag_item_value: '.tag-area-item-value', // hook for tag value element
        native_select: '.tag-area-selected-tags', // select element that should be updated when ever tags are changed. Other plugins should get plugins state from this element.
        tags: {
          a: 'A', // just for debugging purposes. it user sees these, something is broken.
          b: 'B'
        }
      };

    this.handleTagRemove = function(e) {

      e.stopPropagation();
      $(e.currentTarget).parents(_self.options.tag_item).hide();
      _self.updateElementsOnTagChange();
    };

    // should hide all elements on available tags container
    this.closeNewTagSelection = function() {
      $options_container.children().hide();
      $input_field.val('');
    };

    // click handler for available tags
    this.handleTagAdd = function(e) {
      e.preventDefault();
      e.stopPropagation();
      var _selected_tag_value = $(e.currentTarget).data('tag-value');
      _self.setTagSelected(_selected_tag_value);
    };

    // handle for key events that filters available tags
    this.handleInputChange = function(e) {

      switch (e.keyCode) {

        case 27: // on ESC
          _self.closeNewTagSelection();
          break;

        case 13:
          var filtered_items = $options_container.children().hide().filter("[data-tag-value*='" + $input_field.val() + "']");
          if (filtered_items.length === 1) { // select value it there is only one option left
            _self.setTagSelected($(filtered_items[0]).data('tag-value'));
          }
          break;

        default:
          $options_container.children().hide().filter("[data-tag-value*='" + $input_field.val().toLowerCase() + "']").show();
          break;
      }
    };

    /**
     * When input gets focus, it should show available tags
     * @return {undefined}
     */
    this.handleInputFocus = function() {
      if ($input_field.val() === '' || $input_field.val() === $input_field.attr('placeholder')) { // at first time jquery return .val() from placeholder !??
        $options_container.children().show();
      }
    };

    /**
     * When input losts it focus, it should hide available tags
     * @return {undefined}
     */
    this.handleInputBlur = function() {
      _self.closeNewTagSelection();
    };

    /**
     * Interface for external scripts to select some option
     * @param  {Object} el        object jquery.plugin provides when it proxies function call to plugin
     * @param  {String} tag_value that should be selected
     * @return {undefined}
     */
    this.selectTag = function(el, tag_value) {
      _self.setTagSelected(tag_value);
    }

    this.removeTag = function(el, tag_value) {
      _self.setTagUnSelected(tag_value);
    }

    this.removeAllTag = function(el, tag_value) {
      _self.setAllTagUnSelected();
    }


    this.setAllTagUnSelected = function() {
      $el.find(_self.options.tag_item).hide();
      _self.updateElementsOnTagChange();
    };

  // common functionality for selecting new tag
    this.setTagUnSelected = function(tag_value) {

      // filter and show tag
      $el.find(_self.options.tag_item + "[data-tag-value='" + tag_value + "']").hide();
 
      // update ui elements to reflect current state
      _self.updateElementsOnTagChange();
    };

    // common functionality for selecting new tag
    this.setTagSelected = function(tag_value) {

      // filter and show tag
      $el.find(_self.options.tag_item + "[data-tag-value='" + tag_value + "']").show();

      // close available options
      _self.closeNewTagSelection();

      // update ui elements to reflect current state
      _self.updateElementsOnTagChange();

      $input_field.blur();
    };

    // all event binding belong to here
    this.bindEvents = function() {

      $el.on('click.' + this.namespace, _self.options.tag_item_remove, _self.handleTagRemove);
      $el.on('keyup.' + this.namespace, _self.options.new_tag_input, _self.handleInputChange);
      $options_container.on('mousedown.' + this.namespace, _self.options.tag_item, _self.handleTagAdd);
      $options_container.on('touchstart.' + this.namespace, _self.options.tag_item, _self.handleTagAdd);
      $el.on('focus.' + this.namespace, _self.options.new_tag_input, _self.handleInputFocus);
      $el.on('click.' + this.namespace, _self.options.new_tag_input, _self.handleInputFocus);
      $el.on('blur.' + this.namespace, _self.options.new_tag_input, _self.handleInputBlur);
    };

    // all event unbinding belong to here
    this.unbindEvents = function() {
      $options_container.off('.' + this.namespace);
      $el.off('.' + this.namespace);
    };

    // grap all elemnts that are static on page whole page lifetime 
    this.collectElements = function() {

      $options_container = $el.find(_self.options.new_tag_options);
      $input_field = $el.find(_self.options.new_tag_input);
      $native_select = $el.find(_self.options.native_select);
    };

    this.setSilent = function($el, _silent) {
      silent = _silent;
    }

    // update ui elements to reflect current state
    this.updateElementsOnTagChange = function() {
      _self.updateNativeElement();
      _self.updateAvailableOptions();
    };

    this.updateNativeElement = function() {
      var native_options = $native_select.children();
      native_options.prop('selected', false);

      $el.find(' > ' + _self.options.tag_item + ':visible').each(function() {
        var _option = $(this).data('tag-value');
        native_options.filter('[value="' + _option + '"]').prop('selected', true);
      });
      if (!silent) {
        $native_select.trigger('change');
      }
    };

    this.updateAvailableOptions = function() {
      $el.find(_self.options.new_tag_options).empty();

      $el.find(_self.options.tag_item + ':hidden').each(function() {

        var _options_item = $($(this).clone());

        _options_item.find(_self.options.tag_item_remove).remove();

        $options_container.append(_options_item);
      });
    };

    // <option value="passes">Passes</option>
    this.buildNativeOptions = function(tags) {

      var tag, el, value, i, len, keys = Object.keys(tags);
      keys.sort();
      len = keys.length;

      if (!len) return;

      $native_select.empty();
      for (i = 0; i < len; i++) {
        tag = tags[keys[i]];
        if($.isFunction(tag.getContent)) {
          value = '#' + tag.getContent().charAt(0).toUpperCase() + tag.getContent().substring(1);
          el = $('<option>').attr('value', tag.getContent()).text(value);
          $native_select.append(el);
        }
      };
    };

    this.buildTags = function() {
      var options = $native_select.children(),
        option,
        $template = $el.find(this.options.tag_item + '.template').detach().removeClass('template'),
        tag,
        i,
        len = options.length;

      for (i = 0; i < len; i++) {
        tag = $template.clone();
        option = $(options[i]);
        tag.attr('data-tag-value', option.val()).find(_self.options.tag_item_value).html(option.html());
        $el.prepend(tag);
      }

    }

    this.init = function(el) {

      if (!el) { // return if nothings happening
        return;
      }

      $el = $(el);
      this.options = $.extend({}, option_defaults, this.options, $el.data());
      this.collectElements();
      this.buildNativeOptions(this.options.tags);
      this.buildTags();
      this.updateAvailableOptions();
      this.bindEvents();
      $el.show();
    };

    this.destroy = function($el) {
      this.unbindEvents();
    };
  };
};

jQuery.plugin('tagArea', window.App.Plugin.TagArea(jQuery, document));
(function($) {

  $.plugin('tooltip', function() {

    var $window = $(window), options, $section, $tooltip, $targetDiv, $root;

    this.options = {
    	tooltipOffset: 10,
      debounceTime: 150
    };

    var positionTooltip = function() {

      // calculate left and top position
      var tooltipOffsetTop = parseInt($section.offset().top - parseInt($tooltip.outerHeight(), 10), 10) - parseInt($section.outerHeight()/4, 10);
      if ($('body').hasClass('rtl')) {
        var tooltipOffsetLeft = parseInt($section.offset().left, 10) + parseInt($section.outerHeight()/4, 10);;
      } else {
        var tooltipOffsetLeft = parseInt($section.offset().left-$tooltip.outerWidth()+$section.outerWidth()/2, 10);
      }

      // align tooltip by defined values
      $tooltip.css({ 'top': tooltipOffsetTop + 'px', 'left': tooltipOffsetLeft }).hide();
    };

   
    var buildTooltip = function() {

      // try to define get id from trigger id 
      var id = $section.attr('id');
      id = ( id === undefined ? '' : ('-' + id) );

      // build tooltip and create unique id for it
      $tooltip = $('<div id="tooltip-'+ $targetDiv.attr('id') + id + '" class="tooltip" />').hide();
      $tooltip.prepend($targetDiv.clone().show());
      
      // put it to body
      $('body').append($tooltip);
    };

    
    var bindEvents = function() {

      $section.on('click', function() { $tooltip.toggle(); });
      $tooltip.on('click', function() { $tooltip.toggle(); });
      $window.on('resize.' + this.namespace, $.debounce(positionTooltip, options.debounceTime));
    };


    this.init = function($el) {

      // collect elements
      options = this.options;
      $section = $el;
      $targetDiv = $($section.attr('href')).hide();
      
      // build and bind
      buildTooltip();
      positionTooltip();
      bindEvents();
    };


    this.destroy = function($el) {
      //Destroys here
      $window.off('resize.' + this.namespace);
    };


  });
})(jQuery);
(function( $ ){

  $.plugin('touchScroll', function() {

  // $.fn.touchScroll = function( params ) {
     
    var $section,
        
      options = { 
        // controls
        triggerNext: '.control.next',
        triggerPrev: '.control.prev',
        controlTiles: '.controls > li',
        // existing elements
        viewport_class: '.slides-viewport',
        slides: '.slide',
        // generated elements
        scroll_container_class: 'scroll_container', 
        snapToElements: false, 
        minResolution: 0,
        maxResolution: 99999
      }, 

      $component_viewport,
      $scroll_container,
      $slides,
      $elementsToSnap, 
      $trigger_next,
      $trigger_prev,
      $control_tiles,
      elementsToSnapTimer, 
      component_viewport_width, 
      tilesOnViewport,
      scrollDirection = 0, // 0 undefined, 1 horizonal, 2 vertical. This for optimize moveEvents, so it can use numeral comparison, not string compare. 
      $last_slide, // use to calculate limits of scrill
      $currentX = 0,
      element_pos,
      $end_pos,
      $current_slide,
      isLecasyIE = (BrowserDetect.browser == 'Explorer' && BrowserDetect.version <= 8), 
      gesturesEnabled = false;



    var pluginDisabled = function() {
      var current_document_width = $(document).width();
   
      return (options.minResolution && current_document_width < options.minResolution) 
          || (options.maxResolution && current_document_width > options.maxResolution);
    }

    var collectElements = function() {

      $scroll_container = $('<div class="'+ options.scroll_container_class +'"/>');
      $component_viewport = $section.find(options.viewport_class);
      $slides = $component_viewport.find(options.slides);      
      $last_slide = $slides.last();

      $trigger_next = $section.find(options.triggerNext);
      $trigger_prev = $section.find(options.triggerPrev);
      $control_tiles = $section.find(options.controlTiles);   

      $slides.detach().appendTo($scroll_container);
      $component_viewport.append($scroll_container);

      if(options.snapToElements) {
        $elementsToSnap = $scroll_container.find(options.snapToElements);
      }

    };

    var setElementDefaults = function() {

      component_viewport_width = parseInt($component_viewport.width());
      tilesOnViewport = getTileCountForCurrentResolution();
      $end_pos = parseInt(($slides.size()-1) / tilesOnViewport) * component_viewport_width * -1;
      
      var newWidth = parseInt(parseInt($component_viewport.width()) / tilesOnViewport);
      $slides.width(newWidth);
  
      $component_viewport.hide();
      // $component_viewport.hide().addClass('touchScrollViewport');
      
      $slides.css({ 'float': 'left', 'display': 'block' });
      if($slides.size() === 1) {
        $slides.addClass('single');
      }

      $component_viewport.css({'position': 'relative', 'overflow': 'hidden'}).show();
      
      if(pluginDisabled()) {
        $scroll_container.width('auto');
        $scroll_container.stop().css('margin-left', '0');
        setLumiaGesturesEnabled(true);
      } else {

        $scroll_container.width(component_viewport_width * $slides.size());
        setLumiaGesturesEnabled(false);
      }
      setControlDefaults();
    };

    var setLumiaGesturesEnabled = function(enabled) {
      $component_viewport.css('-ms-touch-action', enabled ? 'auto' : 'none');
      gesturesEnabled = enabled;
    }

    var initTouch = function() {
      if (pluginDisabled()) {
        $component_viewport.swipe('unbind');
      } else {
        $component_viewport.swipe('bind');
      }   
    }

    var setControlDefaults = function() {
      
      $trigger_next.toggleClass('disabled', $currentX === $end_pos);
      $trigger_prev.toggleClass('disabled', $currentX === 0);
      var active_index = $slides.index(getClosestElementToSnap());
      $($control_tiles.removeClass('active').get(active_index)).addClass('active');
    }

    var startContainerMove = function() {
      clearTimeout(elementsToSnapTimer);
      $scroll_container.stop();
    }

    var moveContainer = function(pos_X, pos_Y) {

      switch (scrollDirection) {
        case 0:
          scrollDirection = (Math.abs(pos_X) > Math.abs(pos_Y)) ? 1:2;
          // setLumiaGesturesEnabled(scrollDirection === 2);
          moveContainer(pos_X, pos_Y);
          break;
        case 1:
          $scroll_container.css('margin-left', $currentX - pos_X);
          break;
        case 2:
          // if(!gesturesEnabled) {
            window.scroll(window.scrollX, $(window).scrollTop() + pos_Y);
          // }
          break;
      }
    }

    var disableGesturesForaWhite = function() {
      // setTimeout(function(){setLumiaGesturesEnabled(false)}, 100);
    }

    var stopContainerMove = function(pos_diff_X, pos_diff_Y) {
      setLumiaGesturesEnabled(false);
      
      if(scrollDirection === 1) {
        $currentX -= pos_diff_X;
      }
      scrollDirection = 0;
      
      adjustContainerPosition(pos_diff_X);
      setControlDefaults();
    }

    var adjustContainerPosition = function(pos_diff_X) {
      if(($currentX) > 0 ) {
        snapToPosition(0);
      } else if($end_pos > $currentX) {
        snapToPosition($end_pos);
      } else {
        if(options.snapToElements) {
          clearTimeout(elementsToSnapTimer);
          elementsToSnapTimer = setTimeout(function(){
            snapToElement(getClosestElementToSnap(), setControlDefaults);
          }, 750);
        }
      }
    }

    var getClosestElementToSnap = function() {
      var i, len = $elementsToSnap.size(), 
        snapTo = 999999,
        element, 
        prev_element;        

      for(i = 0; i < len; i++) {
      
        element = $($elementsToSnap[i]);
        element_pos = element.position().left;

        if(snapTo > Math.abs(element_pos)) {
          snapTo = Math.abs(element_pos);
          prev_element = element;       
        } else {
          return prev_element;
       }
      }
      return $elementsToSnap.last();
    }

    var snapToElement = function(elem, callback) {
      if($elementsToSnap.index(elem) === ($slides.size() - $slides.size() % tilesOnViewport) - 1) {
        snapToPosition($end_pos, callback);
      } else {
        snapToPosition($scroll_container.offset().left - $component_viewport.offset().left - elem.position().left, callback);
      }
    }

    var snapToPosition = function(pos_X, callback) {
      $scroll_container.stop().animate({'margin-left':  pos_X}, 500, 'easeInOutQuart', callback);
      $currentX = pos_X;
    }

    /*
    * Calcules tilecount for current screen size. 
    * It uses options.resolutions to define how many tiles there should be.  
    */
    var getTileCountForCurrentResolution = function() {
      
      var ret, 
          windowSize = $(document).width();
      
      for (var reso in options.resolutions) {
        if (reso < windowSize) {
          ret = reso;
        } else {
          break;
        }
      }
      return Math.min(options.resolutions[ret], $slides.size());
    };

    var triggerNextSlide = function(e) {
      if(!$trigger_next.is('.disabled')){
        clearTimeout(elementsToSnapTimer);
        snapToPosition($currentX - component_viewport_width, function(){stopContainerMove(0,0)});
      }
      e.preventDefault();
    }

    var triggerPrevSlide = function(e) {
      if(!$trigger_prev.is('.disabled')){
        clearTimeout(elementsToSnapTimer);
        snapToPosition($currentX + component_viewport_width, function(){stopContainerMove(0,0)});
      }
      e.preventDefault();
     }


    var triggerFromControl = function(e) {
      if(e && e.data) {
        snapToElement($($slides.get(e.data.index)), setControlDefaults);
      }
      e.preventDefault();
    }

    var onRezise = function() {

      setElementDefaults();
      if (!isLecasyIE) {
        snapToElement(getClosestElementToSnap())
      }
      initTouch();
    }

    var onVideoStart = function() {
      $scroll_container.hide();     
    }
    
    var onVideoStop = function() {
      $scroll_container.show();     
    }

    var bindEvents = function() {

      $component_viewport.swipe({
         on_drag_start: startContainerMove, 
         on_drag: moveContainer,
         on_drag_stop: stopContainerMove,
         preventDefaultEvents: true
      }); 

      $trigger_next.on('click', triggerNextSlide);
      $trigger_prev.on('click', triggerPrevSlide);
      $control_tiles.each(function(i){
        $(this).on('click', {index: i}, triggerFromControl); 
      });
      
      $section.on('videoStarting', onVideoStart);
      $section.on('videoStopped', onVideoStop);
      $(window).on('resize', $.debounce(onRezise, 100));
    }


    this.init = function(el) {
     
      $section = $(el);
      
      $.extend(options, this.options);

      collectElements();
      setElementDefaults();
      bindEvents();
      initTouch();
      $section.show();
    };

  });
})( jQuery );
(function ($) {

  $.plugin('transitionOrAnimate', function () {

    var $window = $(window),
      options, $this;

    this.options = {
      classNames: '',
      properties: {},
      duration: '150',
      callback: function () {}
    };

    var cb = function () {
      options.callback.apply($this, arguments);
    };

    this.init = function ($el) {
      var transitionEvent;
      $this = $el;
      options = this.options;

      if ('ontransitionend' in window) {
        transitionEvent = 'transitionend';
      }
      else if ('onwebkittransitionend' in window) {
        transitionEvent = 'webkitTransitionEnd';
      }
      else if ('onotransitionend' in $el.get(0) || navigator.appName == 'Opera') {
        transitionEvent = 'oTransitionEnd';
      }
      else {
        transitionEvent = false;
      }

      // if transition event found, it is suported.
      // Also start listen to it for callback triggering
      if (transitionEvent) {
        $el.addClass(options.classNames).on(transitionEvent, cb);
        $el.css(options.properties);

      }
      else { // otherwise use to jQuery animate
        $el.animate(options.properties, options.duration, cb);
      }
    };

    this.destroy = function ($el) {
      // Unbinds
    };

  });

  /***************************************************\
   TRANSITION ANIMATION WITH JQUERY FALLBACK
  \***************************************************/
  $.fn.extend({

    customAnimate: function (css_options, speed, callback) {

      var _self = this,
        defaults = {
          transition_class_prefix: 'transition-ease'
        },
        options = {
          speed: '150'
        };

      options = $.extend({}, options, css_options, {
        speed: speed
      });

      if (!Modernizr.csstransitions) {

        return jQuery.fn.animate.apply(this, arguments);

      }
      else {

        //Iterate over the current set of matched elements
        return this.each(function () {

          // pick first elemenet
          var $el = $(this); //  might need loop to handle all

          // create callback wrapper that removes transition styles and capsulates callback to it self
          this.transitionsOnGoind = (this.transitionsOnGoind ||  0) + 1;
          var cb = transitionCallback(this, $.isFunction(callback) ? callback : void 0);

          // add inline style that defines animation type
          $el.css('transition', 'all ' + options.speed + 'ms ease-in-out');

          // trigger animate
          $el.css(css_options);

          setTimeout(function () {
            cb();
          }, options.speed);

        });

        return $el;
      }

      function transitionCallback(el, cb) {

        return function (e) {

          $el = $(el);
          el.transitionsOnGoind = el.transitionsOnGoind - 1;

          if (el.transitionsOnGoind <= 0) {
            $el.css('transition', '');
          }

          if ($.isFunction(cb)) {
            cb.call(el);
          }
        };
      };

      function transitionEndEventName() {

        var transEndEventNames = {
          'WebkitTransition': 'webkitTransitionEnd',
          'MozTransition': 'transitionend',
          'OTransition': 'oTransitionEnd',
          'msTransition': 'MSTransitionEnd',
          'transition': 'transitionend'
        };

        return transEndEventNames[Modernizr.prefixed('transition')];
      };
    }
  });

})(jQuery);
/* global App, BrowserDetect */
///////////////////////////////////////////////////////////////////////////////
//    _____ _______ ____  _____  _                                           //
//   / ____|__   __/ __ \|  __ \| |                                          //
//  | (___    | | | |  | | |__) | |                                          //
//   \___ \   | | | |  | |  ___/| |                                          //
//   ____) |  | | | |__| | |    |_|                                          //
//  |_____/   |_|  \____/|_|    (_)                                          //
//                                                                           //
// If the answer to any of the following questions is 'No', please leave     //
// this file alone and modify the initializers instead.                      //
// Never ever modify the underlying player classes unless you know what      //
// you are doing.                                                            //
//                                                                           //
// - Do you need to manipulate the player UI for a particular browser?       //
// - Did you have to modify the player classes to achieve what you want?     //
// - Have you tried updating the template to make the required adjustements? //
// - Have you tried modifying the events map (options.events) to override/   //
//   add missing events on the UI?                                           //
// - Have you read the code including the Sass files in question?            //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

// TODO:
// * hidden player for certain browsers
//   and destroy references when hidden ?
// * conditional controls template
// * store player in data
// * add classes for each public method to indicate state:
//   playback-started, playing, stopped, loading, ...
// * exit fullscreen on close:hide
// Document & test:
// * Templates
// * IN: public methods (has to match what can be assigned via events map)
// * OUT: events emitted from plugin on trigger
// * OUT: classes assigned via events emitted from trigger (has to match events)

(function ($) {
  'use strict';

  /**
   * jQuery video plugin (v2)
   *
   * Convert DOM element into video player.
   * Uses href or data-video-url attribute to determine player type.
   * Find all possible options listed below.
   *
   * The player triggers events on the element:
   * - `videoready` when the player is set-up and all dependencies are loaded
   * - `videostart` when the player has begun playback
   * - `videostop` when the player has stopped or paused playback
   *
   * @example
   *  $('a.video').xvideo({ pluginVersion: 'latest' });
   *
   */
  $.plugin('xvideo', function () {
    this.VERSION = '2.0.0';

    var player, $playerUI, $overlay, $target, self = this, overlayCloseButtonClass = 'overlay-close', $closeButton, $videoFooter;

    this.options = {
      // overrides the URL set via $el's href attribute (if set)
      url: null,
      // show the player when $el is clicked or
      // automatically once the player is ready
      showOnClick: true,
      // automatically start playback
      autoStart: true,
      // show controls (play, pause etc.) for the player
      showNativeControls: false,
      // hide the player when the ESC key is pressed
      hideOnESC: false,
      // display an overlay over page to focus on video
      showOverlay: true,
      // hide $el when showing player
      hideTrigger: false,
      // close player when the overlay is clicked
      closeViaClickOnOverlay: true,
       // the player template, variables will be subsituted by
      // the player instance:
      // - playerID: a unique identifier for each player instance
      template: ['<div class="responsive-video">',
                   '<div id="%playerID%"></div>',
                   '<a class="close"></a>',
                 '</div>'].join(''),
      // the target for the template rendering
      // by default a div with class `video-player` is inserted after
      // $el and used
      target: null,
      // if an overlay is shown, assign this CSS class
      overlayClass: 'responsive-video-overlay',
      // if no $target has been supplied,
      // use this CSS class for the default div
      overlayTarget: null,
      targetClass: 'video-player',
      // add this class to the trigger if the browser
      // can show videos inline
      triggerClass: 'video-trigger',
      events: {
        'click .start'            : 'start',
        'click .stop'             : 'stop',
        'click .pause'            : 'pause',
        'click .toggle'           : 'toggle',
        'click .mute'             : 'mute',
        'click .unmute'           : 'unmute',
        'click .volume-toggle'    : 'toggleVolume',
        'click .enter-fullscreen' : 'enterFullscreen',
        'click .exit-fullscreen'  : 'exitFullscreen',
        'click .fullscreen-toggle': 'toggleFullscreen',
        'click .show'             : 'show',
        'click .hide'             : 'hide',
        'click .close'            : 'close'
      },
      // !DON'T USE THIS OPTION outside of a testing context!
      // will override the private function 'createPlayerForURL' to allow
      // mocking of the created player
      playerGenerator: null
    };

    /**
     * Initialize, pseudo constructor through $.plugin
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.init = function ($el) {
      // Override some user options if the current browser doesn't
      // support the underlying features
      if (!browserCan('autoStart')) {
        this.options.autoStart = false;
      }
      if (!browserCan('useCustomControls')) {
        self.options.showNativeControls = true;
      }

      // select a player class and initialize based on URL
      this.player = (self.options.playerGenerator || createPlayerForURL)({
        videoURL      : this.options.url || determineURLforElement($el),
        videoTitle    : determineVideoTitleForElement($el),
        template      : this.options.template,
        namespace     : this.namespace,
        showControls  : this.options.showNativeControls,
        autoStart     : this.options.autoStart,
        data          : $el.data('video') || {}
      });

      // delegate player events to UI
      $.each(['ready', 'start', 'stop', 'mute', 'unmute'], function (i, event) {
        self.player.on('player' + event, function (e) {
          self.$el.trigger(e.type.replace(/^player/, 'video'), [$playerUI, self.$el]);
        });
      });

      // initialize the UI once the player is good to go
      this.player.on('playerready', initPlayerUI);

      // when started, stop any other currently running player
      this.player.on('playerstart', function () {
        stopCurrent();
        App.Video.currentPlayer = self;
      });

      // create all necessary DOM elements, insert them etc.
      createPlayerUI();

      // set-up the player, has to happen after
      // the required DOM elements have been created
      this.player.build();

      // track how much of the video a user has been watching
      new App.Video.Analytics(this.player);
    };

    /**
     * Hide the UI and stop the player
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.hide = function ($el) {
      if (this.player.isPlaying()) { this.player.stop(); }
      hide();
      return this;
    };

    /**
     * Show the player UI
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.show = function ($el) {
      return show();
    };

    /**
     * Start the playback
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.start = function ($el) {
      this.player.start();
    };

    /**
     * Pause the playback
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.pause = function ($el) {
      this.player.pause();
    };

    /**
     * Stop the playback
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.stop = function ($el) {
      this.player.stop();
    };

    /**
     * Toggle the playback
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.toggle = function ($el) {
      this.player.isPlaying() ? this.pause() : this.start();
    };

    /**
     * Set volume to 0
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.mute = function ($el) {
      this.player.mute();
    };

    /**
     * Set volume back to level before muting
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.unmute = function ($el) {
      this.player.unmute();
    };

    /**
     * Toggle the volume between muted and unmuted
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.toggleVolume = function ($el) {
      this.player.isMuted() ? this.unmute() : this.mute();
    };

    /**
     * Enter fullscreen mode
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.enterFullscreen = function ($el) {
      $playerUI.fullScreen(true);
    };

    /**
     * Exit fullscreen mode
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.exitFullscreen = function ($el) {
      $playerUI.fullScreen(false);
    };

     /**
     * Toggle fullscreen mode
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.toggleFullscreen = function ($el) {
      $playerUI.fullScreen() ? this.exitFullscreen() : this.enterFullscreen();
    };

    /**
     * Hide the player and destroy it
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.close = function ($el) {
      hide();
      self.destroy(self.$el);
    };

    /**
     * Remove all events and UI created by the plugin
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.destroy = function ($el) {
      $el.off('.' + this.namespace).removeClass(self.options.triggerClass);
      
      $(document).off('.' + this.namespace); 
      $playerUI.remove();
      if ($videoFooter) { $videoFooter.remove(); }
      if ($overlay) { $overlay.remove(); }
      self.$el.removeData('xvideo');
      App.Video.currentPlayer = null;

      // Notify video overlay to re-bind the events
      self.$el.trigger('playerdestroyed', [$playerUI, self.$el]);
    };

    // -------------------------------------------------------------------------

    // if there's another player open and running, stop (and hide it)
    function stopCurrent() {
      if (App.Video.currentPlayer && App.Video.currentPlayer !== self) {
        App.Video.currentPlayer.stop();
        App.Video.currentPlayer.hide();
      }
    }

    // create UI and insert it into $target
    function createPlayerUI() {
      $target = $(self.options.target);

      if (!self.options.target) {
        $target = $('<div/>', { 'class': self.options.targetClass });
        $target.insertAfter(self.$el);
      }

      $playerUI = $(renderPlayerUI());
      $target.append($playerUI);

      // TODO: is this needed or only when lazyloading = false?
      hide();

      $closeButton = $playerUI.find('.close');
      // TODO: extract?
      self.$el.addClass(self.options.triggerClass);

      if (self.options.showOverlay) {
        createOverlay();
        setVideoFooter();
      }
    }

    // show and start the player directly or bind click events to do so
    // TODO: refactor
    function initPlayerUI() {
      // make sure that the UI knows that the player is ready
      $playerUI.addClass('ready');

      // show the player only on click
      if (self.options.showOnClick) {
        self.$el.on('click.' + self.namespace, function (e) {
          e.preventDefault();
          show();
          if (self.options.autoStart) { self.start(); }
        });

      // inline player
      } else {
        // TODO: why not show player here ?!
        // start the player if auto start is enabled
        if (self.options.autoStart) {
          self.start();
        // if autostart is not enabled, start the player
        // also when the trigger is clicked
        } else {
          self.$el.on('click.' + self.namespace, function (e) {
            e.preventDefault();
            self.toggle();
          });
        }

        // TODO: why?
        if (self.options.showNativeControls === false) {
          show();
        } else {
          $playerUI.find('.controls').hide();
        }
      }
      // attach events via the events map
      delegateUIEvents();

      // change CSS classes via event listeners on the trigger
      mapPlayerEventsToCSSClasses();

      // TODO: move?
      $(document).on('fullscreenchange.' + self.namespace, function () {
        var event = $playerUI.fullScreen() ? 'videoenterfullscreen' : 'videoexitfullscreen';
        self.$el.trigger(event, [$playerUI]);
      });

      // stop + hide when ESC key pressed
      if (self.options.hideOnESC) {       
        $(document).on('keyup.' + self.namespace, function (event) {
          if (event.which === 27) {
            event.preventDefault();
            self.close(self.$el);
          }
        });
      }

      // all done, video player is set-up
      // (player is not necessarily ready yet, though)
      self.$el.trigger('videoinitialized', [$playerUI, self.$el]);
    }

    // takes an event map of format { 'event selector': 'callback'|function }
    // and maps it to the UI
    function delegateUIEvents() {
      var eventSplitter = /^(\S+)\s*(.*)$/;

      for (var key in self.options.events) {
        // wrapping the binding portion into a closure will bind
        // the scope and all local variables with it
        (function () {
          var method    = self.options.events[key],
              match     = key.match(eventSplitter),
              eventName = match[1],
              selector  = match[2],
              inline    = Object.prototype.toString.call(method) !== '[object Function]';

          // has the callback been defined inline?
          // otherwise find and call method on instance as defined via value
          if (inline) { method = self[method]; }

          // no callback defined? exit
          if (!method) {
            $.error('jQuery.xvideo: no method defined for ' + eventName + ' on ' + selector + '.');
          }

          $playerUI.on(eventName, selector, function (event) {
            if (inline) { event.preventDefault(); }
            method.call(self, event);
          });
        })();
      }
    }

    // each event triggered on the $trigger should add or swap a class
    function mapPlayerEventsToCSSClasses() {
      // TODO: this should document also all events? does it?
      // TODO: move into options?
      var map = {
        'videoinitialized'    : { add: 'initialized',               remove: ''                   },
        'videostart'          : { add: 'started initially-started', remove: 'stopped'            },
        'videostop'           : { add: 'stopped',                   remove: 'started'            },
        'videomute'           : { add: 'muted',                     remove: 'unmuted'            },
        'videounmute'         : { add: 'unmuted',                   remove: 'muted'              },
        'videoenterfullscreen': { add: 'entered-fullscreen',        remove: 'exited-fullscreen'  },
        'videoexitfullscreen' : { add: 'exited-fullscreen',         remove: 'entered-fullscreen' }
      };

      for (var event in map) {
        (function () {
          var tasks = map[event];
          self.$el.on(event + '.' + self.namespace, function () {
            $playerUI.addClass(tasks.add).removeClass(tasks.remove);
          });
        })();
      }
      // setup, add some classes initially as baseline
      $playerUI.addClass('unmuted exited-fullscreen stopped');
      if (self.options.showOnClick) { $playerUI.addClass('overlaid'); }
    }

    // append overlay and attach events
    function createOverlay() {
      $overlay = $('<div/>', { 'class': self.options.overlayClass });

      $(self.options.overlayTarget || '#main').prepend($overlay);

      if (self.options.closeViaClickOnOverlay) {
        $overlay.on('click', function (e) {
          e.preventDefault();
          e.stopPropagation();
          self.close(self.$el);
        });
      }
    }

    // Find and append CTA link to videos in overlay
    function setVideoFooter() {
      var footer = self.$el.parent().find('.video-footer');

      if (footer.length > 0) {
        $videoFooter = footer.clone();
        $(self.options.target).append($videoFooter);
      }
    }

    // render the UI using the template and interpolate
    // the templateData coming from the player)
    function renderPlayerUI() {
      var data = self.player.templateData();
      return self.options.template.replace(/%([^%]+)%/g, function (_, key) {
        return data.hasOwnProperty(key) ? data[key] : '';
      });
    }

    // Show player
    // [Show overlay and scroll to player]
    // [Hide trigger]
    function show() {
      $playerUI.removeClass('hidden');

      if (self.options.showOverlay) { showOverlay();   }
      if (self.options.hideTrigger) { self.$el.hide(); }
    }

    // Hide player
    // [Hide overlay]
    // [Show trigger]
    function hide() {
      $playerUI.addClass('hidden');
      
      if (self.options.showOverlay) { hideOverlay();   }
      if (self.options.hideTrigger) { self.$el.show(); }
    }

    function showOverlay() {
      $overlay.show();
      if ($videoFooter) { $videoFooter.show(); }
      if (browserCan('fade')) {
        $overlay.css('opacity', 1).animate({ 'opacity': 0.85 });
      } else {
        $overlay.show().css('filter', 'alpha(opacity=85)');
      }

      scrollToPlayer();

      // Since you can't click anything on top of a video element on iOS,
      // move close button outside the player UI to allow clicks on the close button.
      if ($closeButton.length > 0 && !browserCan('useCustomControls')) {
        $closeButton.addClass(overlayCloseButtonClass).prependTo($('#container > #main'));

        // Rebind events
        $closeButton.on('click', function (e) {
          e.preventDefault();
          e.stopPropagation();
          self.close(self.$el);
        });
      }
    }

    function hideOverlay() {
      // might attempt hiding the player initially when
      // the overlay hasn't been generated yet
     
      if ($overlay) {
        // Trigger event to notify the slides plugin that an overlay is closed 
        // and slides should be shown
       
        self.$el.trigger('videostop', [$playerUI, self.$el]);
        $overlay.hide();
        if ($videoFooter) { $videoFooter.hide(); }

        if ($closeButton.length > 0 && $closeButton.hasClass(overlayCloseButtonClass)) {
          $closeButton.remove();
        }
      }
    }

    // Position player over overlay and slightly above
    // the trigger, then scroll into viewport center
    function scrollToPlayer() {
      // Get the trigger position
      var triggerOffset      = self.$el.offset().top,
          windowHeight       = $(window).height(),
          // calculate height in ratio:
          playerHeight       = $playerUI.outerWidth() * 0.5625,
          // offset of player top to trigger top:
          triggerAdjustment  = 10,
          // nodge off horizontal center towards top by:
          documentAdjustment = 16,
          horizontalCenter   = windowHeight / 2 - playerHeight / 2,
          scrollTop          = triggerOffset + documentAdjustment - horizontalCenter,
          offset             = triggerOffset - triggerAdjustment;

      $target.parent().css({ 'top': offset + 'px' });
      $('html, body').animate({ 'scrollTop': scrollTop });
    }

    // select the appropriate player type in the App.Video.Players namespace
    // based on the video URL
    function createPlayerForURL(options) {
      var player;
      if (/youtube/.test(options.videoURL)) {
        player = new App.Video.Players.Youtube(options);
      } else {
        player = new App.Video.Players.VideoJS(options);
      }
      return player;
    }

    // find video URL for $el either through it's href
    // or data-video-url attributes
    function determineURLforElement() {
      var url;
      if (self.$el.is('a') && self.$el.attr('href') !== undefined) {
        url = self.$el.attr('href');
      } else if ($el.data('video-url') !== undefined) {
        url = self.$el.data('video-url');
      }
      return url;
    }

    // find an appropriate title for $el
    // use URL as fallback
    function determineVideoTitleForElement() {
      var title;
      if (self.$el.attr('title') !== undefined) {
        title = self.$el.attr('title');
      } else {
        title = determineURLforElement(self.$el);
      }
      return title;
    }

    // wrapper for browser detection for brevity and
    // improved readability
    function browserCan(action) {
      var is = BrowserDetect;
      // TODO: extract into external table?
   
      switch (action) {
        case 'autoStart':
          return !($.inArray(is.OS, ['iPhone/iPod', 'iPad']) > -1);
          break;
        case 'showInlinePlayer':
          return !(is.browser === 'IEMobile');
          break;
        case 'fade':
          return !(is.browser === 'Explorer' && is.version < 9);
          break;
        case 'useCustomControls':
          // Add a whitelist of OS/Browsers that are support custom controls
          var supportedBrowser = $.inArray(is.browser, ['Chrome', 'Safari', 'Firefox', 'Mozilla']) > -1,
              supportedOS = $.inArray(is.OS, ['Mac', 'Windows']) > -1,
              supportedIE = is.browser === 'Explorer' && is.version > 7;

              return (supportedBrowser && supportedOS) || supportedIE;
          break;
        default:
          return true;
      }
      return true;
    }
  });
})(jQuery);
// This is wrapper-plugin that capsulates default functionality
// of video player 2.0.
//
// It has been created to contain generic code to init overlay video
// on page render or after ajax load.

(function() {
  function VideoDefaultInline($) {

    return function() {
      'use strict';

      var
        self = this,
        $el,
        is = BrowserDetect,
        isIOS = $.inArray(is.OS, ['iPhone/iPod', 'iPad']) > -1,
        supportedBrowser = $.inArray(is.browser, ['Chrome', 'Safari', 'Firefox', 'Mozilla']) > -1,
        supportedOS = $.inArray(is.OS, ['Mac', 'Windows']) > -1,
        supportedIE = is.browser === 'Explorer' && is.version > 7,
        useCustomControls = (supportedBrowser && supportedOS) || supportedIE,

        optionDefaults = {
        lazy               : true,
        autoStart          : false,
        showOnClick        : false,
        showOverlay        : false,
        showCloseButton    : false,
        hideTrigger        : false,
        //triggerClass       : 'inline-video-trigger',
        template           : ['<div class="xvideo xvideo-inline responsive-internal-video">',
                                '<span class="loading"></span>',
                                '<div class="xvideo-player-wrapper">',
                                  // We will use the native controls on iOS and Android,
                                  // no need to render the big toggle button here at all
                                  (useCustomControls ? '<a class="overlay-control toggle"><span></span></a>' : ''),
                                  '<div id="%playerID%" class="toggle">',
                                '</div>',
                                '</div>',
                                // We will use the native controls on iOS and Android
                                // no need to render the custom controls here at all
                                (useCustomControls ? '<div class="controls">' + App.VideoControls + '</div>' : ''),
                              '</div>'].join('')
        };

      this.bindPlayerEvents = function () {
        $el
          .on('videoinitialized.' + self.namespace, function (event, $ui, $trigger) {
            if (!useCustomControls) {
              // force visibility of the player
              $ui.addClass('show-player-element');
              // native play button needs to be initially hidden in youtube-videos but not with native videos
              if ($(this).hasClass('youtube-video')) { // TODO: find a better way
                $ui.find('.controls .toggle').hide();
              }
              $trigger.hide();
            }
          })
          .on('videostart.' + self.namespace, function (event, $ui, $trigger) {
            $trigger.hide();
            if (!useCustomControls) { $ui.find('.controls .toggle').show(); }
          });

        if (this.options.lazy) {
          self.initPlayer();

          $el.on('playerdestroyed', function (event, $ui, $trigger) {
            // Make the trigger visible again since video player hides it
            $trigger.show();
            self.initPlayer();
          });
        }
      }

      this.initPlayer = function() {
        $el.one('click', function(e) {
          e.preventDefault();
          
          // don't forward the click on iOS or Android as the OS requries
          // a real user interaction
          if (useCustomControls) {
            $el.one('videoinitialized', function() {
              setTimeout(function() {
                $el.trigger('click');
              }, 100);
            });
          }

          self.initVideo();
        });
      }

      this.unbindPlayerEvents = function() {
        $el.off('.' + this.namespace);
      }

      this.initVideo = function() {
        $el.xvideo(this.options)
      }

      this.init = function(el) {
        $el = $(el);
        this.options = $.extend({}, optionDefaults, this.options);
        this.bindPlayerEvents();

        if (!this.options.lazy) { this.initVideo(); }
      };

      this.destroy = function($el) {
        this.unbindPlayerEvents();
        $el.xvideo('close');
        $el.removeData('defaultInlineVideo');
      };
    }
  };

  $.plugin('defaultInlineVideo', VideoDefaultInline($));

})();
// This is wrapper-plugin that capsulates default functionality
// of video player 2.0.
//
// It has been created to contain generic code to init overlay video
// on page render or after ajax load.

(function() {
  function VideoDefaultOverlay($) {

    return function() {
      'use strict';

      var
      _self = this,
        $el,
        is = BrowserDetect,
        isIOS = $.inArray(is.OS, ['iPhone/iPod', 'iPad']) > -1,
        supportedBrowser = $.inArray(is.browser, ['Chrome', 'Safari', 'Firefox', 'Mozilla']) > -1,
        supportedOS = $.inArray(is.OS, ['Mac', 'Windows']) > -1,
        supportedIE = is.browser === 'Explorer' && is.version > 7,
        useCustomControls = (supportedBrowser && supportedOS) || supportedIE,

        option_defaults = {
          lazy: true,
          showOverlay: true,
          overlayTarget: null,
          hideTrigger: false,
          hideOnESC: true,
          target: '.overlay-video-container .wrapper',
          triggerClass: 'overlay-video-trigger',
          template: ['<div class="xvideo xvideo-overlay xvideo-responsive-video">',
                       '<div class="xvideo-player-wrapper">',
                         '<div id="%playerID%" class="toggle"></div>',
                       '</div>',
                       (useCustomControls ? '<div class="controls">' + App.VideoControls + '</div>' : ''),
                       // It seems like you can't click anything on top of a video element on iOS
                       // so there is no point rendering anything either.
                       '<a class="close" style="display: inline;"></a>',
                     '</div>'
          ].join('')
        };

      this.bindEvents = function () {
        if (this.options.lazy) {
          _self.initPlayer();

          $el.on('playerdestroyed', _self.initPlayer);
        }
      };

      this.initPlayer = function () {
        $el.one('click', function (e) {
          e.preventDefault();

          // start video when video is ready
          $el.one('videoinitialized', function () {
            setTimeout(function () {
              $el.trigger('click');
            }, 100);
          });

          _self.initVideo();
        });
      };

      this.unbindEvents = function () {
        $el.off('.' + this.namespace);
      };

      this.initVideo = function () {
        $el.xvideo({
          target: this.options.target,
          events: this.options.events,
          hideTrigger: this.options.hideTrigger,
          overlayTarget: this.options.overlayTarget,
          showNativeControls: this.options.showNativeControls,
          triggerClass: this.options.triggerClass,
          template: this.options.template,
          autoStart: useCustomControls,
          hideOnESC: this.options.hideOnESC
        });
      };

      this.init = function(el) {
        $el = $(el);
        this.options = $.extend({}, option_defaults, this.options);
        this.bindEvents();
        if (!this.options.lazy) {
          this.initVideo();
        }
      };

      this.destroy = function($el) {
        this.unbindEvents();
        $el.xvideo('destroy');
      };
    }
  };

  $.plugin('defaultVideoOverlay', VideoDefaultOverlay($));

})(jQuery);
/*global $, jQuery, window, util*/


window.App                         = window.App || {};
window.App.Plugin                  = window.App.Plugin || {};
window.App.Plugin.warrantyCheck  = function warrantyCheck($, win) {

  return function () {
    'use strict';

    var _self = this,
        $IMEIform,
        formAction = '',
        repairButtonElName = '.repair_case_button',
        walDeviceTokenCookieName = 'WAL_token',
        walReferrerCookieName = 'WAL_Referrer',
        walTypeDesignatorCookieName = 'WAL_td',
        warrantyCheckUrl,
        warrantyAndRepairInterval,
        IMEICollectionUrl,
        productSupportUrl;

    /**
     * Extract a value of a given request parameter from a current page url.
     * @param  {String} param
     * @return {String}
     */
    this.getRequestParam = function (param) {
      return decodeURI(window.location.search.replace(new RegExp('^(?:.*[&\\?]' + encodeURI(param).replace(/[\.\+\*]/g, '\\$&') + '(?:\\=([^&]*))?)?.*$', 'i'), '$1'));
    };

    this.getWalDeviceTokenCookie = function () {
      return $.cookies.get(walDeviceTokenCookieName) || '';
    };

    this.getTypeDesignator = function () {
      return $.cookies.get(walTypeDesignatorCookieName) || '';
    };

    this.getWalReferrerCookieName = function () {
      return $.cookies.get(walReferrerCookieName) || '';
    };

    this.IMEIisValid = function (data) {
      if (typeof data !== 'undefined' && typeof data.isValidIMEI !== 'undefined') {
        return data.isValidIMEI === 'Y';
      }

      return false;
    };

    /**
     * Add flow and pc(product designator) parameters to IMEI form target
     * @return {[type]}
     */
    this.appendParamsToIMEIForm = function () {
      if (window.isIMEIAhead && window.isCollectionWidget) {
        formAction = $IMEIform.attr('action');
        formAction += '&flow=troubleshooting&td=' + this.getTypeDesignator();
        $IMEIform.attr('action', formAction);
      }
    };

    /**
     * Redirects user to the given URL[redirect description]
     * @param  {[type]} url
     * @return {[type]}
     */
    this.redirect = function (url) {
      if (typeof url !== 'undefined') {
        window.redirectTriggered = 'Y';
        window.location.href = url;
      }
    };

    /**
     * Check that repair parameter is set to true
     * @return {[type]}
     */
    this.repairModeOn = function () {
      var repair = this.getRequestParam('repair');
      if (repair.length > 0 && repair === 'true') {
        return true;
      }

      return false;
    };
    
    /**
     * Retrieve product support URL for the current product and redirect to it
     * @param  {[type]} typeDesignator
     * @return {[type]}
     */
    this.redirectToSupportUrl = function (typeDesignator) {
      if (typeof productSupportUrl === 'undefined') {
        return;
      }

      var getUrlResponse = $.getJSON(productSupportUrl, { td: typeDesignator }),
          redirectUrl = _self.getSupportLandingPage();

      if (typeof typeDesignator !== 'undefined') {
        $.when(getUrlResponse)
        .done(
          // Response succeeded
          function (data) {
            if (typeof data !== 'undefined') {
              if (typeof data.supporturl !== 'undefined') {
                redirectUrl = data.supporturl;
              }
              
              if (typeof data.troubleshootingurl !== 'undefined') {
                redirectUrl = data.troubleshootingurl;
              }

              _self.redirect(redirectUrl);
            } else {
              _self.redirect(_self.getSupportLandingPage());
            }
          }
        )
        .fail(
          // Response failed
          function () {
            _self.redirect(_self.getSupportLandingPage());
          }
        );
      }
    };

    this.getSupportLandingPage = function () {
      // Support landing page url can be found by removing parameters and last / from the current url
      var newLoc = window.location.href.split(/\?|#/)[0].replace(/\/$/, ''),
        supportUrl = newLoc.substring(0, newLoc.lastIndexOf('/'));
        
      return (!supportUrl) ? 'undefined' : (supportUrl + '?redirected=true') ;
    };

    this.validateDeviceToken = function () {
      var deviceToken = this.getWalDeviceTokenCookie();

      if (deviceToken.length > 0) {
        return $.getJSON(warrantyCheckUrl, { token: this.getWalDeviceTokenCookie() });
      }
    };

    /**
     * Perform check after user inputs IMEI code
     * @return {[type]}
     */
    this.checkTypeDesignator = function () {
      if (_self.getTypeDesignator() === window.remoteTypeDesignator) {
        // Redirect to referrer set in the cookie
        _self.redirect(_self.getWalReferrerCookieName());
      } else {
        // Call API to retrieve product support urls and redirect to it
        _self.redirectToSupportUrl(window.remoteTypeDesignator);
      }
    };

    // This method is only called while on Warranty check page upon page load
    this.checkIMEI = function () {
      if (window.isIMEIAhead && this.repairModeOn()) {
        // Call WAL api / Check warranty for existing token
        $.when(this.validateDeviceToken())
        .done(
          // Response succeeded
          function (data) {
            if (_self.IMEIisValid(data)) {
              $IMEIform.trigger('showWarrantyAndRepair', [data]);
            } else {
              // Redirect to support landing page only if a device token present
              if (_self.getWalDeviceTokenCookie().length > 0) {
                _self.redirect(_self.getSupportLandingPage());
              }
            }
          }
        ).fail(
          // Response failed
          function () {
            // Remove cookies
            util.deleteWalCookies();
            // Redirect to the support landing page
            _self.redirect(_self.getSupportLandingPage());
          }
        );
      } else {
        this.appendParamsToIMEIForm();

        $IMEIform.find(':submit').on('click.imei_form_check', function () {
          warrantyAndRepairInterval = setInterval(_self.warrantyAndRepairVisible, 100);
          $(this).off('.imei_form_check');
        });
      }
    };

    // This method is only called while on troubleshooting page
    this.checkDeviceToken = function () {

      // Set the WAL_referer and WAL_td cookies so that we know where to redirect back after IMEI collection (if applicable)
      var currentWindowLocation = window.location.href;
      currentWindowLocation = currentWindowLocation.replace("redirected=true","");
      $.cookies.set(walReferrerCookieName, currentWindowLocation, _self.setCookieOptions());
      if(typeof window.typeDesignator !== 'undefined') {
        $.cookies.set(walTypeDesignatorCookieName, window.typeDesignator, _self.setCookieOptions());
      }

      // Validate WAL device token cookie with WAL care service
      $.when(this.validateDeviceToken())
      .done(
        // Response succeeded
        function (data) {
          // Two conditions to be checked.
          // First the token must be valid
          // Secondly, if the current page has a typeDesignator in the context, the remote typeDesignator should match it
          // If any of these conditions fail, it should cause a redirect.
          if(!(_self.IMEIisValid(data) && (typeof window.typeDesignator === 'undefined' || window.typeDesignator === data.typeDesignator))) {
            // Okay, redirect to IMEI collection page
            _self.redirect(IMEICollectionUrl); 
          }
        }
      ).fail(
        // Response failed
        function () {
          $.cookies.set(walReferrerCookieName, window.location.href, _self.setCookieOptions());
          _self.redirect(IMEICollectionUrl);
        }
      );
    };

    this.setCookieOptions = function () {
      var date = new Date(),
          cookieOptions = {
          expiresAt: date.setTime(date.getTime() + (60 * 60 * 1000)), // Set expiration to one hour
          domain: util.getCookieDomain()
        };

      return cookieOptions;
    };

    /**
     * Check when the user has submitted valid IMEI and repair button is visible
     * @return {[type]}
     */
    this.warrantyAndRepairVisible = function () {
      if (window.remoteCallComplete == "OK") {
        _self.stopMonitoring();

        if (window.isIMEIAhead && window.isCollectionWidget) {
          _self.checkTypeDesignator();
        }
      }
    };

    this.stopMonitoring = function () {
      clearInterval(warrantyAndRepairInterval);
      warrantyAndRepairInterval = undefined;
    };

    this.init = function (el) {
      if (window.isCollectionWidget) {
        // Plugin initialized on a warranty check page
        $IMEIform = $('.imei_status_check form');
        warrantyCheckUrl = $IMEIform.attr('action');
        productSupportUrl = window.productSupportUrl;

        this.checkIMEI();
      } else if (window.isTokenProtectionEnabled && window.isIMEIAhead) {
        // Plugin initialized on a troubleshooting page
        $.cookies.set(walTypeDesignatorCookieName, window.typeDesignator, _self.setCookieOptions());
        warrantyCheckUrl = window.warrantyCheckUrl;
        IMEICollectionUrl = window.IMEICollectionUrl;

        this.checkDeviceToken();
      }
    };

    this.destroy = function () {
    };
  };
};

jQuery.plugin('warrantyCheck', window.App.Plugin.warrantyCheck(jQuery, $(window)));
(function() {


}).call(this);


App.namespace('Video', function(namespace) {
  
  'use strict';
  
  /**
   * Analytics
   *
   * Keeps track of how much of a video shown through
   * a `player` has been watched and reports the numbers
   * via `window.utag` to the analytics server.
   *
   * This class requires the `player` to implement the methods
   * '#videoInfo', `#currentTime` and `#totalTime` as well as trigger
   * events `start` (when the playback begins) and `stop` (when the
   * playback ends).
   *
   * @constructor
   * @param {player} player - The player to keep track of.
   * @example
   *   new namespace.Analytics(player);
   */
  namespace.Analytics = function(player) {
    if (!window.hasOwnProperty ||
         window.hasOwnProperty('utag') === false ||
         window.hasOwnProperty('utag') === undefined) {
      return;
    }

    this.player           = player;
    this.percentagePlayed = 0;
    this.isTracking       = false;

    this.player.on('playerstart', this.startTracking.bind(this));
    this.player.on('playerstop', this.stopTracking.bind(this));
  };

  /**
   * Calls `#trackTime` on a regular interval.
   * Stores interval reference.
   */
  namespace.Analytics.prototype.startTracking = function() {
    if (this.isTracking) { return; }

    // ensure a 100 ticks per video, no matter how short
    var interval = Math.floor(this.player.totalTime() * 10);

    this.tick = setInterval((function() {
      this.trackTime();
    }).bind(this), interval);

    this.isTracking = true;
  };

  /**
   * Removes interval, don't call `#trackTime` anymore.
   */
  namespace.Analytics.prototype.stopTracking = function() {
    if (this.isTracking && this.tick !== undefined) {
      clearInterval(this.tick);
      this.isTracking = false;
    }
  };

  /**
   * Requests the current time the player's playhead is at.
   * Converts time to percentage value in relation to the total length
   * of the video.
   * Compares percentage with previously recorded highest value,
   * if the video has been fully watched or the calculated value is
   * higher and exceeds one of four markers (25%, 50%, 75% and 99%)
   * inform the analytics server.
   */
  namespace.Analytics.prototype.trackTime = function() {
    var time = this.player.currentTime();
    var percentagePlayed = Math.ceil(time * 100.0 / this.player.totalTime());

    if (percentagePlayed >= 99) {
        this.report('video complete');
        this.percentagePlayed = 100;
        this.stopTracking();
    } else {
      if (percentagePlayed > this.percentagePlayed) {
        percentagePlayed = Math.floor(percentagePlayed / 25.0) * 25;
        this.report('video ' + (percentagePlayed === 0 ? 'start' : percentagePlayed));
        this.percentagePlayed = percentagePlayed + 25;
      }
    }
  };

  /**
   * Pings the analytics server about an event.
   * @param {string} event
   * @param {string} [message]
   */
  namespace.Analytics.prototype.report = function(event, message) {
    window.utag.link({
      link_id  : this.player.videoInfo().url,
      link_text: message || event,
      linkEvent: event,
      videoName: this.player.videoInfo().title
    });
  };

});
'use strict';

App.namespace('Video', function(namespace) {

  $ = jQuery;

  /**
   * Video Player super class
   *
   * Provides a common interface for new Video player classes.
   * Don't instantiate this class directly but rather extend it
   * when defining your player type, using `Object.create`.
   * Will throw errors for instance methods which haven't been
   * implemented
   *
   * @constructor
   * @param {object} options - Player options, show controls, etc..
   * @example
   *   MyPlayer = function(options) {
   *     // call to super constructor
   *     namespace.Player.call(this, options);
   *   }
   *   MyPlayer.prototype = Object.create(namespace.Player.prototype);
   *   // Define your own instance methods on `MyPlayer.prototype`
   */
  namespace.Player = function(options) {
    this.options = options;
    this.player  = {};

   // sanity check
    if (!this.options.videoURL) {
      $.error('No video URL provided.');
    }
  };

  /**
   * Convenience wrapper for jQuery's event binding,
   * binds a namespaced event for the player instance at hand
   * @param {string} event - Name of the event.
   * @param {function} callback - Call when the event is triggered.
   * @example
   *   player.on('start', function() {
   *     $.log('Player started');
   *   });
   */
  namespace.Player.prototype.on = function(event, callback) {
    $(document).on([event, this.playerID()].join('.'), callback);
  };


  /**
   * Convenience wrapper for jQuery's event triggering,
   * triggers a namespaced event for the player instance at hand
   * @param {string} event - Name of the event.
   * @param {object} [data]- Data to pass along with the event.
   * @example
   *   player.trigger('start');
   */
  namespace.Player.prototype.trigger = function(event, data) {
    $(document).trigger([event, this.playerID()].join('.'), [data]);
  };


  /**
   * Convenience method for e.g. the analytics instance
   * @returns {object}
   */
  namespace.Player.prototype.videoInfo = function() {
    return {
      title: this.options.videoTitle,
      url: this.options.videoURL
    };
  };

  /**
   * Creates an unqiue identifer for a player instance
   * @returns {string}
   * @example
   *   // returns 'ytvideo-UUx10KOWIE-video-1'
   *   player.playerID();
   */
  namespace.Player.prototype.playerID = function() {
    return [
      this.playerNamespace(),
      this.videoID(),
      this.options.namespace
    ].join('-');
  };


  /**
   * Define template data for player, used when rendered the player UI
   * @returns {object} template data
   */
  namespace.Player.prototype.templateData = function() {
    return { playerID: this.playerID() };
  };


  // Interface for sub classes ------------------------------------------------

  // All of these methods will throw errors informing that the inheritor
  // doesn't implement them when called.

  /**
   * @abstract
   */
  namespace.Player.prototype.build = function() {
    return $.error('#build is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.playerNamespace = function() {
    return $.error('#playerNamespace is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.currentTime = function() {
    return $.error('#currentTime is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.totalTime = function() {
    return $.error('#totalTime is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.start = function() {
    return $.error('#start is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.stop = function() {
    return $.error('#stop is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.pause = function() {
    return $.error('#pause is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.isPlaying = function() {
    return $.error('#isPlaying is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.mute = function() {
    return $.error('#mute is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.unmute = function() {
    return $.error('#unmute is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.isMuted = function() {
    return $.error('#isMuted is not implemented.');
  };

  /**
   * @abstract
   */
  namespace.Player.prototype.videoID = function() {
    return $.error('#videoID is not implemented.');
  };

});
'use strict';

// TODO: Move out, do properly or something
// We can't change the world, we can only change ourselves.
window.App.slowConnection = window.slowConnection;

App.namespace('Video.Players', function(namespace) {

  $ = jQuery;

  /**
   * Video.js Player
   *
   * Wraps the Video.js (http://videojs.com/) player provided
   * and equalizes it's functionality for usage with the
   * jQuery video plugin (2.0.0).
   * .
   * @constructor
   * @param {object} options - Player options, show controls, etc..
   * @augments App.Video.Player
   * @example
   *  var player = new namespace.Youtube();
   *  player.on('ready', player.start);
   *
   */
  namespace.VideoJS = function(options) {
    // call super constructor
    App.Video.Player.call(this, options);
  }

  // Inheritance
  namespace.VideoJS.prototype = Object.create(App.Video.Player.prototype);

  /**
   * Main set-up for instance.
   * Loads the API unless it's already loaded via `#loadAPI`.
   * Creates the actual player, attaches event handlers and
   * finally triggers a ready event.
   */
  namespace.VideoJS.prototype.build = function() {
    var self = this;

    // set-up required DOM nodes for the player
    this.createDOM();

    // define Flash fallback location
    // Video JS flash file now is located in production environment in a static URL
    //videojs.options.flash.swf = 'http://vjs.zencdn.net/c/video-js.swf';
    videojs.options.flash.swf = 'http://r.nokia.com/r/latest/assets/video-js.swf'; 

    // allow developer to force flash usage
    if (this.options.data._dev && this.options.data._dev.forceFlash) {
      videojs.options.techOrder = ['flash', 'html5'];
    }

    // initialize player and set ready-handler
    videojs(self.playerID() + '-player', {}, function() {
      // TODO: fix or move this! This is a temporary fix for IE8
      // I couldn’t get it to work in the plugin itself without screwing up the layout.
      // It seems like the playerready event causes some calculations which would need to be redone
      // The best way would be to solve this via styles only without using !important
      // Another option could be to trigger resize on the player frame and let the player resize itself
      var $player = $('#'+self.playerID() + '-player');
      if ($player.hasClass('video-js') && $player.parents().find('.overlay-video-container').length)
        $player.css('height', 'auto');

      self.player = this;

      this.on('play', function() {
        self.trigger('playerstart');
      });

      this.on('pause', function() {
        self.trigger('playerstop');
      });

      self.trigger('playerready');
    });
  };

  /**
   * Create <video/> and <source/> tags
   * required by VideoJS and inserts it into target
   * with id of this.playerID
   */
  namespace.VideoJS.prototype.createDOM = function() {
    var $video = $('<video/>').attr({
      'id'        : this.playerID() + '-player',
      'class'     : 'video-js',
      'controls'  : this.options.showControls,
      'preload'   : 'none'
    });

    var self      = this,
        formats   = this.formats();

    // if no formats have been defined
    // the video url will provide the only source
    if (!formats.length) {
      // extract file format from url to be able to build the type
      var format = this.options.videoURL.match(/\.([0-9a-z]+)(?:[\?#]|$)/i)[1];
      var $source = $('<source/>').attr({
        'type'    : self.type(format),
        'src'     : self.options.videoURL
      });
      $video.append($source);

    } else {
      $.each(formats, function(i, format) {
        var $source = $('<source/>').attr({
          'type'    : self.type(format),
          'src'     : self.selectSizeURL.call(self, format)
        });
        $video.append($source);
      });
    }

    $('#' + this.playerID()).append($video);
  };

  /**
   * Defines classes name space, used in e.g. `#playerID`
   * @returns {string} namespace
   */
  namespace.VideoJS.prototype.playerNamespace = function() {
    return 'videojs';
  };

  /**
   * Remove extension from `videoURL`
   * @returns {string} base path
   * @example
   *   // for videoURL: "/foo/bar/bat.mp4"
   *   -> "bat"
   */
  namespace.VideoJS.prototype.fileBase = function() {
    return this.options.videoURL.match(/([^\/]+)(?=\.\w+$)/)[0];
  }

  /**
   * Retrieve available video formats from data
   * @returns {array} formats
   */
  namespace.VideoJS.prototype.formats = function() {
    var formats = [],
        versions;
    if (!this.options.data || !(versions = this.options.data.versions)) {
      return formats;
    }

    // the formats are basically just the keys of the data
    for(var format in versions) {
      if (versions.hasOwnProperty(format)) { formats.push(format); }
    }
    return formats;
  };

  /**
   * Retrieve available video sizes from data
   * @returns {array} sizes
   */
  namespace.VideoJS.prototype.sizes = function() {
    var sizes   = [],
        formats = this.formats(),
        data;
    // all formats must support all sizes so we can just check
    // which sizes the first format supports as it must be
    // representative for all other formats
    if (!formats.length || !(data = this.options.data.versions[formats[0]])) {
      return sizes;
    }

    for(var size in data) {
      if (data.hasOwnProperty(size)) { sizes.push(size); }
    }

    // ensure we only return integers
    sizes = $.map(sizes, function(size) { return parseInt(size, 10); });

    return sizes;
  };

  /**
   * Pick an appropriate URL from the options based on format
   * and size return by `this.size()`
   * @returns {string} source URL
   */
  namespace.VideoJS.prototype.selectSizeURL = function(format) {
    var size = this.size();
    return this.options.data.versions[format][size];
  };

  /**
   * Select an appropriate size for the video based on
   * the window's width from the available sizes
   * @returns {null|integer} size or null if no sizes available
   */
  namespace.VideoJS.prototype.size = function() {
    var containerWidth,
        available = this.sizes().slice(0).sort(function(a, b) { return a - b; });

    // no sizes have bene defined
    if (!this.sizes().length) { return null; }

    // if order IE, use predefined screen size
    // TODO: move out into initializer, just pass approriate options for IE<=7!
    if (BrowserDetect.browser === 'Explorer' && BrowserDetect.version <= 7) {
      containerWidth = 1024;
    } else {
      containerWidth = $(window).width();
    }

    // connection has been detected to be slow, use smaller sizes
    if (App.slowConnection) {
      var max = this.options.data.slowConnectionMaxSize;
      if (max !== undefined) {
        // if a max size has been defined, use all sizes beneath that limit
        available = $.grep(available, function(el) { return el <= max; });
      } else {
        // else just use the smallest (first) size
        available = available[0];
      }
    }

    var pointer = available.shift();
    while (pointer < containerWidth && available.length > 0) {
      pointer = available.shift();
    }
    return pointer;
  };

  /**
   * Look-up proper video type by format
   * @param {string} format - A file extension
   * @returns {string} type
   */
  namespace.VideoJS.prototype.type = function(format) {
    //var extension = this.options.videoURL.match(/.*\.(.*)+$/)[1];
    var extensionTypeMapping = {
      'ogv': 'video/ogg',
      'mp4': 'video/mp4',
      //'mp4': 'video/x-m4v', // IE testing
      'webm': 'video/webm'
    };
    if (extensionTypeMapping.hasOwnProperty(format)) {
      return extensionTypeMapping[format];
    }
    $.error('[VideoJS player] No type mapping found for format "' + format + '"');
  };

 /**
   * Extracts Youtube video ID from `videoURL`
   * @returns {string} video ID
   */
  namespace.VideoJS.prototype.videoID = function() {
    return this.fileBase().replace(/\W/g, '-');
  };

  /**
   * Get the current position of the playhead.
   * @returns {integer} current time
   */
  namespace.VideoJS.prototype.currentTime = function() {
    return this.player.currentTime();
  };

  /**
   * Get the full length of the video.
   * @returns {integer} total duration
   */
  namespace.VideoJS.prototype.totalTime = function() {
    return this.player.duration();
  };

  /**
   * Start playback.
   */
  namespace.VideoJS.prototype.start = function() {
    this.player.play();
  };

  /**
   * Stop playback.
   */
  namespace.VideoJS.prototype.stop = function() {
    this.player.pause();
  };

  /**
   * Pause playback.
   */
  namespace.VideoJS.prototype.pause = function() {
    this.player.pause();
  };

  /**
   * Get state of player - currently playing?
   * @return {Boolean} playing?
   */
  namespace.VideoJS.prototype.isPlaying = function() {
    //return !this.player.paused();
    return this.player.paused !== undefined && !this.player.paused();
  };

  /**
   * Set the player volume to 0
   */
  namespace.VideoJS.prototype.mute = function() {
    this.previousVolume = this.player.volume();
    this.player.volume(0);
    this.trigger('playermute');
  };

  /**
   * Set volume back to previous volume level
   */
  namespace.VideoJS.prototype.unmute = function() {
    this.player.volume(this.previousVolume || 0.5);
    this.previousVolume = null;
    this.trigger('playerunmute');
  };

  /**
   * Get state of player - currently muted?
   * @return {Boolean} muted?
   */
  namespace.VideoJS.prototype.isMuted = function(f) {
    return parseFloat(this.player.volume(), 10) === 0;
  };

});
'use strict';

App.namespace('Video.Players', function(namespace) {

  $ = jQuery;

  /**
   * Youtube Player
   *
   * Wraps the iframe player provided through the Youtube player
   * API and equalizes it's functionality for usage with the
   * jQuery video plugin (2.0.0).
   * .
   * @constructor
   * @param {object} options - Player options, show controls, etc..
   * @augments App.Video.Player
   * @example
   *  var player = new namespace.Youtube();
   *  player.on('ready', player.start);
   *
   */
  namespace.Youtube = function(options) {
    // call super constructor
    App.Video.Player.call(this, options);
  };

  // Inheritance
  namespace.Youtube.prototype = Object.create(App.Video.Player.prototype);

  /**
  * Main set-up for instance.
  * Loads the Youtube API unless it's already loaded via `#loadAPI`.
  * Creates the actual player via `#createPlayer`.
  * Attaches an `onReady` handler and as it's callback an 'onStateChange' handler to communicate player states.
  * Finally triggers a ready event.
  */
  namespace.Youtube.prototype.build = function() {
    this.loadAPI(function() {
      var self = this;

      self.player = this.createPlayer();

      // events
      self.player.addEventListener('onReady', function(){
        // TODO: move into method?
        self.player.addEventListener('onStateChange', function(event) {
          switch (event.data) {
            case YT.PlayerState.ENDED:
            case YT.PlayerState.PAUSED:
            case YT.PlayerState.CUED:
              self.trigger('playerstop');
              break;
            case YT.PlayerState.PLAYING:
              self.trigger('playerstart');
              break;
          }
        });

        self.trigger('playerready');
      });
    });
  };


  /**
   * Defines classes name space, used in e.g. `#playerID`
   * @returns {string} namespace
   */
  namespace.Youtube.prototype.playerNamespace = function() {
    return 'ytvideo';
  };


  /**
   * Extracts Youtube video ID from `videoURL`
   * @returns {string} video ID
   */
  namespace.Youtube.prototype.videoID = function() {
    return this.options.videoURL.match(/[\\?&]v=([^&#]*)/)[1];
  };


  /**
   * Creates the actual player using the Youtube API
   * @returns {object} instance of `YT.Player`
   */
  namespace.Youtube.prototype.createPlayer = function() {
    // build iframe and insert to avoid some security issues
    return new YT.Player(this.playerID(), {
      videoId   : this.videoID(),
      playerVars: {
        wmode         : 'opaque',
        autohide      : 1,
        enablejsapi   : 1,
        rel           : 0,
        iv_load_policy: 1,
        autoplay      : 0,
        cc_load_policy: 1,
        modestbranding: 1,
        showinfo      : 0,
        color         : 'white',
        origin        : window.location.protocol + '//' + window.location.host,
        fs            : 1,
        controls      : this.options.showControls ? 1 : 0,
        theme         : 'light'
      }
    });
  };


  /**
   * Load the Youtube API by attaching a new script tag
   * unless already loaded. Callback will always be called
   * in scope of the instance.
   * @param {function} callback
   */
  namespace.Youtube.prototype.loadAPI = function(callback) {
    if (!namespace.Youtube.apiLoaded) {
      $('<script/>', { src: '//www.youtube.com/player_api' })
        .insertBefore($(document).find('script:first'));

      // to avoid race conditions and multiple API includes, set a flag
      // when loading the API for the first time
      namespace.Youtube.apiLoaded = true;
    }

    if (typeof YT == 'undefined') {
      // since the YT API calls a function on window when ready
      // instead of triggering an event, we have queue previously bound
      // callbacks and call them in row
      var existingCallback = window.onYouTubePlayerAPIReady;
      window.onYouTubePlayerAPIReady = (function() {
        if (typeof existingCallback !== 'undefined') { existingCallback(); }
        callback.apply(this);
        this.ready = true; // TODO: still needed?
      }).bind(this);

    } else {
      callback.apply(this);
    }
  };


  /**
   * Get the current position of the playhead.
   * @returns {integer} current time
   */
  namespace.Youtube.prototype.currentTime = function() {
    return this.player.getCurrentTime();
  };


  /**
   * Get the full length of the video.
   * @returns {integer} total duration
   */
  namespace.Youtube.prototype.totalTime = function() {
    return this.player.getDuration();
  };


  /**
   * Start playback.
   */
  namespace.Youtube.prototype.start = function() {
    if (this.player.playVideo !== undefined) { this.player.playVideo(); }
  };


  /**
   * Stop playback.
   */
  namespace.Youtube.prototype.stop = function() {
    if (this.player.stopVideo !== undefined) { this.player.stopVideo(); }
  };


  /**
   * Pause playback.
   */
  namespace.Youtube.prototype.pause = function() {
    if (this.player.pauseVideo !== undefined) { this.player.pauseVideo(); }
  };

  /**
   * Get state of player - currently playing?
   * @return {Boolean} playing?
   */
  namespace.Youtube.prototype.isPlaying = function() {
    return this.player.getPlayerState !== undefined && this.player.getPlayerState() === 1;
  };

  /**
   * Set the player volume to 0
   */
  namespace.Youtube.prototype.mute = function() {
    this.player.mute();
    this.trigger('playermute');
  };

  /**
   * Set volume back to previous volume level
   */
  namespace.Youtube.prototype.unmute = function() {
    this.player.unMute();
    this.trigger('playerunmute');
  };

  /**
   * Get state of player - currently muted?
   * @return {Boolean} muted?
   */
  namespace.Youtube.prototype.isMuted = function() {
    return this.player.isMuted();
  };

});

/*
 * Nokia Account authentication implementation
 */


window.App = window.App || {};

App.NokiaAccount = function () {
  // Not until NoA supports CORS
  //this.useCORS = $.support.cors;
  this.useCORS = false;
}

// If login is required on this page, then check if the user is logged in and redirect to login page if not
App.NokiaAccount.prototype.loginCheck = function() {
  if (I18n.noa.loginRequired) {
    this.isLoggedIn(this.stayOnCurrentPage, this.redirectToLoginPage);
  }
}

// Check if the user is currently logged in, based on  AJAX call (or JSONP) to WAL
App.NokiaAccount.prototype.isLoggedIn = function(trueCallback, falseCallback) {
  $.ajax({
    url : 'https://' + window.location.hostname + '/wal/account/isLoggedInWithPassive',
    dataType : this.useCORS ? "json" : "jsonp",
    cache : true,
    xhrFields: {
      withCredentials: true
    },
    success : function(data) {
      if (data == true) {
        trueCallback();
      } else {
        falseCallback();
      }
    }
  });
}

App.NokiaAccount.prototype.stayOnCurrentPage = function() {
  // Nothing here
}

App.NokiaAccount.prototype.redirectToLoginPage = function() {
  window.location = I18n.noa.loginUri;
}

// Show the Login Widget (Nokia Account Embedded UI)
App.NokiaAccount.prototype.showLogin = function() {
  var self = this;

  // Get Nokia Account settings from WAL
  $.getJSON('/wal/account/settings', function(settings) {

    // Nokia Account object
    self.redirectUri = decodeURIComponent((location.search.match(RegExp("[?|&]redir=(.+?)(&|$)"))||[,null])[1]);
    self.orientation = self.getOrientation();

    // asynchronously load Nokia Account SDK script
    self.getScriptCached(settings.accountUrl + '/js/v1/sdk.js', function() {

      self.$target = $('section.nokia-account-login');

      // initiate Nokia Account SDK for further use, different instances will share this part of the configuration
      self.sdk = new NOKIA.sso.SDK();
      self.sdk.init({
        authenticationMethod: settings.nokiaAccountAuthenticationMethod,
        callbackUrl: settings.nokiaAccountCallbackUrl,
        serviceId: settings.nokiaAccountServiceId,
        oauth2ClientId: settings.nokiaAccountConsumerKey,
        oauth2RedirectUri: settings.nokiaAccountBaseUrl + settings.nokiaAccountSuccessUrl
      });
      NOKIA.sso.Logging.setEnabled(true);

      var sdkOpts = {
        uiMode: "lightbox",
        branding: false,
        lang: document.documentElement.lang,
        frameType: self.orientation,
        businessMessage: I18n.noa.loginMessage
      };
  
      self.sdk.registerCallback("authentication", function(data) {
        //console.log("redirect me now to " + self.redirectUri);
        var a = document.createElement("a");
        a.href = self.redirectUri;
        var hostname = a.hostname;
        // Allow redirects only to somewhere in nokia.com
    	if (typeof hostname === "undefined" || hostname === "" || hostname.indexOf(".nokia.com") === hostname.length - 10) {
          window.location = self.redirectUri;
    	}
      });
  
      self.sdk.registerCallback("newFrame", function(data) {
        self.$target.find(".content-wrapper").append('<iframe class="' + self.orientation + '" frameBorder="0" style="display:none" src="' + data["url"] + '" name="NoA-frame"></iframe>');
        self.$target.find(".content-wrapper iframe").show();
      });

      self.sdk.registerCallback("resizeFrame", function(data) {
        $('iframe[name=NoA-frame]').height(data["height"]);
      });

      $(window).on('resize', $.debounce(function() {
        var oldOrientation = self.orientation;
        self.orientation = self.getOrientation();
        if (self.orientation != oldOrientation) {
          $('iframe[name=NoA-frame]').remove();
          sdkOpts.frameType = self.orientation;
          self.sdk.performSignIn(sdkOpts);
        }
      }, 100));

      self.sdk.registerCallback("close", function(data) {
        $('iframe[name=NoA-frame]').remove();
        self.sdk.performSignIn(sdkOpts);
      });

      // if we're on login page, failure does nothing -> NOA shows a message
      self.sdk.registerCallback("failure", function(data) {
        //console.log(data, data.reason);
      });
  
      // Login is required, so open the actual login widget
      self.sdk.performSignIn(sdkOpts);
    });
  });
}

App.NokiaAccount.prototype.getOrientation = function() {
  return ($(window).width() > 1024) ? "embedded_landscape" : "embedded_portrait";
}

App.NokiaAccount.prototype.getScriptCached = function(url, success) {
  return $.ajax({
    url : url,
    cache : true,
    dataType : "script",
    success : success
  });
}

var nokiaAccount = new App.NokiaAccount();

// If login is required on this page, then check if the user is logged in and redirect to login page if not
nokiaAccount.loginCheck();

// If this is the login page, then show the Nokia Account Embedded UI
if ($('.nokia-account-login.gray').length > 0) {
  nokiaAccount.showLogin();
}
;
/* global $ */


var util = {
  /* Static function for extending JS objects */
  /* Input: ({x:1, a:{y:2}}, "a.b.c", 3), Output: {x:1, a:{y:2, b:{c:1}}}, Return: true */
  /* Input: ({x:1}, "x.a", 1), Output: unchanged, Return: false */
  createLeafValue: function (obj, key, val) {
    var fields = key.split('.'),
      current = obj,
      i;

    for (i = 0; i < fields.length - 1; i++) {
      if (current[fields[i]] === undefined)
        current[fields[i]] = {};
      else if (typeof(current[fields[i]]) !== 'object')
        return false;
      current = current[fields[i]];
    }
    current[fields[i]] = val;
    return true;
  },

  /**
   * Clear WAL related cookies 
   */
  deleteWalCookies: function () {
    var walCookies = $.cookies.filter(/^WAL/);

    if (typeof walCookies === 'object') {
      for (var cookie in walCookies) {
        if (walCookies.hasOwnProperty(cookie)) {
          $.cookies.del(cookie, { domain: util.getCookieDomain() });
        }
      }
    }
  },

  getCookieDomain: function () {
    return (/nokia.com/.exec(window.location.hostname) === null) ? '' : '.nokia.com';
  }
};
$(function() {
  //console.profile();

  $('noscript').remove();

  // Execute whatever is in window.onloadFunctions
  $(window.onloadFunctions).each(function() { this(); });

  $('body').append('<div class="overlay-video-container"><div class="wrapper"></div></div>');

  // IE6-8 detection
  var legacyIE = BrowserDetect.browser == 'Explorer' && BrowserDetect.version <= 8;

  // Limit animation framerate to 20fps
  $.fx.interval = 30;

  $('aside.aside-navigation').stickyNavigation();

  if (!legacyIE) {
    // IE6/7 issue: disable because if there are two select boxes, the z-indexes mess up as dropdowns have parents with relative poisitioning.
    $('select.enh-select').enhanceSelect({'showEmptyValues': true});
  }

  // Cookie notification
  $('#container').cookieNotification();
  
  // Sitewide survey (enabled in tag container)
  //$('#container').sitewideSurveyTest();

  // Product link (no section.product-link reference -> ie8)
  // $('.product-link').productLink();

  // Product links widget (remove at some point $('.product-link').productLink();)
  $('.w-product-links-trigger').enhanceToggle({ silent: true, closeOnClickOutside: true});
  $('.w-product-links').productLinks({ pid: 'some id', selectorURL: "some url" });

  // Product Availability Notifier
  $('section.product-notifier').productAvailabilityNotifier();

  // Open the social sharing in popup
  if($('.social-sharing').length > 0) {
    $('.social-sharing > li > a').each(function(i) {
      $(this).on('click', function(event) {
        window.open($(this).attr('href'), 'social_sharing', 'status=no,toolbar=0,resizable=1,width=700,height=680,top=0,left=0,location=1');
        event.preventDefault();
      });
    });
  }

  // Social sharing functionality
  $('#main').on('click', '.w-social-sharing-item > a', function(e){    
    // Open link in popup, if it is of type social
    if(!$(this).hasClass('w-social-sharing-open')){
      e.preventDefault();
      window.open($(this).attr('href'), 'social_sharing', 'status=no,toolbar=0,resizable=1,width=700,height=680,top=0,left=0,location=1');
    }
  });

  // Default image mapping for adaptive images
  window.defaultImageMap = [
    { key: 'xs',      value: 160  }, // 160  (low-end)  -> 159
    { key: 's',       value: 320  }, // 320  (smartphone-portrait)  -> 319
    { key: 'm',       value: 480  }, // 480  (smartphone-landscape) -> 639 (we don't adapt images for the tablet lite breakpoint (640))
    { key: 'l',       value: 768  }, // 768  (tablet-landscape)     -> 767
    { key: 'xl',      value: 1024 }, // 1024 (desktop)              -> 1023
    { key: 'xxl',     value: 1600 }, // 1600 (large-screen)         -> 1599
    { key: '120x120', value: 160  },
    { key: '200x200', value: 480  }
  ];

  // List of all breakpoints, for tracking purposes (must be in order from largest to smallest)
  window.breakpoints = [ 240, 640 ];
  for (var i = 0; i < window.defaultImageMap.length; i++) {
    var breakpoint = window.defaultImageMap[i].value;
    if ($.inArray(breakpoint, window.breakpoints) < 0) {
      window.breakpoints.push(breakpoint);
    }
  }
  window.breakpoints.sort(function(a, b) {
    return b - a;
  });

  if (window.slowConnection) {
    window.defaultImageMap = [];
  }

  // Collection of elements that need traslateZ applied to them when live tile flips
  window.translateZelements = [
    $('section.hero-area p'),
    $('section.highlight-tiles a'),
    $('section.navigation-tiles p.social-media'),
    $('nav.site-navigation ul li'),
    $('.social-media .default li'),
    $('li.change-country'),
    $('li.offers-tile'),
    $('.tile-link .caption')
  ];

  if (BrowserDetect.OS == 'Mac') {
    $(window.translateZelements).each(function() { $(this).addClass('zero-translate-z'); });
  }

  window.isTrackingAvailable = (typeof utag !== 'undefined' && typeof nkT !== 'undefined' && typeof nkT.pName !== 'undefined');

  window.customFadeIn = function() {
    $(this).transitionOrAnimate({
      classNames: 'transition-ease-fast full-opacity',
      properties: { 'opacity': '1' },
      callback: function() {
        // Remove the class once the animation is done so we don't end up transitioning every size change etc.
        // TODO: the callback now gets attached to the live tiles and for some reason, live tiles transitionend events get called in the cb.
        // This makes sense and needs to be fixed.
        $(this).removeClass('transition-ease-fast');
      }
    });
  };

  window.opacityFadeIn = function(elements, item_cb) {
    $(elements).each(function (i) {
      var item = this;
      var anim = function(){
        $(item).customAnimate({opacity: 1}, 400, item_cb);
      };

      setTimeout(anim, parseInt(150*i, 10));
    });
  };

  $('#main > section:last-child').addClass('last-component');

  // Fade components (and some component's content) in one by one.
  // Refer to _layout.sass to see the body.js dependent opacity settings
  $('.do-fade-in').each(function(i) {
    if (window.location.search.indexOf("debugmode=screenshot")>0) {
      $(this).css({'opacity': '1'});
    } else {
      $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);
    }
  });

  window.opacityFadeIn($('.do-opacity-fade-in'), function(){
    $(this).removeClass('do-opacity-fade-in');
  });

  // window.opacityFadeIn($('.do-fade-in'), function(){
  //   $(this).removeClass('do-fade-in');
  // });

  $('.w-catalog-list-row').hover(function(){}, function(){});

  // Enhance sub navigations
  $('nav.sub-navigation').enhanceSubNavigation();

  // Fix placeholders
  // TODO: needs custom test to figure out if placeholder is already supported
  $('[placeholder].enh-placeholder').enhancePlaceholder();

  // Site search enhancements (mainly for tablet landscapes)
  $('#site-search-field, #quick-search-field').addClass('visually-enhanced').focus(function() {
    $(this).parent().addClass('focused');
  }).blur(function() {
    $(this).parent().removeClass('focused');
  });

  // Quick search autocomplete
  $('#quick-search').autocomplete({
    input_trigger: '.quick-search-input',
    autocomplete_container: '.w-autocomplete',
    url: (I18n.autocomplete_url || '/ajax/quick_search_autocomplete_results.html?q=')
  });

  // Search suggestions
  $('.w-contextual-search').find('input.contextual-search').searchSuggestions();

  // Handle menu and search buttons showing/hiding the right ones.
  $('#site-navigation-top').css({ 'display': 'block' });
  $('#masthead a.go-to-tools').attr('href', '#site-navigation-top').addClass('enh-toggle');
  // For IE 8 or lesser Quick search auto complete styles are overridden by site-navigation-top. Hence quick-search id removed from below script
  if(legacyIE){
    $('#search-form-top').appendTo('#site-navigation-top').css({ 'display': 'block' });
  } else {
    $('#search-form-top, #quick-search').appendTo('#site-navigation-top').css({ 'display': 'block' });
  }
  $('#search-form').remove();
  $('aside.aside-sub-navigation').clone().prependTo('article > .wrapper').addClass('copy');
  $('aside.aside-sub-navigation.copy').hide();
  $('section.aside-sub-navigation-anchor').on('click', 'a', function(event) {
    $('aside.aside-sub-navigation.copy').toggle(250, 'swing');
    event.preventDefault();
  });

  // Site navigation section toggles

  $('#site-navigation-top .site-navigation-item.has-children').each(function() {
    $(this).find('.site-navigation-sub-items').css({ 'overflow': 'hidden', 'height': '0' });
    $(this).find('.toggle-children').enhanceToggle({ silent: true, responsiveScrollToTop: false, animateOpacity: false });
    $(this).find('.site-navigation-sub-items .site-navigation-sub-item.active').parent().parent().find('.toggle-children').trigger('click');
    if ($(this).hasClass('active')) $(this).find('.toggle-children').trigger('click');
  });

  // Footer navigation, 2nd level hide
  $('.site-navigation-bottom .site-navigation-sub-items').hide();

  // Convert anchor jumps to toggles if possible
  $('a.enh-toggle, dl.enh-toggle > dt > a').each(function() {
    if ($(this).parents('.filters').size() === 0) {
      $(this).enhanceToggle({ silent: true, responsiveScrollToTop: false });
    }
  });

  $('section.filters a.enh-toggle').enhanceToggle({
    silent: true,
    responsiveScrollToTop: true
  });

  // $('a.w-filter-checkboxes-toggle, a.w-filter-select-toggles').enhanceToggle({ closeEvent: 'catalog_list_change', silent: true });
  $('a.w-filter-checkboxes-toggle, a.w-filter-select-toggles').enhanceToggle({ closeEvent: 'catalog_list_change', silent: true, closeOnClickOutside: true });

  $('ul.enh-toggle:not(.support-categories) > li > a').enhanceToggle();
  $('ul.enh-toggle.support-categories > li > a').enhanceToggle({ closeEvent: 'support_categories', silent: true });
  $('h2.enh-toggle a').enhanceToggle({ silent: true });

  // Article accordions
  $('.article-accordion > div.sub-section > .headline > h3 > a').enhanceToggle({ silent: true });

  // Error page Go back link
  $('div.error-links ul').prepend([
    '<li>',
    '  <a href="javascript:history.go(-1)" title="' + I18n.get('navigation', 'go_back_link_title') + '">',
    '    <strong>' + I18n.get('navigation', 'go_back_link_text') + '</strong>',
    '  </a>',
    '</li>'
  ].join(''));

  // Open the menu by triggering the active page's click
  $('ul.sub-menu.enh-toggle').each(function() {
    $(this).find('li.current a').trigger('click');
  });

  // Enhance inputs
  $('input[type=checkbox].enh-checkbox').enhanceCheckbox();
  $('.radio-group').enhanceRadio();
  $('input[type=file]').enhanceFile();
  $('.search-results .tabs').enhanceAnchors();

  // Hide the submit button for #filters
  // TODO: bind submit event to the filter checkboxes
  $('#filters input[type="submit"]').hide();

  // Adaptive image sizes
  $(window).adaptiveImages(window.defaultImageMap);

  // Calculate and lay out image collections
  $('.layout-enhancer').layoutEnhancer();

  // Slideshow calls
  $('.content-block').showOverlay({ 
    overlayContent: '.standalone-slideshow', 
    trigger: 'a.responsive-gallery-trigger',
    showCallback: function($el) {
      $el.find('.content-wrapper').slideshow2({ arrows: true, verticalNavigation: true });
    },
    hideCallback: function($el) {
      $el.find('.content-wrapper').data('slideshow2').destroy();
    }
  });

  $('li.gallery-tile').showOverlay({
    overlayContent: '.standalone-slideshow',
    trigger: '.tile-content-wrapper',
    section_wrapper: '.tile-content-wrapper',
    showCallback: function($el) {
      $el.addClass('expanded-gallery');
      $el.find('.standalone-slideshow').slideshow2({ arrows: true, verticalNavigation: true});
    },
    hideCallback: function($el) {
      $el.removeClass('expanded-gallery');
      $el.find('.standalone-slideshow').data('slideshow2').destroy();
    }
  });

  $('.rich-content-slideshow').slideshow2({ autoPlay: true, progressBar: true, arrows: true, minScreenWidth: 640, runOnce: true, forwardOnSlideTap: false, hero: true});
  $('.video-gallery').slideshow2({ arrows: false, verticalNavigation: true, fixedArrowTop: false, fullBleedSlides: true }); // Test with arrow: true
  $('section.standalone-slideshow .rich-content-slideshow-standalone').slideshow2({ arrows: true, verticalNavigation: true });
  //$('section.standalone-slideshow').slideshow2({ arrows: true, verticalNavigation: true });
  $('div.slideshow-rich').slideshow2({ forwardOnSlideTap: true, arrows: true, productHeroArea: true, componentWrapper: $('.product-hero-area'), hero: true});
  $('section.content-block .standalone-slideshow').slideshow2({ arrows: false });

  $('.w-slideshow').slideshow2({});

 
  // Prevent page jump when the link isn't supposed to lead anywhere
  $('a[href="#external-link"], a[href="#not-implemented"]').click(function() {
    window.location = '/not_found.html';
  });

  // Content hider
  $('.hidable-block').hideContent({ heightTresholdLines : 4, heightTresholdPixels: '150'});

  // Dynamic product catalog
  $('article.phone-catalog').enhanceLoading({
    container: '.catalog',
    events: {
      click  : '.pagination a',
      change : '#filters'
    }
  });

  // // Dynamic search results
  // $('.search-results').enhanceLoading({
  //   container: '.search-results',
  //   events: {
  //     click: '.pagination a'
  //   },
  //   scrollToTop: true,
  //   callback: function($el) {
  //     $('.do-fade-in').each(function(i) {
  //       $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);
  //     });
  //   }
  // });  

  // Dynamic contact info
  $('.contact').enhanceLoading({
    container: '.contact-info.enh-loading',
    events: {
      change: '.location-filter form'
    },
    callback: function($el) {
      if (!legacyIE) $el.find('select.enh-select').enhanceSelect();
      $el.find('.repair-form').addClass('enhanced-loading');
    },
    scrollToTop: true
  });

  // Contact us -form
  $('.form').formValidation();
  
  var repairFormSubmitCallback = typeof repairFormSubmitTrackingCallback != "undefined" ? repairFormSubmitTrackingCallback : $.noop;
  $('.repair-form').formValidation2({"submitCallback": repairFormSubmitCallback});
  // To show the chosen delivery option in confirmation form while hiding the delivery option drop down
  $('.repair-form').formConfirmation({"hiddenWhenConfirm": $('form.delivery-method-form'), 'progress': $('.repair-progress'), 'showWhenConfirm': $('.chosen-delivery-option')});

  // This was previously built in formValidation plugin, moving it out as formValidation is not used for all forms.
  var formTooltipEvent = function(){
    var $tooltipText = $(this).closest('label').find('.form-tooltip-text');
    if ($tooltipText.is(':visible')) {
      $tooltipText.slideUp("fast");
    } else {
      $tooltipText.slideDown("fast");
    }
    event.preventDefault();
  };

  $('form').on('click', '.form-tooltip', formTooltipEvent);

  $('.repair-container').enhanceLoading({
    container: '.repair-container',
    events: {
      change: 'form.delivery-method-form'
    },
    callback: function($el) {
      if (!legacyIE) $el.find('select.enh-select').enhanceSelect();
      $('input[type=checkbox].enh-checkbox').enhanceCheckbox();
      PubSub.publish('image.added');
      $el.find('form').formValidation2({"submitCallback": repairFormSubmitCallback});
      $el.find('form').formConfirmation({"hiddenWhenConfirm": $('form.delivery-method-form'), 'progress': $('.repair-progress'), 'showWhenConfirm': $('.chosen-delivery-option')});
      $el.find('form').on('click', '.form-tooltip', formTooltipEvent);
    },
    scrollToTop: true
  });


  // Align to middle (e.g. for content blocks)
  $('section.text-middle-left header, section.text-middle-right header').alignToMiddle({ minScreenWidth: 639 });

  // Align the benefit blocks starting from tablet-portrait (they are not swipeshows until that)
  $('section.benefit-block.center-vertically header, section.benefit-block .center-vertically header').alignToMiddle({ minScreenWidth: 708 });

  // Product comparison plugin
  $('section.compare-selector').productComparison({
    catalog_selector: '.w-catalog-list, .w-catalog-grid',
    catalog_item_selector: '.w-catalog-list-row, .wrapper .content-wrapper > ul > li'
  });

  // Product selector plugin
  $('section.product-selector:not(.support)').productSelector({ dynamic: true });
  $('section.product-selector.support').productSelector({ dynamic: false });

  // Compare view
  $('section.compare').productCompareView();

  $('.w-catalog-list').productCompareView();

  // Init load more buttons on page-load
  // TODO: use merge this to one invocation and let the plugin read from data-attributes the correct setup
  $('section.load-more.load-phones').loadmore({ catalog: '.catalog' });
  $('section.load-more.load-accessories').loadmore({ catalog: '.catalog-accessories' });
  $('section.load-more.load-support').loadmore({ preloaded: true, catalog: $('.product-selector.support .phone-list-wrapper') });
  $('section.load-more.load-offers').loadmore({ catalog: '.offers-list' });

  $('section.load-more.load-phones-list-view').loadmore_1_1({
    list_container_selector: '.w-catalog-list-container, .w-catalog-grid-container',
    load_more_trigger_selector: '.load-more-trigger'
  });

  // Expand filters on page load if asked to
  if ($('section.filters').is(':visible') && window.location.href.indexOf('fe=true') > -1) {
    $('section.filters .filters-toggle-wrapper a').trigger('click');
  }

  // Support categories grid
  $('.w-categories.normalize-width').find('.categories-list').normalizeHeights({ elementWrapper: 'a', minScreenWidth: 480, normalizeWidths: true})
  $('.w-categories.compact').find('.categories-list').normalizeHeights({ elementWrapper: 'a', minScreenWidth: 480})

  // Accessory filters
  if ($('.catalog-accessories').is(':visible')) {
    $('.filters a.filter-links').parent().on('click', function(e) {
      e.preventDefault();

      var _self = $(this),
        checkbox = _self.find('.enh-checkbox-wrapper'),
        filterName = $(this).find('a.filter-links').data('filter');
        filterName = filterName.replace('&', '%26');

      // Update filter links
      $('.filters a.filter-links').each(function() {
        if (checkbox.is('.enh-checkbox-selected')) {
          $(this).attr('href', $(this).attr('href').replace('&' + filterName + '=on', '').replace('?' + filterName + '=on', ''));
          if ($(this).attr('href').indexOf('?') === -1 && $(this).attr('href').indexOf('&') > -1) {
            $(this).attr('href', $(this).attr('href').replace('&', '?'));
          }
        } else {
          if ($(this).data('filter') !== filterName) {
            $(this).attr('href', $(this).attr('href') + '&' + filterName + '=on');
          }
        }
      });

      checkbox.toggleClass('enh-checkbox-selected');

      $('.catalog-accessories').load($(this).find('a.filter-links').attr('href') + ' .catalog-accessories > .wrapper', function() {
        $(this).find('.wrapper, li').each(function(index) {
          $(this).delay(parseInt(100 * index, 10)).animate({ 'opacity': '1' }, 150);
        });
        $('.load-more.load-accessories').loadmore({ catalog: '.catalog-accessories' });

        // Init adaptive images for loaded content
        // $(this).adaptiveImages(window.defaultImageMap);
        PubSub.publish('image.added');

        if ($(this).find('li').size() === 0) {
          $('.error-notification').parent().show();
          $('.load-more').hide();
        } else {
          $('.error-notification').parent().hide();
          $('.load-more').show();
        }

        $('.filters a.filter-links').each(function() {
          var filter = $(this).data('filter');
          if ($(this).attr('href').indexOf(filter) === -1) {
            $(this).attr('href', ($(this).attr('href') + '&' + filter + '=on'));
          }
          // Fixup param syntax
          $(this).attr('href', ($(this).attr('href').replace(/\?/g, '&')).replace('&', '?'));
        });
      });
    });
  }

$('.w-catalog-filters .w-catalog-filters-wrapper').catalogFilterCheckboxes({filter_link_class: 'w-filter-checkboxes-item'});

  $('.w-catalog-filters .w-catalog-sort-by-wrapper').catalogSortOrder({
      selected_input: '.w-filter-select-selected',
      link_class_class: 'w-filter-select-option-link'
    });

  $('.w-catalog-view-type').catalogSwitch({
    selected_input: '.w-catalog-view-type-selected',
    option_links: '.w-catalog-view-type-link'
  });

  $('.w-catalog-filters').catalogFilters({
    inputs: '.w-catalog-view-type-selected, .w-filter-select-selected'
  });

  // Video triggers
  // TODO: make data-driven, only use .responsive-video-trigger class and read rest from data-attributes
  /*$('section.navigation-tiles li.video-tile a.tile-content-wrapper').xvideo({
    overlay: true,
    hideTrigger: false
  });*/

  $('section.benefit-block a.youtube-link').append('<div class="play-icon"></div>');
  
  // TODO remove this if not needed anymore
  // Aqua video triggers
  $('section.benefit-block a.youtube-link').xvideo({
    overlay: true,
    hideTrigger: false,
    targetParent: '.wrapper'
  });

  $('.video-list .responsive-video-trigger').xvideo({
    overlay: true,
    hideTrigger: false,
    targetParent: '.video-list'
  });

  $('.video-slide').splitToSlides({resolutions: {0: 1, 480: 2, 768: 3, 1024: 4, 1280: 5}})
                   .simpleSlide({animation: 'slideRight', triggerNext: '.control.next', triggerPrev: '.control.prev', slides: '.slide', allowLoop: false});

  $('.w-video-slide').splitToSlides({resolutions: {0: 1, 480: 3, 768: 4, 1024: 4, 1280: 5}, useParentContainer: true })
                   .simpleSlide({animation: 'slideRight', triggerNext: '.control.next', triggerPrev: '.control.prev', slides: '.slide', allowLoop: false});

  //$('.w-video-slide').splitToSlides({resolutions: {0: 1, 480: 2, 768: 2, 1024: 2}, useParentContainer: true })
  //                 .simpleSlide({animation: 'slideRight', triggerNext: '.control.next', triggerPrev: '.control.prev', slides: '.slide', allowLoop: false});

  // Set up a video controls DOM string depending on browser capabilities
  window.App = window.App || {};
  var progressBar = '<div class="progress-bar-base"><span class="progress-bar-buffer"><span class="progress-bar-indicator"></span></span></div>'
  var videoLength = '<div class="video-length"><span class="current">00:00</span><span class="total"> / 00:00</span></div>'
  
  // TODO: Currently used version of Modernizer doesn't detect fullscreen support in IE11. Update Modernizer to version 3 when it's available. 
  if(Modernizr.fullscreen || document.msFullscreenEnabled) {
     //videoControls = '<a class="control toggle"></a><a class="control fullscreen-placeholder"></a><a class="control volume-toggle"></a>'+progressBar+videoLength;
     window.App.VideoControls = '<a class="control toggle"></a><a class="control fullscreen-toggle"></a><a class="control volume-toggle"></a>';
  } else {
     window.App.VideoControls = '<a class="control toggle"></a><a class="control volume-toggle"></a>';
  }

  // Inline videos (e.g. in editorial articles)
  $('.standalone.video .youtube-link').xvideo({lazy: false, showNativeControls: false, showOverlay: false});

  // FIXME overlay-video-trigger a$('.video .youtube-link').defaultInlineVideo({lazy: false, triggerClass: 'responsive-video-trigger'});
  $('a.overlay-video-trigger, section.navigation-tiles li.video-tile .tile-content-wrapper').defaultVideoOverlay();
  // Photography video tiles
  $('section.page-collections li.video-tile-wide a.tile-content-wrapper').defaultVideoOverlay();

  // Support video slides
  $('.video-slide .youtube-link, .video-slide .internal-video-link').each(function() {
    var self = $(this);
    self.defaultVideoOverlay({
      target: '.videos_wrapper .wrapper',
      hideTrigger: true
    });
  });

  $('.w-video-slide .youtube-link, .w-video-slide .internal-video-link').each(function() {
    var self = $(this);
    self.defaultVideoOverlay({
      target: '.videos_wrapper .wrapper', 
      hideTrigger: true
    });
  });

  // TODO: replace the '.standalone-slideshow .video-trigger' with '.inline-video.trigger'
  $('a.inline-video-trigger, .standalone-slideshow .video-trigger').defaultInlineVideo({lazy: true});

  // Function to set asset tracking cookie
  function setAssetTrackingCookie(anchor) {
    var hostname = anchor.hostname;
    if (typeof hostname === 'undefined' || hostname.indexOf('nokia.com') === hostname.length - 9) {
      var value = $(anchor).attr('data-intc');
      if (value) {
        var expiryDate = new Date();
        expiryDate.setTime(expiryDate.getTime() + 1000 * 30);
        $.cookies.set('intc_click', value, {
          expiresAt: expiryDate,
          domain: '.nokia.com'
        });
      }
    }
  }

  $('body').on('click', 'a[data-intc]', function(event) {
    setAssetTrackingCookie(this);
  });

  //Set InT Event Feedback

  $('body').on('click', 'a[data-intlocalc]', function(event) {

    if($(this).data('intlocalc') && I18n && I18n.inT && I18n.inT.trackingUrl) {
                var contentId = $(this).data('intlocalc');
                var url=this.href;
                var newImage = new Image();
                newImage.src = I18n.inT.trackingUrl.concat('?i=').concat(contentId);
                if($(this).closest(".hero-area").length > 0 || $(this).closest(".highlight-hero").length > 0 || $(this).closest(".highlight-tiles").length > 0 || $(this).closest(".navigation-tiles").length > 0) {

                     if($(this).attr('target')!='_blank')
                     {
                        event.preventDefault();
                        setTimeout(function() {
                          window.location = url;
                         }, 50);
                      }
                      else
                      {
                          setTimeout(function() {
                          newImage.src;
                          }, 50);
                      }
                }
        }
  });

  // Trigger Event conversion for InT Product Beauty shot
  $('.product-hero-area').on('click','div[data-intlocalc]',function(event) {
    setInTEventFeedback(this);
  });

  //Trigger Event conversion for InT on click of L/R arrow from the product beauty shot
  $('.arrow-control').on('click', function(event) {
    var slidesDivTag = $(this).parent().find('div[class]');
    slidesDivTag.each(function(){
      if($(this).attr('class') == 'slides'){
        var sildeDivTag = $(this).find('div[style]');
        sildeDivTag.each(function(){
          if($(this).is(":visible")){
            setInTEventFeedback($(this));
            return false;
          }
        });
        return false;
      }
    });
  });

   // Trigger Event conversion for InT Product Beauty shot thumbnail
  $('.product-hero-area .slideshow-rich .controls').on('click','a[data-intlocalc]',function(event) {
    setInTEventFeedback(this);
  });

  function setInTEventFeedback(varType) {
    if($(varType).data('intlocalc') && I18n && I18n.inT && I18n.inT.trackingUrl) {
        var contentId = $(varType).data('intlocalc');
        var newImage = new Image();
        newImage.src = I18n.inT.trackingUrl.concat('?i=').concat(contentId);
    }
  }

  // Addded to send the click event for InT when clicked on navigation video tile
  $('div.overlay').on('click',function(event) {

    if($(this).data('intc') && I18n && I18n.inT && I18n.inT.trackingUrl) {
                var contentId = $(this).data('intc').split('-').pop();
                var newImage = new Image();
                newImage.src = I18n.inT.trackingUrl.concat('?i=').concat(contentId);
                 setTimeout(function() {

                }, 300);

        }
  });

  // Sync heights of product specification snapshots (pss)
  $(window).load(function() {
    var pssItems = $('.product-specification-snapshot .four li');
      if ($(window).width() > 768 && pssItems.length > 0) {
        var pssMaxHeight = 0;
        pssItems.each(function() {
          if ($(this).height() > pssMaxHeight) pssMaxHeight = $(this).height();
        });
        pssItems.height(pssMaxHeight);
      }
  });

  // Toggle for downloads-dropdown
  var enableEnhancedDownload = $(window).width() > 640;
  if (enableEnhancedDownload) {
    $('.download-dropdown').addClass('enhanced').find('> a').on('click', function(e) {
      e = e || window.event;
      e.preventDefault();
      e.stopPropagation();
      e.cancelBubble = true;
      var $ul = $(this).siblings('ul');
      $ul.toggle();
      if ($ul.is(':visible')) {
        $('body').click(function() {
          $('.download-dropdown ul').hide();
        });
      }
      else {
        $('body').unbind();
      }
    });
  } else {
    $('.download-dropdown').each(function(i, pos) {
      $pos = $(pos);
      var markup = '<select style="width: 100%;"><option>' + $pos.find('> a strong').text() + '</option>';
      $pos.find('li a').each(function(j, el) {
        markup += '<option value="' + $(el).attr('href') + '">' + $(el).find('em').text() + ' (' + $(el).find('span').text() +')</option>';
      });
      markup += '</select>';
      $pos.hide();
      var t = $pos.parent().append(markup);
      t.on('change', function(ev) {
        window.location.href=$(ev.target).val();
      });
    });
  }

  // IMEI checker and product based screening
  $('#product_based_screening').productBasedScreening();

  // Ratings and reviews
  var isBazaarvoiceUrlLoaded = false;
  if (($(".ratings-reviews").length > 0 || $(".ratings-reviews-page").length > 0 || $(".write-review").length > 0) && I18n.ratings_reviews.bazaarvoice_url !== undefined) {
    if (!isBazaarvoiceUrlLoaded) {
      var head = document.getElementsByTagName('head')[0];
      var script = document.createElement('script');
      script.type = 'text/javascript';
      // < IE 8
      script.onreadystatechange = function () {
        if (this.readyState === 'complete' || this.readyState === 'loaded') loadRatingsReviews();
      }
      // Mordern browser
      script.onload = loadRatingsReviews;
      script.src = I18n.ratings_reviews.bazaarvoice_url;
      head.appendChild(script);
      isBazaarvoiceUrlLoaded = true;
    }

  }

  function loadRatingsReviews() {
    if($(".ratings-reviews").length > 0 && I18n.ratings_reviews.product_id !== undefined) {
      $BV.ui("rr", "show_summary", {
        productId: I18n.ratings_reviews.product_id
      });
    } else if ($(".ratings-reviews-page").length > 0 && I18n.ratings_reviews.submission_container_url !== undefined && I18n.ratings_reviews.product_id !== undefined) {

      $BV.ui("rr", "show_summary", { productId:  I18n.ratings_reviews.product_id });

      $BV.configure("global", {
        submissionContainerUrl: I18n.ratings_reviews.submission_container_url
      });

      $("#nk-bv-write-review").bind('click', function() {
        $BV.ui("rr", "submit_review", {productId: I18n.ratings_reviews.product_id});
      });

      $BV.ui("rr", "show_reviews", {productId: I18n.ratings_reviews.product_id});
    } else if($(".write-review").length > 0) {
      $BV.ui("submission_container", {userToken: ""});
    }
  }
  
  
  // Navigation tiles high-priority size change logic for HD breakpoints only
  $(".navigation-tiles").navigationTileHighPrio();
  

  // Arrange product specification and pricepoint widgets side by side 
  // on product overview page. Page should contain at least a product specification widget
  // and then either a pricepoint or a product availability notifier widgets.
  function arrangeSideBySide() {
    var $window = $(window),
        widgetNames = ['.js-specs', '.js-offers', '.js-availability', '.js-notifier'],
        sectionElName = '.product-overview-snapshot',
        $pricepointOperators = $('.w-pricepoint-operator-items'),
        $pricepointContent = $('.w-pricepoint-content'),
        $pricepointFooter = $('.w-pricepoint footer'),
        footerHeight = '',
        pricepointContentHeight = '',
        minBreakpointWidth = 1024,
        widgetsCount = 2,
        widgetElNames = '',
        widgetEls = '';

    /**
     * Check if page contains widgets that need to arranged side by side
     */
    function findAvailableWidgets() {
      var availableWidgetNames = [];

      // Check that there is at least a product specification widget
      if($(widgetNames[0]).length > 0) {
        availableWidgetNames.push(widgetNames[0]);
        widgetNames.shift();
      }

      // Proceed checking for other widgets
      if(availableWidgetNames.length === 1) {
        for (var key in widgetNames) {
          if($(widgetNames[key]).length > 0 && availableWidgetNames.length < widgetsCount) {
            availableWidgetNames.push(widgetNames[key]);
          }
        }
      }

      return availableWidgetNames;      
    }
   
    /**
     * Toggle the wrapper around the widgets after the certain breakpoint
     */
    function toggleColumnsWrapper(widgetEls, widgetElNames) {
      if (viewport().width >= minBreakpointWidth) {
        if($(sectionElName).length === 0) {
          widgetEls
            .wrapAll( "<section class='"+sectionElName.substring(1)+"'/>")
            .wrapAll( "<div class='wrapper' />");

          $(sectionElName).normalizeHeights({ elementWrapper: widgetElNames, minScreenWidth: minBreakpointWidth-1});
        }
      } else {
         // Remove the wrapper below the certain breakpoint
        if($(sectionElName).length > 0) {
          widgetEls.unwrap().unwrap();
        }
      }

      centerPricesVertically();
    }

    /**
     * Center pricepoint price offers vertically within the pricepoint block.
     */
    function centerPricesVertically() {
      // Center prices only when there are multiple offers
      if($('.w-pricepoint-price-information').length > 0 && $pricepointContent.find('.single-deal').length === 0) {
        if (viewport().width >= minBreakpointWidth) {
          footerHeight = $pricepointFooter.height() || 0;
          pricepointContentHeight = $pricepointOperators.height() + footerHeight;
          $pricepointOperators.css({'position': 'absolute', 'bottom': footerHeight + 'px', 'left': '1.5em', 'right': '1.5em', 'width': 'auto'});
          $pricepointContent.css({'margin-bottom': pricepointContentHeight + 'px', 'padding-bottom': '0'});
        } else {
          $pricepointOperators.attr('style', '');
          $pricepointContent.attr('style', '');
        }
      }
    } 
    
    widgetElNames = findAvailableWidgets();

    if (widgetElNames.length === widgetsCount) {
      widgetElNames = widgetElNames.join(', ');
      widgetEls = $('#main').find(widgetElNames);

      if (legacyIE) {
        toggleColumnsWrapper(widgetEls, widgetElNames);
      } else {
        var lazyToggleColumnsWrapper= $.debounce(function() {
          toggleColumnsWrapper(widgetEls, widgetElNames);
        }, 100);
        $window.on('resize.' + this.namespace, lazyToggleColumnsWrapper).resize();
      }
    }
  }
   
  // show more FAQs in support category pages
  var $faqShowMore = $('.show-more');
  if ($faqShowMore.length > 0) {

    var $expandList = $faqShowMore.siblings('ul'),
        stepBy = parseInt($expandList.data('stepby'));

    if ($expandList.find('li').length > stepBy) {
      $expandList.children("li:gt(" + (stepBy - 1) + ")").hide();
      $faqShowMore.show();
    }

    $faqShowMore.on('click', function(event){
      event.preventDefault();

      $expandList.find('li:hidden:lt('+stepBy+')')
        .attr('style', '')
        .css({ opacity: 0, display: 'list-item !important'})
        .each(function (i) {
          $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);
        });

      if ($expandList.find('li:hidden').length == 0) {
        $(this).hide();
      }

    });
  }

  // Force-feed non-HTML5 browsers with input placeholders
  $('input[placeholder]').each(function() {
    $(this).val($(this).attr('placeholder'));
    $(this).focus(function() {
      if ($(this).val() == $(this).attr('placeholder')) {
         $(this).val('');
      }
    });
    $(this).blur(function() {
      if ($(this).val() === '' || $(this).val() == $(this).attr('placeholder')) {
          $(this).val($(this).attr('placeholder'));
      }
    });
  });

  $('#imei_warranty_check').imeiStatusCheck({
    imei_placeholder: '.imei_placeholder',
    relative_articles_prefix: 'imei_warranty_check'
  });

  $('#imei_repair_check').imeiStatusCheck({
    imei_placeholder: '.imei_placeholder',
    relative_articles_prefix: 'imei_repair_check'
  });

  $(window).warrantyCheck();

  $('.badge-of-honor-items').simpleSlide({triggerNext: '.next', slides: '.badge-of-honor-item', minAnimatedResolution: 480, animation: 'slideLeft'});

 // $('.video-slide').touchScroll({
 //    viewport_class: '.videos_wrapper .wrapper',
 //    triggerNext: '.control.next',
 //    triggerPrev: '.control.prev',
 //    slides: '.content_wrapper',
 //    snapToElements: '.videos_wrapper .content_wrapper',
 //    resolutions: {0: 1, 480: 2, 768: 3, 1024: 4}
 //  });

  $('.benefit-block.swipeshow').touchScroll({
    viewport_class: '.viewport',
    slides: '.cover, .slide',
    snapToElements: '.cover, .slide',
    resolutions: {0: 1},
    minResolution: 768
  });

  $('section.search-results .map-link').openOnNewWindow();

  $('a.external-tracking[tracking-param]').each(function() {
    $(this).on('click', function(e) {
      var href = $(this).attr('href');
      var trackingParam = $(this).attr('tracking-param') + "=";
      if (href.indexOf(trackingParam) < 0) {
        var trkId = $.cookies.get('s_vi');
        if (trkId) {
          // nokia tracking cookie specific hack to get the 'relevant' bits
          try {
            trkId = trkId.split('|')[1].split('[')[0];
            href = href + "&" + trackingParam + encodeURIComponent(trkId);
            $(this).attr('href', href);
          } catch (e) {}
        }
      }
      // the unique-param must always be the first item in the query (needed by NDW)
      var uniqueParam = $(this).attr('unique-param');
      if (uniqueParam && href.indexOf(uniqueParam) < 0) {
    	var orderedHref = href.replace('?', '?' + uniqueParam + "=" + new Date().getTime() + '&');
        $(this).attr('href', orderedHref);
      }
    });
  });

  // ***** PASS IT ON ******
  if($('.gallery-page.flickr').length > 0) {
    $('body').flickrImages();

    $('.gallery-page').imageViewer();
    $('.gallery-page .gallery-page-image-items').lineFiller();
  }
  
  // ***** CONTENT PLATFORM ******
  $('.content-platform-timeline').contentPlatformTimeline();
  $('.content-platform-timeline-sticky-bar').stickyNavigation({useBackToTop: false});
  $('#content-platform-hero-countdown').countdown();



  $('.w-notifications').notifications({
    eventNamesSpace: 'notifications',
    eventNames: ['error', 'info'], 
    template: '.w-notifications-item',
    itemClose: '.w-notifications-item-close',
    container: '.w-notifications-container'
  });


  arrangeSideBySide();

  $('#offers').normalizeHeights({ elementWrapper: '.list-content-wrapper, .tile-content-wrapper', minScreenWidth: 462})
              .offersTableFilters();

  $('section.feature-tiles').normalizeHeights({ elementWrapper: '.tile-content-wrapper', minScreenWidth: 462 });

  $('.aside-navigation').normalizeHeights({ elementWrapper: 'a', minScreenWidth: 320, animate: true });

  //$('section.solution-tree .tiles').normalizeHeights({ elementWrapper: 'a'});

  // Set the heights of the product snaphot components column elements when they're layed out to columns
  $('section.product-snapshot .wrapper').normalizeHeights({ elementWrapper: '.features, .price-information-wrapper', minScreenWidth: 1023 });

  $('#offers .tooltip-trigger').tooltip();

  // QUICKFIX - on offers fiter changes. offers table ontent is loaded and tooltips are replaced.
  $('#offers').on('contentReload', function(){
    if(!$('#offers .tooltip-trigger').data('tooltip')){
      $('#offers .tooltip-trigger').tooltip();
    }
  });

  if ($(window).width() > 768 && window.location.search.indexOf("opp=") == -1) {
    $('#offers div.page-size a:first').click();
  }

  // $('.page-collections .story-tile').aspectBlock({container: '.tile-content-wrapper'});

//   $('.page-collections').aspectBlock({
//     elements: '.story-tile, .page-collection .video-tile-wide, .navigation-tile-story',
//     allowedCutPercentage: '25',
//     block_limit_to_forgot_dots: 7,
//     cutWithDots: true
// });

  $('.social-stream').socialStream({speed: 4000, itemsInDisplay: 3});

  // Open the social sharing link/button in popup
  $('.social-control').on('click', function(event) {
    var left = (screen.width/2) - 350;
    var top = (screen.height/2) - 170;
    socialWindow = window.open($(this).attr('href'), $(this).attr('title'), 'status=no,toolbar=0,resizable=1,width=700,height=340,top='+ top + ',left=' + left);
    event.preventDefault();
  });

  $('.w-title-container-two-column').children('.tiles').splitColumns({breakpoints: [480, 18000]});

  if (events = App.Video.events) {
    $.each(events, function(i, event) {
      $('.test-case').each(function() {
        var $events = $(this).find('ul.events'),
            $target = !!$events.data('target') ? $($events.data('target')) : $(this);
        $target.on(event, function() {
          var $indicator = $(this).find('ul.events li.' + event),
              $counter   = $indicator.find('.counter'),
              count      = parseInt($counter.text(), 10);

          $indicator.addClass('called');
          $counter.text(++count);
        });
      });
    });
  }

  // Check specifications snapshot image ratio.
  // If width is bigger than height add device-landscape class to container
  $.each(['.specifications-snapshot-visuals', '.specifications ul.visuals'], function(i, el) {
    var specificationsSnapshotImage = $(el + ' .phone-front-image img');
    specificationsSnapshotImage.on('load.spec_image_check', function() {
      var specImage = $(this),
          imgWidth = specImage.width(),
          imgHeight = specImage.height();

      if(/nope.gif/.exec(specImage.attr('src'))) {
        return;
      } else {
        if(imgWidth > imgHeight){
          specImage.parents(el).addClass('device-landscape');
          specImage.off('.spec_image_check');
        }
      }
    });
  });

  // search-results - On change of filter type selection to do the site search again with search parameters
  $('.filter-values').change(function(){
    var form = $(this).closest('form');
    form.submit();
  });

  // Print option for repair form
  $('.repair_print').on('click', function(){
    window.print();
    return false;
  });

  // To hide to place holder for firefox and chrome on focus in Search text input
  $('.contextual-search').each(function() {
    if(BrowserDetect.browser != "Explorer"){
      var origvalue = $(this).val();
      $(this).focus(function() {
        if($(this).attr("placeholder") == origvalue) {
          $(this).attr("placeholder", '');
        }
      });

      $(this).blur(function() {
        if($(this).val() == '' || $(this).attr("placeholder") == '') {
          $(this).attr("placeholder", origvalue);
        }
      });
    }
  });

  ////////////////////////////////////////////////////////////////////////////////////////////////
  // do not accidentally add stuff below this line

  // Live tile animation trigger
  $('li.social-media').each(function() {
    if (window.location.search.indexOf("debugmode=screenshot")<0) {
      $(this).livetile();
    }
  });

  ////////////////////////////////
  // check if search form value is empty
  function searchFieldNotEmpty(inputField) {
    if (inputField.val().length == 0 || inputField.val() === inputField.attr('placeholder')) {
      return false
    } else {
      true
    }
  }

  // keep this last for test frameworks
  $('body').addClass('done');

  //console.profileEnd();

});
/*
 *  .postmessage handler implementation
 *  use this to talk between multiple documents(e.g. iframes, popups) in the page
 */


$(function () {
  /*
  *  receiveMessage reads the response and checks if it comes from trusted origin
  *  this needs to be attached to message/onmessage event
  */
  function receiveMessage(event) {
    var origin = event.origin;

    if(origin.indexOf('account.nokia.com', origin.length - 17) !== -1) {
      // todo: add noa msg handlers here
      return;
    }

    if(origin.indexOf('.nokia.com', origin.length - 10) !== -1) {
      response = readResponse(event.data);

      try {
        if (response) eval(response.functionCall + "(response)");
      } catch(e) {
        // do nothing if the function call failed
      }
    }
  }

  /*
  * readResponse creates an object out of string passed from child document
  *
  * @parameters:
  *  (String) input
  *
  * @returns Object:
  *    obj.functionCall
  *    obj.property1
  *    obj.property2
  */
  function readResponse(input) {
    var response = input.split(';');
    if (response.length % 2 == 1) {
      var object = {};

      // function to eval
      object["functionCall"] = response[0];

      // key+value pairs, properties for function
      for (var i=1; i<response.length; i+=2) {
        if (response[i+1] == "true")
          object[response[i]] = true;
        else if (response[i+1] == "false")
          object[response[i]] = false;
        else
          object[response[i]] = response[i+1];
      }

      return object;
    } else {
      return false;
    }
  }

  /*
  *  nkResizeWALframe resizes WAL iframe to be as high as its contents
  *  (since the content is generated dynamically we can't know the dimensions before content is loaded, hence this function)
  */
  function nkResizeWALframe(response) {
    $('iframe[name="wal-frame"]')
      .stop()
      .animate({
        height: (parseInt(response.height.split('px')[0], 10) + 40).toString() + "px"
      }, 500);
  }

  /*
   *  nkScrollWALtop scrolls the page to top of WAL iframe
   *  (called e.g. by contact-us thank you page)
   */
  function nkScrollWALtop(response) {
    $('body,html')
      .stop()
      .animate({
          scrollTop: $('iframe[name="wal-frame"]').offset().top - 15
      }, 500);
  }

  /*
   *  nkWALFocusFirstError scrolls (focuses) to first error that is visible in the application
   *  (called e.g. by contact the board application )
   */
  function nkWALFocusFirstError(response) {
      var offset = parseInt($('iframe[name="wal-frame"]').offset().top, 10) + parseInt(response.offset, 10) - 5;
      // only scroll to error if its actually not visible
      if ($(document).scrollTop() > parseInt(response.errorHeight, 10) + offset) {
          $('body,html')
          .stop()
          .animate({
              scrollTop: offset
          }, 500);
      }
  }

  // resize handler for external iframes
  window.iframeActions = {
    resize: function(data, elementSelector) {
      /*if (data.width)
        $(elementSelector).width(data.width);*/
      if (data.height)
        $(elementSelector).height(data.height);
    }
  };

  // bind onmessage(trident)/message(rest) event listeners
  if (window.attachEvent) {
    window.attachEvent("onmessage", receiveMessage);
  } else if (window.addEventListener) {
    window.addEventListener("message", receiveMessage, false);
  }
});


 // when adding/removing entries here remember to match the changes also in
// nncom-applications/mauritius-cae-responsive/src/main/webapp/WEB-INF/templates/responsive/com.coremedia.starterkit.common.contentbeans/Page.jsp

//# ext loader.js -->






//# <-- ext loader.js 



























;
