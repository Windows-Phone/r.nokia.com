window.typeKitConfig = {kitId: 'ypi0jvg'};/*{"mac":"1:a0c597689729d685a2be698c8fb53bf820216698598a3f43d936bbae7d53b2a7","version":"15969023","created":"2013-02-28T12:54:35Z","k":"1.3.1"}*/
/*
 * For font license information, see the CSS file loaded by this JavaScript.
 */
;(function(window,document,undefined){
var g=void 0,k=!0,l=null,m=!1;function n(a){return function(){return this[a]}}var o;function aa(a,b,c){var e=2<arguments.length?Array.prototype.slice.call(arguments,2):[];return function(){e.push.apply(e,arguments);return b.apply(a,e)}}function p(a,b){this.pa=b||a;this.j=this.pa.document;this.s=g}
p.prototype.createElement=function(a,b,c){a=this.j.createElement(a);if(b)for(var e in b)b.hasOwnProperty(e)&&("style"==e?this.J(a,b[e]):a.setAttribute(e,b[e]));c&&a.appendChild(this.j.createTextNode(c));return a};function q(a,b,c){a=a.j.getElementsByTagName(b)[0];a||(a=document.documentElement);a&&a.lastChild&&a.insertBefore(c,a.lastChild)}function ba(a){function b(){document.body?a():setTimeout(b,0)}b()}
function r(a,b){for(var c=a.className.split(/\s+/),e=0,d=c.length;e<d;e++)if(c[e]==b)return;c.push(b);a.className=c.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function s(a,b){for(var c=a.className.split(/\s+/),e=[],d=0,f=c.length;d<f;d++)c[d]!=b&&e.push(c[d]);a.className=e.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function ca(a,b){for(var c=a.className.split(/\s+/),e=0,d=c.length;e<d;e++)if(c[e]==b)return k;return m}
p.prototype.J=function(a,b){this.ca()?a.setAttribute("style",b):a.style.cssText=b};p.prototype.ca=function(){if(this.s===g){var a=this.j.createElement("p");a.innerHTML='<a style="top:1px;">w</a>';this.s=/top/.test(a.getElementsByTagName("a")[0].getAttribute("style"))}return this.s};function t(a){this.Ua=a}function v(a,b,c,e,d,f,h,i){this.ea=a;this.Ta=b;this.Ca=c;this.Ba=e;this.Oa=d;this.Na=f;this.Aa=h;this.ya=i}o=v.prototype;o.getName=n("ea");o.getVersion=n("Ta");o.getEngine=n("Ca");
o.getEngineVersion=n("Ba");o.getPlatform=n("Oa");o.getPlatformVersion=n("Na");o.getDocumentMode=n("Aa");function da(a,b){this.c=a;this.p=b}var ea=new v("Unknown","Unknown","Unknown","Unknown","Unknown","Unknown",g,new t(m));
da.prototype.parse=function(){var a;if(-1!=this.c.indexOf("MSIE")){a=w(this);var b=x(this),c=y(this.c,/(MSIE [\d\w\.]+)/,1);if(""!=c){var e=c.split(" "),c=e[0],e=e[1];a=new v(c,e,c,e,a,b,z(this.p),new t(m))}else a=new v("MSIE","Unknown","MSIE","Unknown",a,b,z(this.p),new t(m))}else if(-1!=this.c.indexOf("Opera"))a:if(b=a="Unknown",c=y(this.c,/(Presto\/[\d\w\.]+)/,1),""!=c?(b=c.split("/"),a=b[0],b=b[1]):(-1!=this.c.indexOf("Gecko")&&(a="Gecko"),c=y(this.c,/rv:([^\)]+)/,1),""!=c&&(b=c)),-1!=this.c.indexOf("Opera Mini/"))c=
y(this.c,/Opera Mini\/([\d\.]+)/,1),""==c&&(c="Unknown"),a=new v("OperaMini",c,a,b,w(this),x(this),z(this.p),new t(m));else{if(-1!=this.c.indexOf("Version/")&&(c=y(this.c,/Version\/([\d\.]+)/,1),""!=c)){a=new v("Opera",c,a,b,w(this),x(this),z(this.p),new t(m));break a}c=y(this.c,/Opera[\/ ]([\d\.]+)/,1);a=""!=c?new v("Opera",c,a,b,w(this),x(this),z(this.p),new t(m)):new v("Opera","Unknown",a,b,w(this),x(this),z(this.p),new t(m))}else if(/AppleWeb(K|k)it/.test(this.c)){a=w(this);b=x(this);c=y(this.c,
/AppleWeb(?:K|k)it\/([\d\.]+)/,1);""==c&&(c="Unknown");var e=A(c),d="Unknown";-1!=this.c.indexOf("Chrome")||-1!=this.c.indexOf("CrMo")||-1!=this.c.indexOf("CriOS")?d="Chrome":"BlackBerry"==a||"Android"==a?d="BuiltinBrowser":-1!=this.c.indexOf("Safari")?d="Safari":-1!=this.c.indexOf("AdobeAIR")&&(d="AdobeAIR");var f="Unknown";"BuiltinBrowser"==d?f="Unknown":-1!=this.c.indexOf("Version/")?f=y(this.c,/Version\/([\d\.\w]+)/,1):"Chrome"==d?f=y(this.c,/(Chrome|CrMo|CriOS)\/([\d\.]+)/,2):"AdobeAIR"==d&&
(f=y(this.c,/AdobeAIR\/([\d\.]+)/,1));a=new v(d,f,"AppleWebKit",c,a,b,z(this.p),new t(536>e.w||536==e.w&&11>e.T))}else-1!=this.c.indexOf("Gecko")?(b=a="Unknown",c=m,-1!=this.c.indexOf("Firefox")?(a="Firefox",e=y(this.c,/Firefox\/([\d\w\.]+)/,1),""!=e&&(c=A(e),b=e,c=3<=c.w&&5<=c.T)):-1!=this.c.indexOf("Mozilla")&&(a="Mozilla"),e=y(this.c,/rv:([^\)]+)/,1),""==e?e="Unknown":c||(c=A(e),1<c.w||1==c.w&&9<c.T||1==c.w&&9==c.T&&2<=c.Ma||e.match(/1\.9\.1b[123]/)!=l||e.match(/1\.9\.1\.[\d\.]+/)),a=new v(a,b,
"Gecko",e,w(this),x(this),z(this.p),new t(m))):a=ea;return a};function w(a){var b=y(a.c,/(iPod|iPad|iPhone|Android|Windows Phone|BB\d{2}|BlackBerry)/,1);if(""!=b)return/BB\d{2}/.test(b)&&(b="BlackBerry"),b;a=y(a.c,/(Linux|Mac_PowerPC|Macintosh|Windows|CrOS)/,1);return""!=a?("Mac_PowerPC"==a&&(a="Macintosh"),a):"Unknown"}
function x(a){var b=y(a.c,/(OS X|Windows NT|Android|CrOS) ([^;)]+)/,2);if(b||(b=y(a.c,/Windows Phone( OS)? ([^;)]+)/,2)))return b;if(b=y(a.c,/(iPhone )?OS ([\d_]+)/,2))return b;if(b=y(a.c,/Linux ([i\d]+)/,1))return b;return(a=y(a.c,/(BB\d{2}|BlackBerry).*?Version\/([^\s]*)/,2))?a:"Unknown"}function A(a){var a=/([0-9]+)(?:\.([0-9]+)(?:\.([0-9]+)?)?)?/.exec(a),b={};a&&(b.w=parseInt(a[1]||-1,10),b.T=parseInt(a[2]||-1,10),b.Ma=parseInt(a[3]||-1,10));return b}
function y(a,b,c){return(a=a.match(b))&&a[c]?a[c]:""}function z(a){if(a.documentMode)return a.documentMode}function fa(a,b,c){this.e=a;this.h=b;this.ha=c;this.m="wf";this.l=new ga("-")}function B(a){s(a.h,a.l.g(a.m,"loading"));ca(a.h,a.l.g(a.m,"active"))||r(a.h,a.l.g(a.m,"inactive"));C(a,"inactive")}function C(a,b,c,e){if(a.ha[b])a.ha[b](c,e)}function ha(a,b){this.width=a;this.height=b}
function D(a,b,c){this.e=a;this.r=b;this.H=c;this.La=new ja;this.Fa=new ka;this.t=this.e.createElement("span",{},this.H)}function G(a){q(a.e,"body",a.t)}function H(a,b,c){c=c?a.Fa.expand(c):"";return"position:absolute;top:-999px;left:-999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+a.La.quote(b)+";"+c}D.prototype.I=function(){return this.r.I(this.t)};D.prototype.remove=function(){var a=this.t;a.parentNode&&a.parentNode.removeChild(a)};
function I(a,b,c,e,d,f){this.e=b;this.u=c;this.r=e;this.q=d;this.O=f;this.$=0;this.va=this.oa=m;this.P=a.ya.Ua}
I.prototype.watch=function(a,b,c,e,d){var f=a.length;if(0===f)B(this.u);else{for(var h=0;h<f;h++){var i=a[h];b[i]||(b[i]=["n4"]);this.$+=b[i].length}d&&(this.oa=d);for(h=0;h<f;h++)for(var i=a[h],d=b[i],j=c[i],u=0,W=d.length;u<W;u++){var E=d[u],F=this.u,M=i,ia=E;r(F.h,F.l.g(F.m,M,ia,"loading"));C(F,"fontloading",M,ia);F=aa(this,this.Da);M=aa(this,this.Ea);(new e(F,M,this.e,this.r,this.q,this.O,i,E,this.P,l,j)).start()}}};
I.prototype.Da=function(a,b){var c=this.u;s(c.h,c.l.g(c.m,a,b,"loading"));s(c.h,c.l.g(c.m,a,b,"inactive"));r(c.h,c.l.g(c.m,a,b,"active"));C(c,"fontactive",a,b);this.va=k;la(this)};I.prototype.Ea=function(a,b){var c=this.u;s(c.h,c.l.g(c.m,a,b,"loading"));ca(c.h,c.l.g(c.m,a,b,"active"))||r(c.h,c.l.g(c.m,a,b,"inactive"));C(c,"fontinactive",a,b);la(this)};
function la(a){0==--a.$&&a.oa&&(a.va?(a=a.u,s(a.h,a.l.g(a.m,"loading")),s(a.h,a.l.g(a.m,"inactive")),r(a.h,a.l.g(a.m,"active")),C(a,"active")):B(a.u))}function J(a,b,c,e,d,f,h,i,j,u,W){this.fa=a;this.Ha=b;this.e=c;this.r=e;this.q=d;this.O=f;this.M=h;this.L=i;this.H=W||"BESbswy";this.P=j;this.S={};this.qa=u||l;this.G=this.F=l;a=new D(this.e,this.r,this.H);G(a);for(var E in K)K.hasOwnProperty(E)&&(a.e.J(a.t,H(a,K[E],this.L)),this.S[K[E]]=a.I());a.remove()}
var K={Za:"serif",Ya:"sans-serif",Xa:"monospace",Wa:"Apple Color Emoji"};J.prototype.start=function(){this.F=new D(this.e,this.r,this.H);G(this.F);this.G=new D(this.e,this.r,this.H);G(this.G);this.Ra=this.O();var a=this.F;a.e.J(a.t,H(a,this.M+",serif",this.L));a=this.G;a.e.J(a.t,H(a,this.M+",sans-serif",this.L));this.ia()};function L(a,b,c){return!!a.S[c]&&b.width==a.S[c].width&&b.height==a.S[c].height}
function ma(a,b,c){for(var e in K)if(K.hasOwnProperty(e)&&L(a,b,K[e])&&L(a,c,K[e]))return k;return m}J.prototype.ia=function(){var a=this.F.I(),b=this.G.I();L(this,a,"serif")&&L(this,b,"sans-serif")||this.P&&ma(this,a,b)?5E3<=this.O()-this.Ra?this.P&&ma(this,a,b)&&(this.qa===l||this.qa.hasOwnProperty(this.M))?N(this,this.fa):N(this,this.Ha):na(this):N(this,this.fa)};function na(a){a.q(function(a,c){return function(){c.call(a)}}(a,a.ia),25)}function N(a,b){a.F.remove();a.G.remove();b(a.M,a.L)}
function ga(a){this.Ja=a||"-"}ga.prototype.g=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.Ja)};function ja(){this.ua="'"}ja.prototype.quote=function(a){for(var b=[],a=a.split(/,\s*/),c=0;c<a.length;c++){var e=a[c].replace(/['"]/g,"");-1==e.indexOf(" ")?b.push(e):b.push(this.ua+e+this.ua)}return b.join(",")};function ka(){this.sa=oa;this.K=pa}
var oa=["font-style","font-weight"],pa={"font-style":[["n","normal"],["i","italic"],["o","oblique"]],"font-weight":[["1","100"],["2","200"],["3","300"],["4","400"],["5","500"],["6","600"],["7","700"],["8","800"],["9","900"],["4","normal"],["7","bold"]]};function qa(a,b,c){this.Ia=a;this.Pa=b;this.K=c}qa.prototype.expand=function(a,b){for(var c=0;c<this.K.length;c++)if(b==this.K[c][0]){a[this.Ia]=this.Pa+":"+this.K[c][1];break}};
ka.prototype.expand=function(a){if(2!=a.length)return l;for(var b=[l,l],c=0,e=this.sa.length;c<e;c++){var d=this.sa[c];(new qa(c,d,this.K[d])).expand(b,a.substr(c,1))}return b[0]&&b[1]?b.join(";")+";":l};function O(a,b){this.pa=b||a;this.j=document;this.s=g}O.prototype=p.prototype;O.prototype.Ga=function(){return this.j.location.hostname};
function ra(a,b,c){var e=a.j.getElementsByTagName("head")[0];if(e){var d=a.j.createElement("script");d.src=b;var f=m;d.onload=d.onreadystatechange=function(){if(!f&&(!this.readyState||"loaded"==this.readyState||"complete"==this.readyState))f=k,c&&c(),d.onload=d.onreadystatechange=l,"HEAD"==d.parentNode.tagName&&e.removeChild(d)};e.appendChild(d)}}O.prototype.J=function(a,b){this.ca()?a.setAttribute("style",b):a.style.cssText=b};
O.prototype.ca=function(){if(this.s===g){var a=this.j.createElement("p");a.innerHTML='<a style="top:1px;">w</a>';this.s=/top/.test(a.getElementsByTagName("a")[0].getAttribute("style"))}return this.s};function sa(a,b){this.Qa=a;this.ja=b}function ta(a){for(var b=a.Qa.join(","),c=[],e=0;e<a.ja.length;e++){var d=a.ja[e];c.push(d.name+":"+d.value+";")}return b+"{"+c.join("")+"}"}function P(a,b){this.D=a;this.N=b;this.la={};this.ka={}}
P.prototype.v=function(a){return a?(this.la[a.U]||this.N).slice(0):this.N.slice(0)};function ua(a,b,c){for(var e=[],d=a.D.split(",")[0].replace(/"|'/g,""),f=a.v(),h,i=[],j={},u=0;u<f.length;u++)h=f[u],0<h.length&&!j[h]&&(j[h]=k,i.push(h));c=c.ta?c.ta(d,i,e):i;b=b.U;a.la[b]=c;a.ka[b]=e}P.prototype.watch=function(a,b,c){var e=[],d={};va(this,b,e,d);a(e,d,c)};
function va(a,b,c,e){c.push(a.D);e[a.D]=a.v(b);a=a.ka[b.U]||[];for(b=0;b<a.length;b++){for(var d=a[b],f=d.D,h=m,i=0;i<c.length;i++)c[i]==f&&(h=k);h||(c.push(f),e[f]=d.v())}}function wa(a,b){this.D=a;this.N=b}wa.prototype.v=n("N");function xa(a){var b={};b.src=a;b.onload=function(){b.onload=l}}function Q(a,b){this.U=a;this.na=b}function ya(){this.xa=this.Va=this.B=this.Q=this.R=k}function R(a){za.X.push(a)}
function Aa(a){this.e=a;this.za=this.o=this.c=this.W=l;this.k=[];this.C=[];this.wa=this.aa=this.Y=this.Z=l}function Ba(a,b){a.c=b;if(a.W){var c;a:{c=a.W;for(var e=a.c,d=a.za,f=0;f<c.X.length;f++){var h=c.X[f],i=e,j=d;j||(j=new ya);if(h.na&&h.na(i.getName(),i.getVersion(),i.getEngine(),i.getEngineVersion(),i.getPlatform(),i.getPlatformVersion(),i.getDocumentMode(),j)){c=h;break a}}c=l}a.o=c}}o=Aa.prototype;o.supportsConfiguredBrowser=function(){return!!this.o};
o.init=function(){if(0<this.C.length){for(var a=[],b=0;b<this.C.length;b++)a.push(ta(this.C[b]));var b=this.e,a=a.join(""),c=this.e.j.createElement("style");c.setAttribute("type","text/css");c.styleSheet?c.styleSheet.cssText=a:c.appendChild(document.createTextNode(a));q(b,"head",c)}};
o.load=function(a,b){var c=this.o.U;if(this.aa)for(var e=Ca(this.aa,c),d=0;d<this.k.length;d++)ua(this.k[d],this.o,e);this.Z&&(e=[],this.Y&&(e=new Da(this.e,this.o,this.k),e=Ea(this.Y,c,e)),c=this.Z.g("https:"==this.e.j.location.protocol,Fa(c,e)),q(this.e,"head",this.e.createElement("link",{rel:"stylesheet",href:c})));a&&ba(function(a,c,b,d){return function(){for(var e=0;e<a.k.length;e++)a.k[e].watch(c,b,d&&e==a.k.length-1)}}(this,a,this.o,b))};
o.collectFontFamilies=function(a,b){for(var c=0;c<this.k.length;c++)va(this.k[c],this.o,a,b)};o.performOptionalActions=function(a){this.da&&ba(function(a,c,e,d){return function(){var c=a.da;if(c.ra){var h=window.__adobewebfontsappname__,h=h?h.toString().substr(0,20):"";xa(c.ra.g("https:"==d.j.location.protocol,{host:encodeURIComponent(d.j.location.hostname),app:encodeURIComponent(h),_:(+new Date).toString()}))}c=a.da;c.ga&&(c=c.ga.g(e,d),q(d,"body",c))}}(this,a,this.c,this.e))};
function S(a,b,c,e,d){this.Ka=a;this.e=b;this.c=c;this.h=e;this.q=d;this.n=[]}S.prototype.V=function(a){this.n.push(a)};S.prototype.load=function(a,b){var c=a,e=b||{};if("string"==typeof c)c=[c];else if(!c||!c.length)e=c||{},c=[];if(c.length)for(var d=this,f=c.length,h=0;h<c.length;h++)Ga(this,c[h],function(){0==--f&&Ha(d,e)});else Ha(this,e)};function Ga(a,b,c){ra(a.e,a.Ka.g("https:"==a.e.j.location.protocol,{id:encodeURIComponent(b)}),c)}
function Ha(a,b){if(0!=a.n.length){for(var c=new fa(a.e,a.h,b),e=m,d=0;d<a.n.length;d++)a.n[d].init(),e=e||a.n[d].supportsConfiguredBrowser();e?(r(c.h,c.l.g(c.m,"loading")),C(c,"loading"),Ia(a,c)):B(c);a.n=[]}}
function Ia(a,b){function c(a,c,b){e.watch(a,c,{},J,b)}for(var e=new I(a.c,a.e,b,{I:function(a){return new ha(a.offsetWidth,a.offsetHeight)}},a.q,function(){return+new Date}),d=0;d<a.n.length;d++){var f=a.n[d];f.supportsConfiguredBrowser()&&(f.load(c,d==a.n.length-1),f.performOptionalActions(window))}}function T(a,b){this.ma=a;this.q=b;this.n=[]}T.prototype.V=function(a){this.n.push(a)};
T.prototype.load=function(){var a=this.ma.__webfonttypekitmodule__;if(a)for(var b=0;b<this.n.length;b++){var c=this.n[b],e=a[c.wa];if(e){var d=this.q;e(function(a,b,e){var b=[],j={};Ba(c,a);c.supportsConfiguredBrowser()&&(c.init(),c.load(l,d),c.collectFontFamilies(b,j),c.performOptionalActions(window));e(c.supportsConfiguredBrowser(),b,j)})}}};function Ja(a,b){this.ea=a;this.ta=b}Ja.prototype.getName=n("ea");function Ka(a){var b=U;La(b,a.getName())||b.ba.push(a)}
function La(a,b){for(var c=0;c<a.ba.length;c++){var e=a.ba[c];if(b===e.getName())return e}return l}function Ca(a,b){var c=a.z[b];return c?La(a,c):l}function Ea(a,b,c){for(var e=[],a=a.A[b]||[],b=0;b<a.length;b++){var d;a:switch(a[b]){case "observeddomain":d=new Ma(c.e);break a;case "fontmask":d=new Na(c.o,c.k);break a;default:d=l}d&&e.push(d)}return e}function Da(a,b,c){this.e=a;this.o=b;this.k=c}function Ma(a){this.e=a}
Ma.prototype.toString=function(){return encodeURIComponent(this.e.Ga?this.e.j.location.hostname:document.location.hostname)};function Na(a,b){this.o=a;this.k=b}Na.prototype.toString=function(){for(var a=[],b=0;b<this.k.length;b++)for(var c=this.k[b],e=c.v(),c=c.v(this.o),d=0;d<e.length;d++){var f;a:{for(f=0;f<c.length;f++)if(e[d]===c[f]){f=k;break a}f=m}a.push(f?1:0)}a=a.join("");a=a.replace(/^0+/,"");b=[];for(e=a.length;0<e;e-=4)c=a.slice(0>e-4?0:e-4,e),b.unshift(parseInt(c,2).toString(16));return b.join("")};
function V(a){this.Sa=a}V.prototype.g=function(a,b){var c=b||{},e=this.Sa.replace(/\{\/?([^*}]*)(\*?)\}/g,function(a,b,e){return e&&c[b]?"/"+c[b].join("/"):c[b]||""});e.match(/^\/\//)&&(e=(a?"https:":"http:")+e);return e.replace(/\/*\?*($|\?)/,"$1")};function Fa(a,b){for(var c=[],e=0;e<b.length;e++)c.push(b[e].toString());return{format:a,extras:c}}var za=new function(){this.X=[]};
R(new Q("a",function(a,b,c,e,d,f){if(m||("Windows"==d&&"Unknown"==f?k:m)||("Ubuntu"==d||"Linux"==d?k:m))a:{if("AdobeAIR"==a&&(a=/([0-9]+.[0-9]+)/.exec(b))){a=2.5<=parseFloat(a[1]);break a}a=m}else a=m;return a}));
R(new Q("b",function(a,b,c,e,d,f,h,i){var j;j=m||function(a,c,b,d,e,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==e&&a?(e=parseInt(a[1],10),f=parseInt(a[3],10),10<e||10==e&&4<=f):"Macintosh"==e&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i);return!j?m:function(a,c){if("AdobeAIR"==a){var b=/([0-9]+.[0-9]+)/.exec(c);if(b)return 2.5<=parseFloat(b[1])}return m}(a,b,c,e,d,f,h,i)}));
R(new Q("a",function(a,b,c,e,d,f,h,i){if(!(b=m))f=/([0-9]+).([0-9]+)/.exec(f),i.B&&"Android"==d&&f?(d=parseInt(f[1],10),i=parseInt(f[2],10),b=2==d&&2<=i||3==d&&1>i):b=m;return!b?m:"BuiltinBrowser"==a}));R(new Q("f",function(a,b,c,e,d,f,h,i){if(!(b=m))f=/([0-9]+).([0-9]+)/.exec(f),i.B&&"Android"==d&&f?(d=parseInt(f[1],10),i=parseInt(f[2],10),b=3==d&&1<=i||3<d):b=m;return!b?m:"BuiltinBrowser"==a}));R(new Q("d",function(a,b,c,e,d,f,h,i){b=m||i.xa&&10<=parseInt(f,10);return!b?m:"BuiltinBrowser"==a}));
R(new Q("a",function(a,b,c,e,d,f,h,i){var j;j=(j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,c,b,d,e,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==e&&a?(e=parseInt(a[1],10),a=parseInt(a[2],10),6<e||6==e&&1<=a):m}(a,b,c,e,d,f,h,i))||function(a,c,b,d,e,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==e&&a?(e=parseInt(a[1],10),f=parseInt(a[3],10),10<e||10==e&&4<=f):"Macintosh"==e&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i);return!j&&!("Ubuntu"==
d||"Linux"==d?k:m)?m:function(a,c){if("Chrome"==a){var b=/([0-9]+.[0-9]+).([0-9]+).([0-9]+)/.exec(c);if(b){var e=parseFloat(b[1]),d=parseInt(b[2],10),b=parseInt(b[3],10);if(!(6<=e)&&(4<e||4==e&&249<d||4==e&&249==d&&4<=b))return k}}return m}(a,b,c,e,d,f,h,i)}));
R(new Q("d",function(a,b,c,e,d,f,h,i){var j;j=(j=(j=(j=(j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,c,b,e,d,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==d&&a?(d=parseInt(a[1],10),a=parseInt(a[2],10),6<d||6==d&&1<=a):m}(a,b,c,e,d,f,h,i))||function(a,c,b,e,d,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==d&&a?(d=parseInt(a[1],10),f=parseInt(a[3],10),10<d||10==d&&4<=f):"Macintosh"==d&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i))||("Ubuntu"==
d||"Linux"==d?k:m)||function(a,c,b,d,e,f,h,i){a=/([0-9]+).([0-9]+)/.exec(f);return i.B&&"Android"==e&&a?(e=parseInt(a[1],10),i=parseInt(a[2],10),3==e&&1<=i||3<e):m}(a,b,c,e,d,f,h,i))||"CrOS"==d||function(a,c,b,d,e,f,i,h){return h.Q&&"iPad"==e?(a=/^([0-9]+)_([0-9]+)/.exec(f))?5<=parseInt(a[1],10):m:m}(a,b,c,e,d,f,h,i))||function(a,c,b,e,d,f,i,h){return h.R&&("iPhone"==d||"iPod"==d)?(a=/^([0-9]+)_([0-9]+)/.exec(f))?5<=parseInt(a[1],10):m:m}(a,b,c,e,d,f,h,i);return!j?m:function(a,c){if("Chrome"==a){var b=
/([0-9]+.[0-9]+).([0-9]+).([0-9]+)/.exec(c);if(b&&6<=parseFloat(b[1]))return k}}(a,b,c,e,d,f,h,i)}));
R(new Q("a",function(a,b,c,e,d,f,h,i){var j;j=(j=m||function(a,b,c,d,e,f,i,h){return h.Q&&"iPad"==e&&(a=/^([0-9]+)_([0-9]+)/.exec(f))?(b=parseInt(a[2],10),4==parseInt(a[1],10)&&2<=b):m}(a,b,c,e,d,f,h,i))||function(a,b,c,d,e,f,h,i){if(i.R&&("iPhone"==e||"iPod"==e))if(a=/^([0-9]+)_([0-9]+)/.exec(f))return b=parseInt(a[2],10),4==parseInt(a[1],10)&&2<=b;return m}(a,b,c,e,d,f,h,i);return!j?m:function(a,b){if("Chrome"==a){var c=/([0-9]+.[0-9]+).([0-9]+).([0-9]+)/.exec(b);if(c&&6<=parseFloat(c[1]))return k}}(a,
b,c,e,d,f,h,i)}));R(new Q("a",function(a,b,c,e,d,f,h,i){var j;j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,b,c,e,d,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==d&&a?(d=parseInt(a[1],10),a=parseInt(a[2],10),6<d||6==d&&1<=a):m}(a,b,c,e,d,f,h,i);return!j&&!("Ubuntu"==d||"Linux"==d?k:m)?m:function(a,b,c,d){return"Gecko"==c?(a=/1.9.1b[1-3]{1}/,/1.9.1/.test(d)&&!a.test(d)):m}(a,b,c,e,d,f,h,i)}));
R(new Q("b",function(a,b,c,e,d,f,h,i){var j;j=m||function(a,b,c,d,e,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==e&&a?(e=parseInt(a[1],10),f=parseInt(a[3],10),10<e||10==e&&4<=f):"Macintosh"==e&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i);return!j?m:function(a,b,c,d){return"Gecko"==c?(a=/1.9.1b[1-3]{1}/,/1.9.1/.test(d)&&!a.test(d)):m}(a,b,c,e,d,f,h,i)}));
R(new Q("d",function(a,b,c,e,d,f,h,i){var j;j=(j=(j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,b,c,d,e,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==e&&a?(e=parseInt(a[1],10),a=parseInt(a[2],10),6<e||6==e&&1<=a):m}(a,b,c,e,d,f,h,i))||function(a,b,c,e,d,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==d&&a?(d=parseInt(a[1],10),f=parseInt(a[3],10),10<d||10==d&&4<=f):"Macintosh"==d&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i))||("Ubuntu"==
d||"Linux"==d?k:m)||i.B&&"Android"==d;return!j?m:function(a,b,c,d){return"Gecko"==c&&(b=/([0-9]+.[0-9]+)(.([0-9]+)|)/.exec(d))?(a=parseFloat(b[1]),b=parseInt(b[3],10),1.9<a||1.9<=a&&1<b):m}(a,b,c,e,d,f,h,i)}));
R(new Q("i",function(a,b,c,e,d,f,h,i){var j;j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,b,c,d,e,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==e&&a?(e=parseInt(a[1],10),a=parseInt(a[2],10),6<e||6==e&&1<=a):m}(a,b,c,e,d,f,h,i);return!j?m:function(a,b,c,d,e,f,i){if("MSIE"==a)return(a=/([0-9]+.[0-9]+)/.exec(b))?6<=parseFloat(a[1])&&(i===g||9>i):m}(a,b,c,e,d,f,h,i)}));
R(new Q("d",function(a,b,c,e,d,f,h){if(!(b=m))c=/^([0-9]+).([0-9]+)/.exec(f),"Windows"==d&&c?(b=parseInt(c[1],10),c=parseInt(c[2],10),b=6<b||6==b&&1<=c):b=m;a=b||("Windows"==d&&"6.0"==f?k:m)?"MSIE"==a?9<=h:g:m;return a}));R(new Q("d",function(a,b,c,e,d,f,h,i){if(!(b=m))f=/^([0-9]+)/.exec(f),b=i.Va&&"Windows Phone"==d&&f?8<=parseInt(f[1],10):m;return!b?m:"MSIE"==a}));
R(new Q("a",function(a,b,c,e,d,f,h,i){var j;j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,b,c,d,e,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==e&&a?(e=parseInt(a[1],10),a=parseInt(a[2],10),6<e||6==e&&1<=a):m}(a,b,c,e,d,f,h,i);return!j&&!("Ubuntu"==d||"Linux"==d?k:m)?m:function(a,b){if("Opera"==a){var c=parseFloat(b);return 10.54<=c&&11.1>c}return m}(a,b,c,e,d,f,h,i)}));
R(new Q("b",function(a,b,c,e,d,f,h,i){var j;j=m||function(a,b,c,e,d,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==d&&a?(d=parseInt(a[1],10),f=parseInt(a[3],10),10<d||10==d&&4<=f):"Macintosh"==d&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i);return!j?m:function(a,b){if("Opera"==a){var c=parseFloat(b);return 10.54<=c&&11.1>c}return m}(a,b,c,e,d,f,h,i)}));
R(new Q("d",function(a,b,c,e,d,f,h,i){var j;j=(j=(j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,b,c,d,e,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==e&&a?(e=parseInt(a[1],10),a=parseInt(a[2],10),6<e||6==e&&1<=a):m}(a,b,c,e,d,f,h,i))||function(a,b,c,e,d,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==d&&a?(d=parseInt(a[1],10),f=parseInt(a[3],10),10<d||10==d&&4<=f):"Macintosh"==d&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i))||("Ubuntu"==
d||"Linux"==d?k:m)||i.B&&"Android"==d;return!j?m:"Opera"==a?11.1<=parseFloat(b):m}));R(new Q("b",function(a,b,c,e,d,f,h,i){var j;j=m||function(a,b,c,d,e,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==e&&a?(e=parseInt(a[1],10),f=parseInt(a[3],10),10<e||10==e&&4<=f):"Macintosh"==e&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i);return!j?m:function(a,b,c,e){return"Safari"==a&&"AppleWebKit"==c&&(a=/([0-9]+.[0-9]+)/.exec(e))?(a=parseFloat(a[1]),525.13<=a&&534.5>a):m}(a,b,c,e,d,f,h,i)}));
R(new Q("a",function(a,b,c,e,d,f,h,i){var j;j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,b,c,e,d,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==d&&a?(d=parseInt(a[1],10),a=parseInt(a[2],10),6<d||6==d&&1<=a):m}(a,b,c,e,d,f,h,i);return!j?m:function(a,b,c,d){return"Safari"==a&&"AppleWebKit"==c&&(a=/([0-9]+.[0-9]+)/.exec(d))?(a=parseFloat(a[1]),525.13<=a&&534.5>a):m}(a,b,c,e,d,f,h,i)}));
R(new Q("d",function(a,b,c,e,d,f,h,i){var j;j=(j=m||("Windows"==d&&"5.1"==f?k:m)||("Windows"==d&&"5.2"==f?k:m)||("Windows"==d&&"6.0"==f?k:m)||function(a,b,c,d,e,f){a=/^([0-9]+).([0-9]+)/.exec(f);return"Windows"==e&&a?(e=parseInt(a[1],10),a=parseInt(a[2],10),6<e||6==e&&1<=a):m}(a,b,c,e,d,f,h,i))||function(a,b,c,e,d,f){a=/^([0-9]+)(_|.)([0-9]+)/.exec(f);return"Macintosh"==d&&a?(d=parseInt(a[1],10),f=parseInt(a[3],10),10<d||10==d&&4<=f):"Macintosh"==d&&"Unknown"==f?k:m}(a,b,c,e,d,f,h,i);return!j?m:function(a,
b,c,d){return"Safari"==a&&"AppleWebKit"==c&&(a=/([0-9]+.[0-9]+)/.exec(d))?534.5<=parseFloat(a[1]):m}(a,b,c,e,d,f,h,i)}));
R(new Q("a",function(a,b,c,e,d,f,h,i){var j;j=(j=m||function(a,b,c,d,e,f,i,h){return h.Q&&"iPad"==e&&(a=/^([0-9]+)_([0-9]+)/.exec(f))?(b=parseInt(a[2],10),4==parseInt(a[1],10)&&2<=b):m}(a,b,c,e,d,f,h,i))||function(a,b,c,d,e,f,i,h){if(h.R&&("iPhone"==e||"iPod"==e))if(a=/^([0-9]+)_([0-9]+)/.exec(f))return b=parseInt(a[2],10),4==parseInt(a[1],10)&&2<=b;return m}(a,b,c,e,d,f,h,i);return!j?m:"Safari"==a&&"AppleWebKit"==c||"Unknown"==a&&"AppleWebKit"==c&&("iPhone"==d||"iPad"==d)?k:m}));
R(new Q("d",function(a,b,c,e,d,f,h,i){var j;j=(j=m||function(a,b,c,d,e,f,i,h){return h.Q&&"iPad"==e?(a=/^([0-9]+)_([0-9]+)/.exec(f))?5<=parseInt(a[1],10):m:m}(a,b,c,e,d,f,h,i))||function(a,b,c,d,e,f,i,h){return h.R&&("iPhone"==e||"iPod"==e)?(a=/^([0-9]+)_([0-9]+)/.exec(f))?5<=parseInt(a[1],10):m:m}(a,b,c,e,d,f,h,i);return!j?m:"Safari"==a&&"AppleWebKit"==c||"Unknown"==a&&"AppleWebKit"==c&&("iPhone"==d||"iPad"==d)?k:m}));var U=new function(){this.ba=[];this.z={}};Ka(new Ja("AllFonts",function(a,b){return b}));
Ka(new Ja("DefaultFourFontsWithSingleFvdFamilies",function(a,b,c){for(var e=0;e<b.length;e++){var d=b[e],f=a.replace(/(-1|-2)$/,"").slice(0,28)+"-"+d;c.push(new wa(f,[d]))}a={};for(d=0;d<b.length;d++)c=b[d],e=c.charAt(1),(a[e]||(a[e]=[])).push(c);c=[[4,3,2,1,5,6,7,8,9],[7,8,9,6,5,4,3,2,1]];e=[];for(d=0;d<c.length;d++)for(var f=c[d],h=0;h<f.length;h++){var i=f[h];if(a[i]){e=e.concat(a[i]);break}}c=e;e={};a=[];for(d=0;d<c.length;d++)f=c[d],e[f]||(e[f]=k,a.push(f));c=[];for(e=0;e<b.length;e++){d=b[e];
for(f=0;f<a.length;f++)h=a[f],h==d&&c.push(h)}return c}));U.z.a="AllFonts";U.z.b="AllFonts";U.z.d="AllFonts";U.z.f="AllFonts";U.z.i="DefaultFourFontsWithSingleFvdFamilies";var X=new function(){this.A={}};X.A.a=[];X.A.b=[];X.A.d=[];X.A.f=["observeddomain"];X.A.i=["observeddomain","fontmask"];var Oa=(new da(navigator.userAgent,document)).parse();window.Typekit||(window.Typekit={});
if(!window.Typekit.load){var Pa=function(a,b){setTimeout(a,b)},Y=new S(new V("//fonts.nokia.com/{id}.js"),new O(window),Oa,document.documentElement,Pa),Z=new T(window,Pa);window.Typekit.load=function(){Y.load.apply(Y,arguments)};window.Typekit.addKit=function(){Y.V.apply(Y,arguments)}}var Qa=l,Ra,$,Qa=new V("//p.typekit.net/p.gif?a=533731&f=14762.14763.14764.14765.14766.14767.14768.14769&h={host}&ht=sh&k=ypi0jvg&s=1&_={_}");Ra=new function(){var a=Qa;this.ga=l;this.ra=a};$=new Aa(new O(window));
$.wa="ypi0jvg";$.Z=new V("//fonts.nokia.com/k/ypi0jvg-{format}.css?3bb2a6e53c9684ffdc9a9bf41d5b2a62183a574751fd848f787439a977a54620814ca199afa669250281a910753f3cfc440d3fb397cc7048350ca6a32fd5c09ccc7d58c3301adfe14b0b00120529ea55b8c2a1b121641906e86d170ea02dc53f4600739ac242095fee3af3b8aab2c45af29734bb5fcc40371e0fb7e0c254b0");$.da=Ra;$.k.push(new P("nokia-pure-headline",["n2","n3","n4","n7","n8"]));$.k.push(new P("nokia-pure-text",["n3","n4","n7"]));
$.C.push(new sa([".tk-nokia-pure-headline","body"],[{name:"font-family",value:'"nokia-pure-headline","Segoe UI","Arial","Helvetica",sans-serif'}]));$.C.push(new sa(["body"],[{name:"font-family",value:'"nokia-pure-text","Segoe UI","Arial","Helvetica",sans-serif'}]));$.W=za;$.Y=X;$.aa=U;Z&&Z.ma.__webfonttypekitmodule__?(Z.V($),Z.load()):(Ba($,Oa),window.Typekit.addKit($));
})(this,document);
if (window.performance) {
  var t = window.performance.timing, start = t.fetchStart, loaded = t.domLoading;
  if (t.domContentLoaded) { loaded = Math.max(loaded, t.domContentLoaded); }
  if (t.domContentLoadedEventStart) { loaded = Math.max(loaded, t.domContentLoadedEventStart); }
  if (t.domInteractive) { loaded = Math.max(loaded, t.domInteractive); }
  // if browser took longer than 5 seconds to reach this point set a flag to optimize site for slow connections
  if (start > 0 && loaded > 0) {
    var a = document.getElementById('html-tag');
    a = a.attributes.getNamedItem('slowConnectionTimeout');
    var timeout = 5000;
    if (a) { timeout = a.value }
    window.slowConnection = loaded - start > timeout;
  }
}
if (window.location.search.indexOf("debugmode=screenshot")>0) {
  window.slowConnection = false;
}
if (window.location.search.indexOf("debugslow=")>0) {
  window.slowConnection = true;
}

{
  var fontsFailed = function() {
    var h = document.getElementById('html-tag');
    h.className = h.className.replace(/(\s|^)wf-loading(\s|$)/g, ' ');
  };
  if (window.slowConnection != true && window.typeKitConfig !== undefined) {
    // give typekit 2 seconds to load all fonts before forcefully viewing the site
    setTimeout(function() { fontsFailed(); }, 2000);
    try { Typekit.load(window.typeKitConfig); } catch (e) { fontsFailed(); }
  } else {
    fontsFailed();
  }
}
;
/* Modernizr 2.6.2 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-csscolumns-csstransitions-mq-addtest-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes
 */

;window.Modernizr=function(a,b,c){function z(a){i.cssText=a}function A(a,b){return z(l.join(a+";")+(b||""))}function B(a,b){return typeof a===b}function C(a,b){return!!~(""+a).indexOf(b)}function D(a,b){for(var d in a){var e=a[d];if(!C(e,"-")&&i[e]!==c)return b=="pfx"?e:!0}return!1}function E(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:B(f,"function")?f.bind(d||b):f}return!1}function F(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+n.join(d+" ")+d).split(" ");return B(b,"string")||B(b,"undefined")?D(e,b):(e=(a+" "+o.join(d+" ")+d).split(" "),E(e,b,c))}var d="2.6.2",e={},f=b.documentElement,g="modernizr",h=b.createElement(g),i=h.style,j,k={}.toString,l=" -webkit- -moz- -o- -ms- ".split(" "),m="Webkit Moz O ms",n=m.split(" "),o=m.toLowerCase().split(" "),p={},q={},r={},s=[],t=s.slice,u,v=function(a,c,d,e){var h,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:g+(d+1),l.appendChild(j);return h=["&#173;",'<style id="s',g,'">',a,"</style>"].join(""),l.id=g,(m?l:n).innerHTML+=h,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=f.style.overflow,f.style.overflow="hidden",f.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),f.style.overflow=k),!!i},w=function(b){var c=a.matchMedia||a.msMatchMedia;if(c)return c(b).matches;var d;return v("@media "+b+" { #"+g+" { position: absolute; } }",function(b){d=(a.getComputedStyle?getComputedStyle(b,null):b.currentStyle)["position"]=="absolute"}),d},x={}.hasOwnProperty,y;!B(x,"undefined")&&!B(x.call,"undefined")?y=function(a,b){return x.call(a,b)}:y=function(a,b){return b in a&&B(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=t.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(t.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(t.call(arguments)))};return e}),p.csscolumns=function(){return F("columnCount")},p.csstransitions=function(){return F("transition")};for(var G in p)y(p,G)&&(u=G.toLowerCase(),e[u]=p[G](),s.push((e[u]?"":"no-")+u));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)y(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof enableClasses!="undefined"&&enableClasses&&(f.className+=" "+(b?"":"no-")+a),e[a]=b}return e},z(""),h=j=null,e._version=d,e._prefixes=l,e._domPrefixes=o,e._cssomPrefixes=n,e.mq=w,e.testProp=function(a){return D([a])},e.testAllProps=F,e.testStyles=v,e.prefixed=function(a,b,c){return b?F(a,b,c):F(a,"pfx")},e}(this,this.document);
;(function(Modernizr, window) {
  Modernizr.addTest('positionfixed', function () {
    var test  = document.createElement('div'),
    control = test.cloneNode(false),
    fake = false,
    root = document.body || (function () {
      fake = true;
      return document.documentElement.appendChild(document.createElement('body'));
    }());

    var oldCssText = root.style.cssText;
    root.style.cssText = 'padding:0;margin:0';
    test.style.cssText = 'position:fixed;top:42px';
    root.appendChild(test);
    root.appendChild(control);

    var ret = test.offsetTop !== control.offsetTop;

    root.removeChild(test);
    root.removeChild(control);
    root.style.cssText = oldCssText;

    if (fake) {
      document.documentElement.removeChild(root);
    }

    return ret;
  });

  Modernizr.addTest('iospositionfixed', function () {
    var test  = document.createElement('div'),
    ret,
    fake = false,
    root = document.body || (function () {
    fake = true;
    return document.documentElement.appendChild(document.createElement('body'));
  }());

  if (typeof document.body.scrollIntoViewIfNeeded === 'function') {

    var oldCssText = root.style.cssText,
    testScrollTop = 20,
    originalScrollTop = window.pageYOffset;

    root.appendChild(test);

    test.style.cssText = 'position:fixed;top:0px;height:10px;';

    root.style.height="3000px";

    /* avoided hoisting for clarity */
    var testScroll = function() {
      if (ret === undefined) {
        test.scrollIntoViewIfNeeded();
        if (window.pageYOffset === testScrollTop) {
          ret = true;
        } else {
          ret = false;
        }
      }
      window.removeEventListener('scroll', testScroll, false);
    };

    window.addEventListener('scroll', testScrollTop, false);
    window.setTimeout(testScroll, 20); // ios 4 does'nt publish the scroll event on scrollto
    window.scrollTo(0, testScrollTop);
    testScroll();

    root.removeChild(test);
    root.style.cssText = oldCssText;
    window.scrollTo(0, originalScrollTop);

    } else {
      ret = Modernizr.positionfixed; // firefox and IE doesnt have document.body.scrollIntoViewIfNeeded, so we test with the original modernizr test
    }

    if (fake) {
    document.documentElement.removeChild(root);
    }

    return ret;
  });
})(Modernizr, window);
;(function(Modernizr, window) {
Modernizr.addTest('fullscreen',function(){
	var ancelFullScreen = 'ancelFullScreen'; //make string minifiable

	//FF9 pre-check
	if(document.mozCancelFullScreen && !document.mozFullScreenEnabled) return false;

	var limit = Modernizr._domPrefixes.length;
	for(var i = 0; i < limit; ++i) {
	  if( document[[Modernizr._domPrefixes[i].toLowerCase(),'C',ancelFullScreen].join('')])
	      return true;
	}
	return !!document[['c',ancelFullScreen].join('')] || false;
});
})(Modernizr, window);
// http://www.quirksmode.org/js/detect.html
var BrowserDetect = {
	init: function() {
		this.browser = this.searchString(this.dataBrowser) || 'An unknown browser';
		this.version = this.searchVersion(navigator.userAgent)
			|| this.searchVersion(navigator.appVersion)
			|| 'an unknown version';
		this.OS = this.searchString(this.dataOS) || 'an unknown OS';
	},
	searchString: function(data) {
		for (var i=0;i<data.length;i++) {
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) {
				if (dataString.indexOf(data[i].subString) != -1)
					return data[i].identity;
			} else if (dataProp) {
				return data[i].identity;
			}
		}
	},
	searchVersion: function(dataString) {
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return;
		return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
	},
	dataBrowser: [
		{
			string: navigator.userAgent,
			subString: 'Chrome',
			identity: 'Chrome'
		},
		{
			string: navigator.userAgent,
			subString: 'OmniWeb',
			identity: 'OmniWeb',
			versionSearch: 'OmniWeb/'
		},
        {
            string: navigator.userAgent,
            subString: 'SymbianOS',
            identity: 'Symbian',
            versionSearch: 'SymbianOS'
        },
		{
			string: navigator.userAgent,
			subString: 'Symbian',
			identity: 'Symbian',
			versionSearch: 'Symbian'
		},
        {
            string: navigator.userAgent,
            subString: 'Profile/MIDP',
            identity: 'Symbian'
        },
		{
			string: navigator.vendor,
			subString: 'Apple',
			identity: 'Safari',
			versionSearch: 'Version'
		},
		{
			prop: window.opera,
			identity: 'Opera',
			versionSearch: 'Version'
		},
		{
			string: navigator.vendor,
			subString: 'iCab',
			identity: 'iCab'
		},
		{
			string: navigator.vendor,
			subString: 'KDE',
			identity: 'Konqueror'
		},
		{
			string: navigator.userAgent,
			subString: 'Firefox',
			identity: 'Firefox'
		},
		{
			string: navigator.vendor,
			subString: 'Camino',
			identity: 'Camino'
		},
		{
			// for newer Netscapes (6+)
			string: navigator.userAgent,
			subString: 'Netscape',
			identity: 'Netscape'
		},
		{
			string: navigator.userAgent,
			subString: 'IEMobile',
			identity: 'IEMobile'
		},
		{
			string: navigator.userAgent,
			subString: 'XBLWP7',
			identity: 'IEMobile',
			versionSearch: 'MSIE'
		},
		{
			string: navigator.userAgent,
			subString: 'WPDesktop',
			identity: 'IEMobile',
			versionSearch: 'MSIE'
		},
		{
			string: navigator.userAgent,
			subString: 'MSIE',
			identity: 'Explorer',
			versionSearch: 'MSIE'
		},
        {
            string: navigator.userAgent,
            subString: 'OSRE',
            identity: 'Symbian'
        },
		{
			string: navigator.userAgent,
			subString: 'Gecko',
			identity: 'Mozilla',
			versionSearch: 'rv'
		},
		{
			// for older Netscapes (4-)
			string: navigator.userAgent,
			subString: 'Mozilla',
			identity: 'Netscape',
			versionSearch: 'Mozilla'
		}
	],
	dataOS: [
		{
			string: navigator.platform,
			subString: 'Win',
			identity: 'Windows'
		},
		{
			string: navigator.platform,
			subString: 'Mac',
			identity: 'Mac'
		},
		{
			string: navigator.userAgent,
			subString: 'iPhone',
			identity: 'iPhone/iPod'
		},
        {
			string: navigator.platform,
        	subString: 'Android',
        	identity: 'Android'
		},
		{
			string: navigator.platform,
			subString: 'Linux',
			identity: 'Linux'
		},
		{
			string: navigator.platform,
			subString: 'Symbian',
			identity: 'Symbian'
                }
	]
};

BrowserDetect.init();
// Various polyfills
// TODO: Move into better location?
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== "function") {
      // closest thing possible to the ECMAScript 5 internal IsCallable function
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function () {},
        fBound = function () {
          return fToBind.apply(this instanceof fNOP
                                 ? this
                                 : oThis || window,
                               aArgs.concat(Array.prototype.slice.call(arguments)));
        };

    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();

    return fBound;
  };
}

if (!Object.create) {
    Object.create = function (o) {
        if (arguments.length > 1) {
            throw new Error('Object.create implementation only accepts the first parameter.');
        }
        function F() {}
        F.prototype = o;
        return new F();
    };
}

function viewport() {
  var e = window, a = 'inner';
  if (!('innerWidth' in window )) {
      a = 'client';
      e = document.documentElement || document.body;
  }
  return { width : e[ a+'Width' ] , height : e[ a+'Height' ] };
}

;
/*! Copyright 2013 Brightcove, Inc. https://github.com/videojs/video.js/blob/master/LICENSE */

 (function() {var b=void 0,f=!0,h=null,l=!1;function m(){return function(){}}function p(a){return function(){return this[a]}}function r(a){return function(){return a}}var t;document.createElement("video");document.createElement("audio");function u(a,c,d){if("string"===typeof a){0===a.indexOf("#")&&(a=a.slice(1));if(u.Na[a])return u.Na[a];a=u.s(a)}if(!a||!a.nodeName)throw new TypeError("The element or ID supplied is not valid. (videojs)");return a.player||new u.ga(a,c,d)}var v=u;window.xd=window.yd=u;u.Qb="GENERATED_CDN_VSN";
u.Pb="https:"==document.location.protocol?"https://":"http://";u.options={techOrder:["html5","flash"],html5:{},flash:{swf:u.Pb+"vjs.zencdn.net/c/video-js.swf"},width:300,height:160,defaultVolume:0,children:{mediaLoader:{},posterImage:{},textTrackDisplay:{},loadingSpinner:{},bigPlayButton:{},controlBar:{}}};u.Na={};"GENERATED_CDN_VSN"!=u.Qb&&(v.options.flash.swf=u.Pb+"vjs.zencdn.net/"+u.Qb+"/video-js.swf");u.ma=u.CoreObject=m();
u.ma.extend=function(a){var c,d;a=a||{};c=a.init||a.g||this.prototype.init||this.prototype.g||m();d=function(){c.apply(this,arguments)};d.prototype=u.i.create(this.prototype);d.prototype.constructor=d;d.extend=u.ma.extend;d.create=u.ma.create;for(var e in a)a.hasOwnProperty(e)&&(d.prototype[e]=a[e]);return d};u.ma.create=function(){var a=u.i.create(this.prototype);this.apply(a,arguments);return a};
u.d=function(a,c,d){var e=u.getData(a);e.z||(e.z={});e.z[c]||(e.z[c]=[]);d.u||(d.u=u.u++);e.z[c].push(d);e.S||(e.disabled=l,e.S=function(c){if(!e.disabled){c=u.hc(c);var d=e.z[c.type];if(d)for(var d=d.slice(0),k=0,q=d.length;k<q&&!c.mc();k++)d[k].call(a,c)}});1==e.z[c].length&&(document.addEventListener?a.addEventListener(c,e.S,l):document.attachEvent&&a.attachEvent("on"+c,e.S))};
u.t=function(a,c,d){if(u.lc(a)){var e=u.getData(a);if(e.z)if(c){var g=e.z[c];if(g){if(d){if(d.u)for(e=0;e<g.length;e++)g[e].u===d.u&&g.splice(e--,1)}else e.z[c]=[];u.ec(a,c)}}else for(g in e.z)c=g,e.z[c]=[],u.ec(a,c)}};u.ec=function(a,c){var d=u.getData(a);0===d.z[c].length&&(delete d.z[c],document.removeEventListener?a.removeEventListener(c,d.S,l):document.detachEvent&&a.detachEvent("on"+c,d.S));u.Ab(d.z)&&(delete d.z,delete d.S,delete d.disabled);u.Ab(d)&&u.sc(a)};
u.hc=function(a){function c(){return f}function d(){return l}if(!a||!a.Bb){var e=a||window.event;a={};for(var g in e)a[g]=e[g];a.target||(a.target=a.srcElement||document);a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement;a.preventDefault=function(){e.preventDefault&&e.preventDefault();a.returnValue=l;a.zb=c};a.zb=d;a.stopPropagation=function(){e.stopPropagation&&e.stopPropagation();a.cancelBubble=f;a.Bb=c};a.Bb=d;a.stopImmediatePropagation=function(){e.stopImmediatePropagation&&e.stopImmediatePropagation();
a.mc=c;a.stopPropagation()};a.mc=d;if(a.clientX!=h){g=document.documentElement;var j=document.body;a.pageX=a.clientX+(g&&g.scrollLeft||j&&j.scrollLeft||0)-(g&&g.clientLeft||j&&j.clientLeft||0);a.pageY=a.clientY+(g&&g.scrollTop||j&&j.scrollTop||0)-(g&&g.clientTop||j&&j.clientTop||0)}a.which=a.charCode||a.keyCode;a.button!=h&&(a.button=a.button&1?0:a.button&4?1:a.button&2?2:0)}return a};
u.k=function(a,c){var d=u.lc(a)?u.getData(a):{},e=a.parentNode||a.ownerDocument;"string"===typeof c&&(c={type:c,target:a});c=u.hc(c);d.S&&d.S.call(a,c);if(e&&!c.Bb())u.k(e,c);else if(!e&&!c.zb()&&(d=u.getData(c.target),c.target[c.type])){d.disabled=f;if("function"===typeof c.target[c.type])c.target[c.type]();d.disabled=l}return!c.zb()};u.Q=function(a,c,d){u.d(a,c,function(){u.t(a,c,arguments.callee);d.apply(this,arguments)})};var w=Object.prototype.hasOwnProperty;
u.e=function(a,c){var d=document.createElement(a||"div"),e;for(e in c)w.call(c,e)&&(-1!==e.indexOf("aria-")||"role"==e?d.setAttribute(e,c[e]):d[e]=c[e]);return d};u.Y=function(a){return a.charAt(0).toUpperCase()+a.slice(1)};u.i={};u.i.create=Object.create||function(a){function c(){}c.prototype=a;return new c};u.i.sa=function(a,c,d){for(var e in a)w.call(a,e)&&c.call(d||this,e,a[e])};u.i.B=function(a,c){if(!c)return a;for(var d in c)w.call(c,d)&&(a[d]=c[d]);return a};
u.i.gc=function(a,c){var d,e,g;a=u.i.copy(a);for(d in c)w.call(c,d)&&(e=a[d],g=c[d],a[d]=u.i.nc(e)&&u.i.nc(g)?u.i.gc(e,g):c[d]);return a};u.i.copy=function(a){return u.i.B({},a)};u.i.nc=function(a){return!!a&&"object"===typeof a&&"[object Object]"===a.toString()&&a.constructor===Object};u.bind=function(a,c,d){function e(){return c.apply(a,arguments)}c.u||(c.u=u.u++);e.u=d?d+"_"+c.u:c.u;return e};u.qa={};u.u=1;u.expando="vdata"+(new Date).getTime();
u.getData=function(a){var c=a[u.expando];c||(c=a[u.expando]=u.u++,u.qa[c]={});return u.qa[c]};u.lc=function(a){a=a[u.expando];return!(!a||u.Ab(u.qa[a]))};u.sc=function(a){var c=a[u.expando];if(c){delete u.qa[c];try{delete a[u.expando]}catch(d){a.removeAttribute?a.removeAttribute(u.expando):a[u.expando]=h}}};u.Ab=function(a){for(var c in a)if(a[c]!==h)return l;return f};u.p=function(a,c){-1==(" "+a.className+" ").indexOf(" "+c+" ")&&(a.className=""===a.className?c:a.className+" "+c)};
u.w=function(a,c){if(-1!=a.className.indexOf(c)){for(var d=a.className.split(" "),e=d.length-1;0<=e;e--)d[e]===c&&d.splice(e,1);a.className=d.join(" ")}};u.ib=u.e("video");u.O=navigator.userAgent;u.Bc=!!u.O.match(/iPhone/i);u.Ac=!!u.O.match(/iPad/i);u.Cc=!!u.O.match(/iPod/i);u.Ub=u.Bc||u.Ac||u.Cc;var aa=u,x;var y=u.O.match(/OS (\d+)_/i);x=y&&y[1]?y[1]:b;aa.qd=x;u.ab=!!u.O.match(/Android.*AppleWebKit/i);var ba=u,z=u.O.match(/Android (\d+)\./i);ba.yc=z&&z[1]?z[1]:h;u.zc=function(){return!!u.O.match("Firefox")};
u.wb=function(a){var c={};if(a&&a.attributes&&0<a.attributes.length)for(var d=a.attributes,e,g,j=d.length-1;0<=j;j--){e=d[j].name;g=d[j].value;if("boolean"===typeof a[e]||-1!==",autoplay,controls,loop,muted,default,".indexOf(","+e+","))g=g!==h?f:l;c[e]=g}return c};u.td=function(a,c){var d="";document.defaultView&&document.defaultView.getComputedStyle?d=document.defaultView.getComputedStyle(a,"").getPropertyValue(c):a.currentStyle&&(d=a["client"+c.substr(0,1).toUpperCase()+c.substr(1)]+"px");return d};
u.yb=function(a,c){c.firstChild?c.insertBefore(a,c.firstChild):c.appendChild(a)};u.Nb={};u.s=function(a){0===a.indexOf("#")&&(a=a.slice(1));return document.getElementById(a)};u.Ha=function(a,c){c=c||a;var d=Math.floor(a%60),e=Math.floor(a/60%60),g=Math.floor(a/3600),j=Math.floor(c/60%60),k=Math.floor(c/3600),g=0<g||0<k?g+":":"";return g+(((g||10<=j)&&10>e?"0"+e:e)+":")+(10>d?"0"+d:d)};u.Gc=function(){document.body.focus();document.onselectstart=r(l)};u.ld=function(){document.onselectstart=r(f)};
u.trim=function(a){return a.toString().replace(/^\s+/,"").replace(/\s+$/,"")};u.round=function(a,c){c||(c=0);return Math.round(a*Math.pow(10,c))/Math.pow(10,c)};u.tb=function(a,c){return{length:1,start:function(){return a},end:function(){return c}}};
u.get=function(a,c,d){var e=0===a.indexOf("file:")||0===window.location.href.indexOf("file:")&&-1===a.indexOf("http");"undefined"===typeof XMLHttpRequest&&(window.XMLHttpRequest=function(){try{return new window.ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(a){}try{return new window.ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(c){}try{return new window.ActiveXObject("Msxml2.XMLHTTP")}catch(d){}throw Error("This browser does not support XMLHttpRequest.");});var g=new XMLHttpRequest;try{g.open("GET",a)}catch(j){d(j)}g.onreadystatechange=
function(){4===g.readyState&&(200===g.status||e&&0===g.status?c(g.responseText):d&&d())};try{g.send()}catch(k){d&&d(k)}};u.dd=function(a){try{var c=window.localStorage||l;c&&(c.volume=a)}catch(d){22==d.code||1014==d.code?u.log("LocalStorage Full (VideoJS)",d):18==d.code?u.log("LocalStorage not allowed (VideoJS)",d):u.log("LocalStorage Error (VideoJS)",d)}};u.jc=function(a){a.match(/^https?:\/\//)||(a=u.e("div",{innerHTML:'<a href="'+a+'">x</a>'}).firstChild.href);return a};
u.log=function(){u.log.history=u.log.history||[];u.log.history.push(arguments);window.console&&window.console.log(Array.prototype.slice.call(arguments))};u.Oc=function(a){var c,d;a.getBoundingClientRect&&a.parentNode&&(c=a.getBoundingClientRect());if(!c)return{left:0,top:0};a=document.documentElement;d=document.body;return{left:c.left+(window.pageXOffset||d.scrollLeft)-(a.clientLeft||d.clientLeft||0),top:c.top+(window.pageYOffset||d.scrollTop)-(a.clientTop||d.clientTop||0)}};
u.c=u.ma.extend({g:function(a,c,d){this.a=a;this.f=u.i.copy(this.f);c=this.options(c);this.L=c.id||(c.el&&c.el.id?c.el.id:a.id()+"_component_"+u.u++);this.Tc=c.name||h;this.b=c.el||this.e();this.D=[];this.rb={};this.R={};if((a=this.f)&&a.children){var e=this;u.i.sa(a.children,function(a,c){c!==l&&!c.loadEvent&&(e[a]=e.X(a,c))})}this.M(d)}});t=u.c.prototype;
t.C=function(){if(this.D)for(var a=this.D.length-1;0<=a;a--)this.D[a].C&&this.D[a].C();this.R=this.rb=this.D=h;this.t();this.b.parentNode&&this.b.parentNode.removeChild(this.b);u.sc(this.b);this.b=h};t.pc=p("a");t.options=function(a){return a===b?this.f:this.f=u.i.gc(this.f,a)};t.e=function(a,c){return u.e(a,c)};t.s=p("b");t.id=p("L");t.name=p("Tc");t.children=p("D");
t.X=function(a,c){var d,e;"string"===typeof a?(e=a,c=c||{},d=c.componentClass||u.Y(e),c.name=e,d=new window.videojs[d](this.a||this,c)):d=a;this.D.push(d);"function"===typeof d.id&&(this.rb[d.id()]=d);(e=e||d.name&&d.name())&&(this.R[e]=d);"function"===typeof d.el&&d.el()&&(this.ra||this.b).appendChild(d.el());return d};
t.removeChild=function(a){"string"===typeof a&&(a=this.R[a]);if(a&&this.D){for(var c=l,d=this.D.length-1;0<=d;d--)if(this.D[d]===a){c=f;this.D.splice(d,1);break}c&&(this.rb[a.id]=h,this.R[a.name]=h,(c=a.s())&&c.parentNode===(this.ra||this.b)&&(this.ra||this.b).removeChild(a.s()))}};t.P=r("");t.d=function(a,c){u.d(this.b,a,u.bind(this,c));return this};t.t=function(a,c){u.t(this.b,a,c);return this};t.Q=function(a,c){u.Q(this.b,a,u.bind(this,c));return this};t.k=function(a,c){u.k(this.b,a,c);return this};
t.M=function(a){a&&(this.$?a.call(this):(this.Qa===b&&(this.Qa=[]),this.Qa.push(a)));return this};t.Ta=function(){this.$=f;var a=this.Qa;if(a&&0<a.length){for(var c=0,d=a.length;c<d;c++)a[c].call(this);this.Qa=[];this.k("ready")}};t.p=function(a){u.p(this.b,a);return this};t.w=function(a){u.w(this.b,a);return this};t.show=function(){this.b.style.display="block";return this};t.v=function(){this.b.style.display="none";return this};t.ja=function(){this.w("vjs-fade-out");this.p("vjs-fade-in");return this};
t.Ga=function(){this.w("vjs-fade-in");this.p("vjs-fade-out");return this};t.oc=function(){this.p("vjs-lock-showing");return this};t.Ua=function(){this.w("vjs-lock-showing");return this};t.disable=function(){this.v();this.show=m();this.ja=m()};t.width=function(a,c){return A(this,"width",a,c)};t.height=function(a,c){return A(this,"height",a,c)};t.Kc=function(a,c){return this.width(a,f).height(c)};
function A(a,c,d,e){if(d!==b)return a.b.style[c]=-1!==(""+d).indexOf("%")||-1!==(""+d).indexOf("px")?d:"auto"===d?"":d+"px",e||a.k("resize"),a;if(!a.b)return 0;d=a.b.style[c];e=d.indexOf("px");return-1!==e?parseInt(d.slice(0,e),10):parseInt(a.b["offset"+u.Y(c)],10)}
u.o=u.c.extend({g:function(a,c){u.c.call(this,a,c);var d=l;this.d("touchstart",function(){d=f});this.d("touchmove",function(){d=l});var e=this;this.d("touchend",function(a){d&&e.n(a);a.preventDefault();a.stopPropagation()});this.d("click",this.n);this.d("focus",this.La);this.d("blur",this.Ka)}});t=u.o.prototype;
t.e=function(a,c){c=u.i.B({className:this.P(),innerHTML:'<div class="vjs-control-content"><span class="vjs-control-text">'+(this.pa||"Need Text")+"</span></div>",ad:"button","aria-live":"polite",tabIndex:0},c);return u.c.prototype.e.call(this,a,c)};t.P=function(){return"vjs-control "+u.c.prototype.P.call(this)};t.n=m();t.La=function(){u.d(document,"keyup",u.bind(this,this.aa))};t.aa=function(a){if(32==a.which||13==a.which)a.preventDefault(),this.n()};
t.Ka=function(){u.t(document,"keyup",u.bind(this,this.aa))};u.J=u.c.extend({g:function(a,c){u.c.call(this,a,c);this.Fc=this.R[this.f.barName];this.handle=this.R[this.f.handleName];a.d(this.qc,u.bind(this,this.update));this.d("mousedown",this.Ma);this.d("touchstart",this.Ma);this.d("focus",this.La);this.d("blur",this.Ka);this.d("click",this.n);this.a.d("controlsvisible",u.bind(this,this.update));a.M(u.bind(this,this.update));this.K={}}});t=u.J.prototype;
t.e=function(a,c){c=c||{};c.className+=" vjs-slider";c=u.i.B({ad:"slider","aria-valuenow":0,"aria-valuemin":0,"aria-valuemax":100,tabIndex:0},c);return u.c.prototype.e.call(this,a,c)};t.Ma=function(a){a.preventDefault();u.Gc();this.K.move=u.bind(this,this.Gb);this.K.end=u.bind(this,this.Hb);u.d(document,"mousemove",this.K.move);u.d(document,"mouseup",this.K.end);u.d(document,"touchmove",this.K.move);u.d(document,"touchend",this.K.end);this.Gb(a)};
t.Hb=function(){u.ld();u.t(document,"mousemove",this.K.move,l);u.t(document,"mouseup",this.K.end,l);u.t(document,"touchmove",this.K.move,l);u.t(document,"touchend",this.K.end,l);this.update()};t.update=function(){if(this.b){var a,c=this.xb(),d=this.handle,e=this.Fc;isNaN(c)&&(c=0);a=c;if(d){a=this.b.offsetWidth;var g=d.s().offsetWidth;a=g?g/a:0;c*=1-a;a=c+a/2;d.s().style.left=u.round(100*c,2)+"%"}e.s().style.width=u.round(100*a,2)+"%"}};
function B(a,c){var d,e,g,j;d=a.b;e=u.Oc(d);j=g=d.offsetWidth;d=a.handle;if(a.f.md)return j=e.top,e=c.changedTouches?c.changedTouches[0].pageY:c.pageY,d&&(d=d.s().offsetHeight,j+=d/2,g-=d),Math.max(0,Math.min(1,(j-e+g)/g));g=e.left;e=c.changedTouches?c.changedTouches[0].pageX:c.pageX;d&&(d=d.s().offsetWidth,g+=d/2,j-=d);return Math.max(0,Math.min(1,(e-g)/j))}t.La=function(){u.d(document,"keyup",u.bind(this,this.aa))};
t.aa=function(a){37==a.which?(a.preventDefault(),this.vc()):39==a.which&&(a.preventDefault(),this.wc())};t.Ka=function(){u.t(document,"keyup",u.bind(this,this.aa))};t.n=function(a){a.stopImmediatePropagation();a.preventDefault()};u.ha=u.c.extend();u.ha.prototype.defaultValue=0;u.ha.prototype.e=function(a,c){c=c||{};c.className+=" vjs-slider-handle";c=u.i.B({innerHTML:'<span class="vjs-control-text">'+this.defaultValue+"</span>"},c);return u.c.prototype.e.call(this,"div",c)};u.na=u.c.extend();
function ca(a,c){a.X(c);c.d("click",u.bind(a,function(){this.Ua()}))}u.na.prototype.e=function(){var a=this.options().Ic||"ul";this.ra=u.e(a,{className:"vjs-menu-content"});a=u.c.prototype.e.call(this,"div",{append:this.ra,className:"vjs-menu"});a.appendChild(this.ra);u.d(a,"click",function(a){a.preventDefault();a.stopImmediatePropagation()});return a};u.I=u.o.extend({g:function(a,c){u.o.call(this,a,c);this.selected(c.selected)}});
u.I.prototype.e=function(a,c){return u.o.prototype.e.call(this,"li",u.i.B({className:"vjs-menu-item",innerHTML:this.f.label},c))};u.I.prototype.n=function(){this.selected(f)};u.I.prototype.selected=function(a){a?(this.p("vjs-selected"),this.b.setAttribute("aria-selected",f)):(this.w("vjs-selected"),this.b.setAttribute("aria-selected",l))};
u.ea=u.o.extend({g:function(a,c){u.o.call(this,a,c);this.ua=this.Fa();this.X(this.ua);this.G&&0===this.G.length&&this.v();this.d("keyup",this.aa);this.b.setAttribute("aria-haspopup",f);this.b.setAttribute("role","button")}});t=u.ea.prototype;t.oa=l;t.Fa=function(){var a=new u.na(this.a);this.options().title&&a.s().appendChild(u.e("li",{className:"vjs-menu-title",innerHTML:u.Y(this.A),jd:-1}));if(this.G=this.sb())for(var c=0;c<this.G.length;c++)ca(a,this.G[c]);return a};t.sb=m();
t.P=function(){return this.className+" vjs-menu-button "+u.o.prototype.P.call(this)};t.La=m();t.Ka=m();t.n=function(){this.Q("mouseout",u.bind(this,function(){this.ua.Ua();this.b.blur()}));this.oa?C(this):D(this)};t.aa=function(a){a.preventDefault();32==a.which||13==a.which?this.oa?C(this):D(this):27==a.which&&this.oa&&C(this)};function D(a){a.oa=f;a.ua.oc();a.b.setAttribute("aria-pressed",f);a.G&&0<a.G.length&&a.G[0].s().focus()}function C(a){a.oa=l;a.ua.Ua();a.b.setAttribute("aria-pressed",l)}
u.ga=u.c.extend({g:function(a,c,d){this.N=a;c=u.i.B(da(a),c);this.r={};this.rc=c.poster;this.Ea=c.controls;c.customControlsOnMobile!==f&&(u.Ub||u.ab)?(a.controls=c.controls,this.Ea=l):a.controls=l;u.c.call(this,this,c,d);this.Q("play",function(a){u.k(this.b,{type:"firstplay",target:this.b})||(a.preventDefault(),a.stopPropagation(),a.stopImmediatePropagation())});this.d("ended",this.Vc);this.d("play",this.Jb);this.d("firstplay",this.Wc);this.d("pause",this.Ib);this.d("progress",this.Yc);this.d("durationchange",
this.Uc);this.d("error",this.Fb);this.d("fullscreenchange",this.Xc);u.Na[this.L]=this;c.plugins&&u.i.sa(c.plugins,function(a,c){this[a](c)},this)}});t=u.ga.prototype;t.f=u.options;t.C=function(){u.Na[this.L]=h;this.N&&this.N.player&&(this.N.player=h);this.b&&this.b.player&&(this.b.player=h);clearInterval(this.Pa);this.va();this.h&&this.h.C();u.c.prototype.C.call(this)};
function da(a){var c={sources:[],tracks:[]};u.i.B(c,u.wb(a));if(a.hasChildNodes())for(var d,e=a.childNodes,g=0,j=e.length;g<j;g++)a=e[g],d=a.nodeName.toLowerCase(),"source"===d?c.sources.push(u.wb(a)):"track"===d&&c.tracks.push(u.wb(a));return c}
t.e=function(){var a=this.b=u.c.prototype.e.call(this,"div"),c=this.N;c.removeAttribute("width");c.removeAttribute("height");if(c.hasChildNodes())for(var d=c.childNodes.length,e=0,g=c.childNodes;e<d;e++)("source"==g[0].nodeName.toLowerCase()||"track"==g[0].nodeName.toLowerCase())&&c.removeChild(g[0]);c.id=c.id||"vjs_video_"+u.u++;a.id=c.id;a.className=c.className;c.id+="_html5_api";c.className="vjs-tech";c.player=a.player=this;this.p("vjs-paused");this.width(this.f.width,f);this.height(this.f.height,
f);c.parentNode&&c.parentNode.insertBefore(a,c);u.yb(c,a);return a};
function E(a,c,d){a.h?F(a):"Html5"!==c&&a.N&&(a.b.removeChild(a.N),a.N.pc=h,a.N=h);a.ba=c;a.$=l;var e=u.i.B({source:d,parentEl:a.b},a.f[c.toLowerCase()]);d&&(d.src==a.r.src&&0<a.r.currentTime&&(e.startTime=a.r.currentTime),a.r.src=d.src);a.h=new window.videojs[c](a,e);a.h.M(function(){this.a.Ta();if(!this.j.Lb){var a=this.a;a.Db=f;a.Pa=setInterval(u.bind(a,function(){this.r.nb<this.buffered().end(0)?this.k("progress"):1==G(this)&&(clearInterval(this.Pa),this.k("progress"))}),500);a.h.Q("progress",
function(){this.j.Lb=f;var a=this.a;a.Db=l;clearInterval(a.Pa)})}this.j.Ob||(a=this.a,a.Eb=f,a.d("play",a.xc),a.d("pause",a.va),a.h.Q("timeupdate",function(){this.j.Ob=f;H(this.a)}))})}function F(a){a.$=l;a.h.C();a.Db&&(a.Db=l,clearInterval(a.Pa));a.Eb&&H(a);a.h=l}function H(a){a.Eb=l;a.va();a.t("play",a.xc);a.t("pause",a.va)}t.xc=function(){this.fc&&this.va();this.fc=setInterval(u.bind(this,function(){this.k("timeupdate")}),250)};t.va=function(){clearInterval(this.fc)};
t.Vc=function(){this.f.loop&&(this.currentTime(0),this.play())};t.Jb=function(){u.w(this.b,"vjs-paused");u.p(this.b,"vjs-playing")};t.Wc=function(){this.f.starttime&&this.currentTime(this.f.starttime)};t.Ib=function(){u.w(this.b,"vjs-playing");u.p(this.b,"vjs-paused")};t.Yc=function(){1==G(this)&&this.k("loadedalldata")};t.Uc=function(){this.duration(I(this,"duration"))};t.Fb=function(a){u.log("Video Error",a)};t.Xc=function(){this.F?this.p("vjs-fullscreen"):this.w("vjs-fullscreen")};
function J(a,c,d){if(a.h&&a.h.$)a.h.M(function(){this[c](d)});else try{a.h[c](d)}catch(e){throw u.log(e),e;}}function I(a,c){if(a.h.$)try{return a.h[c]()}catch(d){throw a.h[c]===b?u.log("Video.js: "+c+" method not defined for "+a.ba+" playback technology.",d):"TypeError"==d.name?(u.log("Video.js: "+c+" unavailable on "+a.ba+" playback technology element.",d),a.h.$=l):u.log(d),d;}}t.play=function(){J(this,"play");return this};t.pause=function(){J(this,"pause");return this};
t.paused=function(){return I(this,"paused")===l?l:f};t.currentTime=function(a){return a!==b?(this.r.vd=a,J(this,"setCurrentTime",a),this.Eb&&this.k("timeupdate"),this):this.r.currentTime=I(this,"currentTime")||0};t.duration=function(a){return a!==b?(this.r.duration=parseFloat(a),this):this.r.duration};t.buffered=function(){var a=I(this,"buffered"),c=this.r.nb=this.r.nb||0;a&&(0<a.length&&a.end(0)!==c)&&(c=a.end(0),this.r.nb=c);return u.tb(0,c)};
function G(a){return a.duration()?a.buffered().end(0)/a.duration():0}t.volume=function(a){if(a!==b)return a=Math.max(0,Math.min(1,parseFloat(a))),this.r.volume=a,J(this,"setVolume",a),u.dd(a),this;a=parseFloat(I(this,"volume"));return isNaN(a)?1:a};t.muted=function(a){return a!==b?(J(this,"setMuted",a),this):I(this,"muted")||l};t.Sa=function(){return I(this,"supportsFullScreen")||l};
t.Ra=function(){var a=u.Nb.Ra;this.F=f;a?(u.d(document,a.Z,u.bind(this,function(){this.F=document[a.F];this.F===l&&u.t(document,a.Z,arguments.callee)})),this.h.j.Ia===l&&this.f.flash.iFrameMode!==f&&(this.pause(),F(this),u.d(document,a.Z,u.bind(this,function(){u.t(document,a.Z,arguments.callee);E(this,this.ba,{src:this.r.src})}))),this.b[a.tc](),this.k("fullscreenchange")):this.h.Sa()?J(this,"enterFullScreen"):(this.Qc=f,this.Lc=document.documentElement.style.overflow,u.d(document,"keydown",u.bind(this,
this.ic)),document.documentElement.style.overflow="hidden",u.p(document.body,"vjs-full-window"),this.k("enterFullWindow"),this.k("fullscreenchange"));return this};function K(a){var c=u.Nb.Ra;a.F=l;c?(a.h.j.Ia===l&&a.f.flash.iFrameMode!==f&&(a.pause(),F(a),u.d(document,c.Z,u.bind(a,function(){u.t(document,c.Z,arguments.callee);E(this,this.ba,{src:this.r.src})}))),document[c.pb](),a.k("fullscreenchange")):a.h.Sa()?J(a,"exitFullScreen"):(L(a),a.k("fullscreenchange"))}
t.ic=function(a){27===a.keyCode&&(this.F===f?K(this):L(this))};function L(a){a.Qc=l;u.t(document,"keydown",a.ic);document.documentElement.style.overflow=a.Lc;u.w(document.body,"vjs-full-window");a.k("exitFullWindow")}
t.src=function(a){if(a instanceof Array){var c;a:{c=a;for(var d=0,e=this.f.techOrder;d<e.length;d++){var g=u.Y(e[d]),j=window.videojs[g];if(j.isSupported())for(var k=0,q=c;k<q.length;k++){var n=q[k];if(j.canPlaySource(n)){c={source:n,h:g};break a}}}c=l}c?(a=c.source,c=c.h,c==this.ba?this.src(a):E(this,c,a)):this.b.appendChild(u.e("p",{innerHTML:'Sorry, no compatible source and playback technology were found for this video. Try using another browser like <a href="http://bit.ly/ccMUEC">Chrome</a> or download the latest <a href="http://adobe.ly/mwfN1">Adobe Flash Player</a>.'}))}else a instanceof
Object?window.videojs[this.ba].canPlaySource(a)?this.src(a.src):this.src([a]):(this.r.src=a,this.$?(J(this,"src",a),"auto"==this.f.preload&&this.load(),this.f.autoplay&&this.play()):this.M(function(){this.src(a)}));return this};t.load=function(){J(this,"load");return this};t.currentSrc=function(){return I(this,"currentSrc")||this.r.src||""};t.Oa=function(a){return a!==b?(J(this,"setPreload",a),this.f.preload=a,this):I(this,"preload")};
t.autoplay=function(a){return a!==b?(J(this,"setAutoplay",a),this.f.autoplay=a,this):I(this,"autoplay")};t.loop=function(a){return a!==b?(J(this,"setLoop",a),this.f.loop=a,this):I(this,"loop")};t.poster=function(a){a!==b&&(this.rc=a);return this.rc};t.controls=function(a){a!==b&&this.Ea!==a&&(this.Ea=!!a,this.k("controlschange"));return this.Ea};t.error=function(){return I(this,"error")};var M,N,O;O=document.createElement("div");N={};
O.rd!==b?(N.tc="requestFullscreen",N.pb="exitFullscreen",N.Z="fullscreenchange",N.F="fullScreen"):(document.mozCancelFullScreen?(M="moz",N.F=M+"FullScreen"):(M="webkit",N.F=M+"IsFullScreen"),O[M+"RequestFullScreen"]&&(N.tc=M+"RequestFullScreen",N.pb=M+"CancelFullScreen"),N.Z=M+"fullscreenchange");document[N.pb]&&(u.Nb.Ra=N);
u.da=u.c.extend({g:function(a,c){u.c.call(this,a,c);a.controls()||this.disable();a.Q("play",u.bind(this,function(){var a,c=u.bind(this,this.ja),g=u.bind(this,this.Ga);this.ja();"ontouchstart"in window||(this.a.d("mouseover",c),this.a.d("mouseout",g),this.a.d("pause",u.bind(this,this.oc)),this.a.d("play",u.bind(this,this.Ua)));a=l;this.a.d("touchstart",function(){a=f});this.a.d("touchmove",function(){a=l});this.a.d("touchend",u.bind(this,function(c){var e;a&&(e=this.s().className.search("fade-in"),
-1!==e?this.Ga():this.ja());a=l;this.a.paused()||c.preventDefault()}))}))}});u.da.prototype.f={wd:"play",children:{playToggle:{},currentTimeDisplay:{},timeDivider:{},durationDisplay:{},remainingTimeDisplay:{},progressControl:{},fullscreenToggle:{},volumeControl:{},muteToggle:{}}};u.da.prototype.e=function(){return u.e("div",{className:"vjs-control-bar"})};u.da.prototype.ja=function(){u.c.prototype.ja.call(this);this.a.k("controlsvisible")};
u.da.prototype.Ga=function(){u.c.prototype.Ga.call(this);this.a.k("controlshidden")};u.Xb=u.o.extend({g:function(a,c){u.o.call(this,a,c);a.d("play",u.bind(this,this.Jb));a.d("pause",u.bind(this,this.Ib))}});t=u.Xb.prototype;t.pa="Play";t.P=function(){return"vjs-play-control "+u.o.prototype.P.call(this)};t.n=function(){this.a.paused()?this.a.play():this.a.pause()};t.Jb=function(){u.w(this.b,"vjs-paused");u.p(this.b,"vjs-playing");this.b.children[0].children[0].innerHTML="Pause"};
t.Ib=function(){u.w(this.b,"vjs-playing");u.p(this.b,"vjs-paused");this.b.children[0].children[0].innerHTML="Play"};u.Ya=u.c.extend({g:function(a,c){u.c.call(this,a,c);a.d("timeupdate",u.bind(this,this.ya))}});
u.Ya.prototype.e=function(){var a=u.c.prototype.e.call(this,"div",{className:"vjs-current-time vjs-time-controls vjs-control"});this.content=u.e("div",{className:"vjs-current-time-display",innerHTML:'<span class="vjs-control-text">Current Time </span>0:00',"aria-live":"off"});a.appendChild(u.e("div").appendChild(this.content));return a};
u.Ya.prototype.ya=function(){var a=this.a.Mb?this.a.r.currentTime:this.a.currentTime();this.content.innerHTML='<span class="vjs-control-text">Current Time </span>'+u.Ha(a,this.a.duration())};u.Za=u.c.extend({g:function(a,c){u.c.call(this,a,c);a.d("timeupdate",u.bind(this,this.ya))}});
u.Za.prototype.e=function(){var a=u.c.prototype.e.call(this,"div",{className:"vjs-duration vjs-time-controls vjs-control"});this.content=u.e("div",{className:"vjs-duration-display",innerHTML:'<span class="vjs-control-text">Duration Time </span>0:00',"aria-live":"off"});a.appendChild(u.e("div").appendChild(this.content));return a};u.Za.prototype.ya=function(){this.a.duration()&&(this.content.innerHTML='<span class="vjs-control-text">Duration Time </span>'+u.Ha(this.a.duration()))};
u.ac=u.c.extend({g:function(a,c){u.c.call(this,a,c)}});u.ac.prototype.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-time-divider",innerHTML:"<div><span>/</span></div>"})};u.gb=u.c.extend({g:function(a,c){u.c.call(this,a,c);a.d("timeupdate",u.bind(this,this.ya))}});
u.gb.prototype.e=function(){var a=u.c.prototype.e.call(this,"div",{className:"vjs-remaining-time vjs-time-controls vjs-control"});this.content=u.e("div",{className:"vjs-remaining-time-display",innerHTML:'<span class="vjs-control-text">Remaining Time </span>-0:00',"aria-live":"off"});a.appendChild(u.e("div").appendChild(this.content));return a};
u.gb.prototype.ya=function(){this.a.duration()&&this.a.duration()&&(this.content.innerHTML='<span class="vjs-control-text">Remaining Time </span>-'+u.Ha(this.a.duration()-this.a.currentTime()))};u.Aa=u.o.extend({g:function(a,c){u.o.call(this,a,c)}});u.Aa.prototype.pa="Fullscreen";u.Aa.prototype.P=function(){return"vjs-fullscreen-control "+u.o.prototype.P.call(this)};
u.Aa.prototype.n=function(){this.a.F?(K(this.a),this.b.children[0].children[0].innerHTML="Fullscreen"):(this.a.Ra(),this.b.children[0].children[0].innerHTML="Non-Fullscreen")};u.fb=u.c.extend({g:function(a,c){u.c.call(this,a,c)}});u.fb.prototype.f={children:{seekBar:{}}};u.fb.prototype.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-progress-control vjs-control"})};u.Yb=u.J.extend({g:function(a,c){u.J.call(this,a,c);a.d("timeupdate",u.bind(this,this.xa));a.M(u.bind(this,this.xa))}});
t=u.Yb.prototype;t.f={children:{loadProgressBar:{},playProgressBar:{},seekHandle:{}},barName:"playProgressBar",handleName:"seekHandle"};t.qc="timeupdate";t.e=function(){return u.J.prototype.e.call(this,"div",{className:"vjs-progress-holder","aria-label":"video progress bar"})};t.xa=function(){var a=this.a.Mb?this.a.r.currentTime:this.a.currentTime();this.b.setAttribute("aria-valuenow",u.round(100*this.xb(),2));this.b.setAttribute("aria-valuetext",u.Ha(a,this.a.duration()))};
t.xb=function(){return this.a.currentTime()/this.a.duration()};t.Ma=function(a){u.J.prototype.Ma.call(this,a);this.a.Mb=f;this.nd=!this.a.paused();this.a.pause()};t.Gb=function(a){a=B(this,a)*this.a.duration();a==this.a.duration()&&(a-=0.1);this.a.currentTime(a)};t.Hb=function(a){u.J.prototype.Hb.call(this,a);this.a.Mb=l;this.nd&&this.a.play()};t.wc=function(){this.a.currentTime(this.a.currentTime()+5)};t.vc=function(){this.a.currentTime(this.a.currentTime()-5)};
u.bb=u.c.extend({g:function(a,c){u.c.call(this,a,c);a.d("progress",u.bind(this,this.update))}});u.bb.prototype.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-load-progress",innerHTML:'<span class="vjs-control-text">Loaded: 0%</span>'})};u.bb.prototype.update=function(){this.b.style&&(this.b.style.width=u.round(100*G(this.a),2)+"%")};u.Wb=u.c.extend({g:function(a,c){u.c.call(this,a,c)}});
u.Wb.prototype.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-play-progress",innerHTML:'<span class="vjs-control-text">Progress: 0%</span>'})};u.hb=u.ha.extend();u.hb.prototype.defaultValue="00:00";u.hb.prototype.e=function(){return u.ha.prototype.e.call(this,"div",{className:"vjs-seek-handle"})};u.kb=u.c.extend({g:function(a,c){u.c.call(this,a,c);a.h&&(a.h.j&&a.h.j.T===l)&&this.p("vjs-hidden");a.d("loadstart",u.bind(this,function(){a.h.j&&a.h.j.T===l?this.p("vjs-hidden"):this.w("vjs-hidden")}))}});
u.kb.prototype.f={children:{volumeBar:{}}};u.kb.prototype.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-volume-control vjs-control"})};u.jb=u.J.extend({g:function(a,c){u.J.call(this,a,c);a.d("volumechange",u.bind(this,this.xa));a.M(u.bind(this,this.xa));setTimeout(u.bind(this,this.update),0)}});t=u.jb.prototype;t.xa=function(){this.b.setAttribute("aria-valuenow",u.round(100*this.a.volume(),2));this.b.setAttribute("aria-valuetext",u.round(100*this.a.volume(),2)+"%")};
t.f={children:{volumeLevel:{},volumeHandle:{}},barName:"volumeLevel",handleName:"volumeHandle"};t.qc="volumechange";t.e=function(){return u.J.prototype.e.call(this,"div",{className:"vjs-volume-bar","aria-label":"volume level"})};t.Gb=function(a){this.a.volume(B(this,a))};t.xb=function(){return this.a.muted()?0:this.a.volume()};t.wc=function(){this.a.volume(this.a.volume()+0.1)};t.vc=function(){this.a.volume(this.a.volume()-0.1)};u.bc=u.c.extend({g:function(a,c){u.c.call(this,a,c)}});
u.bc.prototype.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-volume-level",innerHTML:'<span class="vjs-control-text"></span>'})};u.lb=u.ha.extend();u.lb.prototype.defaultValue="00:00";u.lb.prototype.e=function(){return u.ha.prototype.e.call(this,"div",{className:"vjs-volume-handle"})};
u.fa=u.o.extend({g:function(a,c){u.o.call(this,a,c);a.d("volumechange",u.bind(this,this.update));a.h&&(a.h.j&&a.h.j.T===l)&&this.p("vjs-hidden");a.d("loadstart",u.bind(this,function(){a.h.j&&a.h.j.T===l?this.p("vjs-hidden"):this.w("vjs-hidden")}))}});u.fa.prototype.e=function(){return u.o.prototype.e.call(this,"div",{className:"vjs-mute-control vjs-control",innerHTML:'<div><span class="vjs-control-text">Mute</span></div>'})};u.fa.prototype.n=function(){this.a.muted(this.a.muted()?l:f)};
u.fa.prototype.update=function(){var a=this.a.volume(),c=3;0===a||this.a.muted()?c=0:0.33>a?c=1:0.67>a&&(c=2);this.a.muted()?"Unmute"!=this.b.children[0].children[0].innerHTML&&(this.b.children[0].children[0].innerHTML="Unmute"):"Mute"!=this.b.children[0].children[0].innerHTML&&(this.b.children[0].children[0].innerHTML="Mute");for(a=0;4>a;a++)u.w(this.b,"vjs-vol-"+a);u.p(this.b,"vjs-vol-"+c)};
u.Ca=u.ea.extend({g:function(a,c){u.ea.call(this,a,c);a.d("volumechange",u.bind(this,this.update));a.h&&(a.h.j&&a.h.j.T===l)&&this.p("vjs-hidden");a.d("loadstart",u.bind(this,function(){a.h.j&&a.h.j.T===l?this.p("vjs-hidden"):this.w("vjs-hidden")}));this.p("vjs-menu-button")}});u.Ca.prototype.Fa=function(){var a=new u.na(this.a,{Ic:"div"}),c=new u.jb(this.a,u.i.B({md:f},this.f.zd));a.X(c);return a};u.Ca.prototype.n=function(){u.fa.prototype.n.call(this);u.ea.prototype.n.call(this)};
u.Ca.prototype.e=function(){return u.o.prototype.e.call(this,"div",{className:"vjs-volume-menu-button vjs-menu-button vjs-control",innerHTML:'<div><span class="vjs-control-text">Mute</span></div>'})};u.Ca.prototype.update=u.fa.prototype.update;u.eb=u.o.extend({g:function(a,c){u.o.call(this,a,c);(!a.poster()||!a.controls())&&this.v();a.d("play",u.bind(this,this.v))}});
u.eb.prototype.e=function(){var a=u.e("div",{className:"vjs-poster",tabIndex:-1}),c=this.a.poster();c&&("backgroundSize"in a.style?a.style.backgroundImage='url("'+c+'")':a.appendChild(u.e("img",{src:c})));return a};u.eb.prototype.n=function(){this.a.play()};
u.Vb=u.c.extend({g:function(a,c){u.c.call(this,a,c);a.d("canplay",u.bind(this,this.v));a.d("canplaythrough",u.bind(this,this.v));a.d("playing",u.bind(this,this.v));a.d("seeked",u.bind(this,this.v));a.d("seeking",u.bind(this,this.show));a.d("seeked",u.bind(this,this.v));a.d("error",u.bind(this,this.show));a.d("waiting",u.bind(this,this.show))}});u.Vb.prototype.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-loading-spinner"})};
u.Wa=u.o.extend({g:function(a,c){u.o.call(this,a,c);a.controls()||this.v();a.d("play",u.bind(this,this.v))}});u.Wa.prototype.e=function(){return u.o.prototype.e.call(this,"div",{className:"vjs-big-play-button",innerHTML:"<span></span>","aria-label":"play video"})};u.Wa.prototype.n=function(){this.a.play()};u.q=u.c.extend({g:function(a,c,d){u.c.call(this,a,c,d)}});u.q.prototype.n=u.ab?m():function(){this.a.controls()&&(this.a.paused()?this.a.play():this.a.pause())};u.q.prototype.j={T:f,Ia:l,Lb:l,Ob:l};
u.media={};u.media.Va="play pause paused currentTime setCurrentTime duration buffered volume setVolume muted setMuted width height supportsFullScreen enterFullScreen src load currentSrc preload setPreload autoplay setAutoplay loop setLoop error networkState readyState seeking initialTime startOffsetTime played seekable ended videoTracks audioTracks videoWidth videoHeight textTracks defaultPlaybackRate playbackRate mediaGroup controller controls defaultMuted".split(" ");
function ea(){var a=u.media.Va[i];return function(){throw Error('The "'+a+"\" method is not available on the playback technology's API");}}for(var i=u.media.Va.length-1;0<=i;i--)u.q.prototype[u.media.Va[i]]=ea();
u.m=u.q.extend({g:function(a,c,d){this.j.T=u.m.Hc();this.j.Sc=!u.Ub;this.j.Ia=f;u.q.call(this,a,c,d);(c=c.source)&&this.b.currentSrc==c.src?a.k("loadstart"):c&&(this.b.src=c.src);a.M(function(){this.f.autoplay&&this.paused()&&(this.N.poster=h,this.play())});this.d("click",this.n);for(a=u.m.$a.length-1;0<=a;a--)u.d(this.b,u.m.$a[a],u.bind(this.a,this.Nc));this.Ta()}});t=u.m.prototype;t.C=function(){u.q.prototype.C.call(this)};
t.e=function(){var a=this.a,c=a.N;if(!c||this.j.Sc===l)c?(a.s().removeChild(c),c=c.cloneNode(l)):c=u.e("video",{id:a.id()+"_html5_api",className:"vjs-tech"}),c.player=a,u.yb(c,a.s());for(var d=["autoplay","preload","loop","muted"],e=d.length-1;0<=e;e--){var g=d[e];a.f[g]!==h&&(c[g]=a.f[g])}return c};t.Nc=function(a){this.k(a);a.stopPropagation()};t.play=function(){this.b.play()};t.pause=function(){this.b.pause()};t.paused=function(){return this.b.paused};t.currentTime=function(){return this.b.currentTime};
t.cd=function(a){try{this.b.currentTime=a}catch(c){u.log(c,"Video is not ready. (Video.js)")}};t.duration=function(){return this.b.duration||0};t.buffered=function(){return this.b.buffered};t.volume=function(){return this.b.volume};t.hd=function(a){this.b.volume=a};t.muted=function(){return this.b.muted};t.fd=function(a){this.b.muted=a};t.width=function(){return this.b.offsetWidth};t.height=function(){return this.b.offsetHeight};
t.Sa=function(){return"function"==typeof this.b.webkitEnterFullScreen&&(/Android/.test(u.O)||!/Chrome|Mac OS X 10.5/.test(u.O))?f:l};t.src=function(a){this.b.src=a};t.load=function(){this.b.load()};t.currentSrc=function(){return this.b.currentSrc};t.Oa=function(){return this.b.Oa};t.gd=function(a){this.b.Oa=a};t.autoplay=function(){return this.b.autoplay};t.bd=function(a){this.b.autoplay=a};t.loop=function(){return this.b.loop};t.ed=function(a){this.b.loop=a};t.error=function(){return this.b.error};
u.m.isSupported=function(){return!!document.createElement("video").canPlayType};u.m.ob=function(a){return!!document.createElement("video").canPlayType(a.type)};u.m.Hc=function(){var a=u.ib.volume;u.ib.volume=a/2+0.1;return a!==u.ib.volume};u.m.$a="loadstart suspend abort error emptied stalled loadedmetadata loadeddata canplay canplaythrough playing waiting seeking seeked ended durationchange timeupdate progress play pause ratechange volumechange".split(" ");
u.ab&&3>u.yc&&(document.createElement("video").constructor.prototype.canPlayType=function(a){return a&&-1!=a.toLowerCase().indexOf("video/mp4")?"maybe":""});
u.l=u.q.extend({g:function(a,c,d){u.q.call(this,a,c,d);d=c.source;var e=c.parentEl,g=this.b=u.e("div",{id:a.id()+"_temp_flash"}),j=a.id()+"_flash_api";a=a.f;var k=u.i.B({readyFunction:"videojs.Flash.onReady",eventProxyFunction:"videojs.Flash.onEvent",errorEventProxyFunction:"videojs.Flash.onError",autoplay:a.autoplay,preload:a.Oa,loop:a.loop,muted:a.muted},c.flashVars),q=u.i.B({wmode:"opaque",bgcolor:"#000000"},c.params),n=u.i.B({id:j,name:j,"class":"vjs-tech"},c.attributes);d&&(k.src=encodeURIComponent(u.jc(d.src)));
u.yb(g,e);c.startTime&&this.M(function(){this.load();this.play();this.currentTime(c.startTime)});if(c.iFrameMode===f&&!u.zc){var s=u.e("iframe",{id:j+"_iframe",name:j+"_iframe",className:"vjs-tech",scrolling:"no",marginWidth:0,marginHeight:0,frameBorder:0});k.readyFunction="ready";k.eventProxyFunction="events";k.errorEventProxyFunction="errors";u.d(s,"load",u.bind(this,function(){var a,d=s.contentWindow;a=s.contentDocument?s.contentDocument:s.contentWindow.document;a.write(u.l.kc(c.swf,k,q,n));d.player=
this.a;d.ready=u.bind(this.a,function(c){c=a.getElementById(c);var d=this.h;d.b=c;u.d(c,"click",d.bind(d.n));u.l.qb(d)});d.events=u.bind(this.a,function(a,c){this&&"flash"===this.ba&&this.k(c)});d.errors=u.bind(this.a,function(a,c){u.log("Flash Error",c)})}));g.parentNode.replaceChild(s,g)}else u.l.Mc(c.swf,g,k,q,n)}});t=u.l.prototype;t.C=function(){u.q.prototype.C.call(this)};t.play=function(){this.b.vjs_play()};t.pause=function(){this.b.vjs_pause()};
t.src=function(a){a=u.jc(a);this.b.vjs_src(a);if(this.a.autoplay()){var c=this;setTimeout(function(){c.play()},0)}};t.load=function(){this.b.vjs_load()};t.poster=function(){this.b.vjs_getProperty("poster")};t.buffered=function(){return u.tb(0,this.b.vjs_getProperty("buffered"))};t.Sa=r(l);var P=u.l.prototype,Q="preload currentTime defaultPlaybackRate playbackRate autoplay loop mediaGroup controller controls volume muted defaultMuted".split(" "),R="error currentSrc networkState readyState seeking initialTime duration startOffsetTime paused played seekable ended videoTracks audioTracks videoWidth videoHeight textTracks".split(" ");
function fa(){var a=Q[S],c=a.charAt(0).toUpperCase()+a.slice(1);P["set"+c]=function(c){return this.b.vjs_setProperty(a,c)}}function T(a){P[a]=function(){return this.b.vjs_getProperty(a)}}var S;for(S=0;S<Q.length;S++)T(Q[S]),fa();for(S=0;S<R.length;S++)T(R[S]);u.l.isSupported=function(){return 10<=u.l.version()[0]};u.l.ob=function(a){if(a.type in u.l.Pc)return"maybe"};u.l.Pc={"video/flv":"FLV","video/x-flv":"FLV","video/mp4":"MP4","video/m4v":"MP4"};
u.l.onReady=function(a){a=u.s(a);var c=a.player||a.parentNode.player,d=c.h;a.player=c;d.b=a;d.d("click",d.n);u.l.qb(d)};u.l.qb=function(a){a.s().vjs_getProperty?a.Ta():setTimeout(function(){u.l.qb(a)},50)};u.l.onEvent=function(a,c){u.s(a).player.k(c)};u.l.onError=function(a,c){u.s(a).player.k("error");u.log("Flash Error",c,a)};
u.l.version=function(){var a="0,0,0";try{a=(new window.ActiveXObject("ShockwaveFlash.ShockwaveFlash")).GetVariable("$version").replace(/\D+/g,",").match(/^,?(.+),?$/)[1]}catch(c){try{navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin&&(a=(navigator.plugins["Shockwave Flash 2.0"]||navigator.plugins["Shockwave Flash"]).description.replace(/\D+/g,",").match(/^,?(.+),?$/)[1])}catch(d){}}return a.split(",")};
u.l.Mc=function(a,c,d,e,g){a=u.l.kc(a,d,e,g);a=u.e("div",{innerHTML:a}).childNodes[0];d=c.parentNode;c.parentNode.replaceChild(a,c);var j=d.childNodes[0];setTimeout(function(){j.style.display="block"},1E3)};
u.l.kc=function(a,c,d,e){var g="",j="",k="";c&&u.i.sa(c,function(a,c){g+=a+"="+c+"&amp;"});d=u.i.B({movie:a,flashvars:g,allowScriptAccess:"always",allowNetworking:"all"},d);u.i.sa(d,function(a,c){j+='<param name="'+a+'" value="'+c+'" />'});e=u.i.B({data:a,width:"100%",height:"100%"},e);u.i.sa(e,function(a,c){k+=a+'="'+c+'" '});return'<object type="application/x-shockwave-flash"'+k+">"+j+"</object>"};
u.Dc=u.c.extend({g:function(a,c,d){u.c.call(this,a,c,d);if(!a.f.sources||0===a.f.sources.length){c=0;for(d=a.f.techOrder;c<d.length;c++){var e=u.Y(d[c]),g=window.videojs[e];if(g&&g.isSupported()){E(a,e);break}}}else a.src(a.f.sources)}});function U(a){a.wa=a.wa||[];return a.wa}function V(a,c,d){for(var e=a.wa,g=0,j=e.length,k,q;g<j;g++)k=e[g],k.id()===c?(k.show(),q=k):d&&(k.H()==d&&0<k.mode())&&k.disable();(c=q?q.H():d?d:l)&&a.k(c+"trackchange")}
u.U=u.c.extend({g:function(a,c){u.c.call(this,a,c);this.L=c.id||"vjs_"+c.kind+"_"+c.language+"_"+u.u++;this.uc=c.src;this.Jc=c["default"]||c.dflt;this.kd=c.title;this.ud=c.srclang;this.Rc=c.label;this.ia=[];this.cc=[];this.ka=this.la=0;this.a.d("fullscreenchange",u.bind(this,this.Ec))}});t=u.U.prototype;t.H=p("A");t.src=p("uc");t.ub=p("Jc");t.title=p("kd");t.label=p("Rc");t.readyState=p("la");t.mode=p("ka");t.Ec=function(){this.b.style.fontSize=this.a.F?140*(screen.width/this.a.width())+"%":""};
t.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-"+this.A+" vjs-text-track"})};t.show=function(){W(this);this.ka=2;u.c.prototype.show.call(this)};t.v=function(){W(this);this.ka=1;u.c.prototype.v.call(this)};t.disable=function(){2==this.ka&&this.v();this.a.t("timeupdate",u.bind(this,this.update,this.L));this.a.t("ended",u.bind(this,this.reset,this.L));this.reset();this.a.R.textTrackDisplay.removeChild(this);this.ka=0};
function W(a){0===a.la&&a.load();0===a.ka&&(a.a.d("timeupdate",u.bind(a,a.update,a.L)),a.a.d("ended",u.bind(a,a.reset,a.L)),("captions"===a.A||"subtitles"===a.A)&&a.a.R.textTrackDisplay.X(a))}t.load=function(){0===this.la&&(this.la=1,u.get(this.uc,u.bind(this,this.Zc),u.bind(this,this.Fb)))};t.Fb=function(a){this.error=a;this.la=3;this.k("error")};
t.Zc=function(a){var c,d;a=a.split("\n");for(var e="",g=1,j=a.length;g<j;g++)if(e=u.trim(a[g])){-1==e.indexOf("--\x3e")?(c=e,e=u.trim(a[++g])):c=this.ia.length;c={id:c,index:this.ia.length};d=e.split(" --\x3e ");c.startTime=X(d[0]);c.ta=X(d[1]);for(d=[];a[++g]&&(e=u.trim(a[g]));)d.push(e);c.text=d.join("<br/>");this.ia.push(c)}this.la=2;this.k("loaded")};
function X(a){var c=a.split(":");a=0;var d,e,g;3==c.length?(d=c[0],e=c[1],c=c[2]):(d=0,e=c[0],c=c[1]);c=c.split(/\s+/);c=c.splice(0,1)[0];c=c.split(/\.|,/);g=parseFloat(c[1]);c=c[0];a+=3600*parseFloat(d);a+=60*parseFloat(e);a+=parseFloat(c);g&&(a+=g/1E3);return a}
t.update=function(){if(0<this.ia.length){var a=this.a.currentTime();if(this.Kb===b||a<this.Kb||this.Ja<=a){var c=this.ia,d=this.a.duration(),e=0,g=l,j=[],k,q,n,s;a>=this.Ja||this.Ja===b?s=this.vb!==b?this.vb:0:(g=f,s=this.Cb!==b?this.Cb:c.length-1);for(;;){n=c[s];if(n.ta<=a)e=Math.max(e,n.ta),n.Da&&(n.Da=l);else if(a<n.startTime){if(d=Math.min(d,n.startTime),n.Da&&(n.Da=l),!g)break}else g?(j.splice(0,0,n),q===b&&(q=s),k=s):(j.push(n),k===b&&(k=s),q=s),d=Math.min(d,n.ta),e=Math.max(e,n.startTime),
n.Da=f;if(g)if(0===s)break;else s--;else if(s===c.length-1)break;else s++}this.cc=j;this.Ja=d;this.Kb=e;this.vb=k;this.Cb=q;a=this.cc;c="";d=0;for(e=a.length;d<e;d++)c+='<span class="vjs-tt-cue">'+a[d].text+"</span>";this.b.innerHTML=c;this.k("cuechange")}}};t.reset=function(){this.Ja=0;this.Kb=this.a.duration();this.Cb=this.vb=0};u.Rb=u.U.extend();u.Rb.prototype.A="captions";u.Zb=u.U.extend();u.Zb.prototype.A="subtitles";u.Tb=u.U.extend();u.Tb.prototype.A="chapters";
u.$b=u.c.extend({g:function(a,c,d){u.c.call(this,a,c,d);if(a.f.tracks&&0<a.f.tracks.length){c=this.a;a=a.f.tracks;var e;for(d=0;d<a.length;d++){e=a[d];var g=c,j=e.kind,k=e.label,q=e.language,n=e;e=g.wa=g.wa||[];n=n||{};n.kind=j;n.label=k;n.language=q;j=u.Y(j||"subtitles");g=new window.videojs[j+"Track"](g,n);e.push(g)}}}});u.$b.prototype.e=function(){return u.c.prototype.e.call(this,"div",{className:"vjs-text-track-display"})};
u.W=u.I.extend({g:function(a,c){var d=this.ca=c.track;c.label=d.label();c.selected=d.ub();u.I.call(this,a,c);this.a.d(d.H()+"trackchange",u.bind(this,this.update))}});u.W.prototype.n=function(){u.I.prototype.n.call(this);V(this.a,this.ca.L,this.ca.H())};u.W.prototype.update=function(){2==this.ca.mode()?this.selected(f):this.selected(l)};u.cb=u.W.extend({g:function(a,c){c.track={H:function(){return c.kind},pc:a,label:function(){return c.kind+" off"},ub:r(l),mode:r(l)};u.W.call(this,a,c);this.selected(f)}});
u.cb.prototype.n=function(){u.W.prototype.n.call(this);V(this.a,this.ca.L,this.ca.H())};u.cb.prototype.update=function(){for(var a=U(this.a),c=0,d=a.length,e,g=f;c<d;c++)e=a[c],e.H()==this.ca.H()&&2==e.mode()&&(g=l);g?this.selected(f):this.selected(l)};u.V=u.ea.extend({g:function(a,c){u.ea.call(this,a,c);1>=this.G.length&&this.v()}});
u.V.prototype.sb=function(){var a=[],c;a.push(new u.cb(this.a,{kind:this.A}));for(var d=0;d<U(this.a).length;d++)c=U(this.a)[d],c.H()===this.A&&a.push(new u.W(this.a,{track:c}));return a};u.za=u.V.extend({g:function(a,c,d){u.V.call(this,a,c,d);this.b.setAttribute("aria-label","Captions Menu")}});u.za.prototype.A="captions";u.za.prototype.pa="Captions";u.za.prototype.className="vjs-captions-button";u.Ba=u.V.extend({g:function(a,c,d){u.V.call(this,a,c,d);this.b.setAttribute("aria-label","Subtitles Menu")}});
u.Ba.prototype.A="subtitles";u.Ba.prototype.pa="Subtitles";u.Ba.prototype.className="vjs-subtitles-button";u.Sb=u.V.extend({g:function(a,c,d){u.V.call(this,a,c,d);this.b.setAttribute("aria-label","Chapters Menu")}});t=u.Sb.prototype;t.A="chapters";t.pa="Chapters";t.className="vjs-chapters-button";t.sb=function(){for(var a=[],c,d=0;d<U(this.a).length;d++)c=U(this.a)[d],c.H()===this.A&&a.push(new u.W(this.a,{track:c}));return a};
t.Fa=function(){for(var a=U(this.a),c=0,d=a.length,e,g,j=this.G=[];c<d;c++)if(e=a[c],e.H()==this.A&&e.ub()){if(2>e.readyState()){this.sd=e;e.d("loaded",u.bind(this,this.Fa));return}g=e;break}a=this.ua=new u.na(this.a);a.b.appendChild(u.e("li",{className:"vjs-menu-title",innerHTML:u.Y(this.A),jd:-1}));if(g){e=g.ia;for(var k,c=0,d=e.length;c<d;c++)k=e[c],k=new u.Xa(this.a,{track:g,cue:k}),j.push(k),a.X(k)}0<this.G.length&&this.show();return a};
u.Xa=u.I.extend({g:function(a,c){var d=this.ca=c.track,e=this.cue=c.cue,g=a.currentTime();c.label=e.text;c.selected=e.startTime<=g&&g<e.ta;u.I.call(this,a,c);d.d("cuechange",u.bind(this,this.update))}});u.Xa.prototype.n=function(){u.I.prototype.n.call(this);this.a.currentTime(this.cue.startTime);this.update(this.cue.startTime)};u.Xa.prototype.update=function(){var a=this.cue,c=this.a.currentTime();a.startTime<=c&&c<a.ta?this.selected(f):this.selected(l)};
u.i.B(u.da.prototype.f.children,{subtitlesButton:{},captionsButton:{},chaptersButton:{}});
if("undefined"!==typeof window.JSON&&"function"===window.JSON.parse)u.JSON=window.JSON;else{u.JSON={};var Y=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;u.JSON.parse=function(a,c){function d(a,e){var k,q,n=a[e];if(n&&"object"===typeof n)for(k in n)Object.prototype.hasOwnProperty.call(n,k)&&(q=d(n,k),q!==b?n[k]=q:delete n[k]);return c.call(a,e,n)}var e;a=String(a);Y.lastIndex=0;Y.test(a)&&(a=a.replace(Y,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));
if(/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return e=eval("("+a+")"),"function"===typeof c?d({"":e},""):e;throw new SyntaxError("JSON.parse(): invalid or malformed JSON data");}}
u.dc=function(){var a,c,d=document.getElementsByTagName("video");if(d&&0<d.length)for(var e=0,g=d.length;e<g;e++)if((c=d[e])&&c.getAttribute)c.player===b&&(a=c.getAttribute("data-setup"),a!==h&&(a=u.JSON.parse(a||"{}"),v(c,a)));else{u.mb();break}else u.od||u.mb()};u.mb=function(){setTimeout(u.dc,1)};u.Q(window,"load",function(){u.od=f});u.mb();u.$c=function(a,c){u.ga.prototype[a]=c};var Z=this;Z.pd=f;function $(a,c){var d=a.split("."),e=Z;!(d[0]in e)&&e.execScript&&e.execScript("var "+d[0]);for(var g;d.length&&(g=d.shift());)!d.length&&c!==b?e[g]=c:e=e[g]?e[g]:e[g]={}};$("videojs",u);$("_V_",u);$("videojs.options",u.options);$("videojs.cache",u.qa);$("videojs.Component",u.c);u.c.prototype.dispose=u.c.prototype.C;u.c.prototype.createEl=u.c.prototype.e;u.c.prototype.el=u.c.prototype.s;u.c.prototype.addChild=u.c.prototype.X;u.c.prototype.children=u.c.prototype.children;u.c.prototype.on=u.c.prototype.d;u.c.prototype.off=u.c.prototype.t;u.c.prototype.one=u.c.prototype.Q;u.c.prototype.trigger=u.c.prototype.k;u.c.prototype.triggerReady=u.c.prototype.Ta;
u.c.prototype.show=u.c.prototype.show;u.c.prototype.hide=u.c.prototype.v;u.c.prototype.width=u.c.prototype.width;u.c.prototype.height=u.c.prototype.height;u.c.prototype.dimensions=u.c.prototype.Kc;u.c.prototype.ready=u.c.prototype.M;$("videojs.Player",u.ga);u.ga.prototype.dispose=u.ga.prototype.C;$("videojs.MediaLoader",u.Dc);$("videojs.TextTrackDisplay",u.$b);$("videojs.ControlBar",u.da);$("videojs.Button",u.o);$("videojs.PlayToggle",u.Xb);$("videojs.FullscreenToggle",u.Aa);
$("videojs.BigPlayButton",u.Wa);$("videojs.LoadingSpinner",u.Vb);$("videojs.CurrentTimeDisplay",u.Ya);$("videojs.DurationDisplay",u.Za);$("videojs.TimeDivider",u.ac);$("videojs.RemainingTimeDisplay",u.gb);$("videojs.Slider",u.J);$("videojs.ProgressControl",u.fb);$("videojs.SeekBar",u.Yb);$("videojs.LoadProgressBar",u.bb);$("videojs.PlayProgressBar",u.Wb);$("videojs.SeekHandle",u.hb);$("videojs.VolumeControl",u.kb);$("videojs.VolumeBar",u.jb);$("videojs.VolumeLevel",u.bc);
$("videojs.VolumeHandle",u.lb);$("videojs.MuteToggle",u.fa);$("videojs.PosterImage",u.eb);$("videojs.Menu",u.na);$("videojs.MenuItem",u.I);$("videojs.SubtitlesButton",u.Ba);$("videojs.CaptionsButton",u.za);$("videojs.ChaptersButton",u.Sb);$("videojs.MediaTechController",u.q);u.q.prototype.features=u.q.prototype.j;u.q.prototype.j.volumeControl=u.q.prototype.j.T;u.q.prototype.j.fullscreenResize=u.q.prototype.j.Ia;u.q.prototype.j.progressEvents=u.q.prototype.j.Lb;u.q.prototype.j.timeupdateEvents=u.q.prototype.j.Ob;
$("videojs.Html5",u.m);u.m.Events=u.m.$a;u.m.isSupported=u.m.isSupported;u.m.canPlaySource=u.m.ob;u.m.prototype.setCurrentTime=u.m.prototype.cd;u.m.prototype.setVolume=u.m.prototype.hd;u.m.prototype.setMuted=u.m.prototype.fd;u.m.prototype.setPreload=u.m.prototype.gd;u.m.prototype.setAutoplay=u.m.prototype.bd;u.m.prototype.setLoop=u.m.prototype.ed;$("videojs.Flash",u.l);u.l.isSupported=u.l.isSupported;u.l.canPlaySource=u.l.ob;u.l.onReady=u.l.onReady;$("videojs.TextTrack",u.U);u.U.prototype.label=u.U.prototype.label;
$("videojs.CaptionsTrack",u.Rb);$("videojs.SubtitlesTrack",u.Zb);$("videojs.ChaptersTrack",u.Tb);$("videojs.autoSetup",u.dc);$("videojs.plugin",u.$c);$("videojs.createTimeRange",u.tb);})();//@ sourceMappingURL=video.js.map
;
/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */

(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );
/**
 * Copyright (c) 2005 - 2010, James Auldridge
 * All rights reserved.
 *
 * Licensed under the BSD, MIT, and GPL (your choice!) Licenses:
 *  http://code.google.com/p/cookies/wiki/License
 *
 */

var jaaulde = window.jaaulde || {};
jaaulde.utils = jaaulde.utils || {};
jaaulde.utils.cookies = ( function()
{
	var resolveOptions, assembleOptionsString, parseCookies, constructor, defaultOptions = {
		expiresAt: null,
		path: '/',
		domain:  null,
		secure: false
	};
	/**
	* resolveOptions - receive an options object and ensure all options are present and valid, replacing with defaults where necessary
	*
	* @access private
	* @static
	* @parameter Object options - optional options to start with
	* @return Object complete and valid options object
	*/
	resolveOptions = function( options )
	{
		var returnValue, expireDate;

		if( typeof options !== 'object' || options === null )
		{
			returnValue = defaultOptions;
		}
		else
		{
			returnValue = {
				expiresAt: defaultOptions.expiresAt,
				path: defaultOptions.path,
				domain: defaultOptions.domain,
				secure: defaultOptions.secure
			};

			if( typeof options.expiresAt === 'object' && options.expiresAt instanceof Date )
			{
				returnValue.expiresAt = options.expiresAt;
			}
			else if( typeof options.hoursToLive === 'number' && options.hoursToLive !== 0 )
			{
				expireDate = new Date();
				expireDate.setTime( expireDate.getTime() + ( options.hoursToLive * 60 * 60 * 1000 ) );
				returnValue.expiresAt = expireDate;
			}

			if( typeof options.path === 'string' && options.path !== '' )
			{
				returnValue.path = options.path;
			}

			if( typeof options.domain === 'string' && options.domain !== '' )
			{
				returnValue.domain = options.domain;
			}

			if( options.secure === true )
			{
				returnValue.secure = options.secure;
			}
		}

		return returnValue;
		};
	/**
	* assembleOptionsString - analyze options and assemble appropriate string for setting a cookie with those options
	*
	* @access private
	* @static
	* @parameter options OBJECT - optional options to start with
	* @return STRING - complete and valid cookie setting options
	*/
	assembleOptionsString = function( options )
	{
		options = resolveOptions( options );

		return (
			( typeof options.expiresAt === 'object' && options.expiresAt instanceof Date ? '; expires=' + options.expiresAt.toGMTString() : '' ) +
			'; path=' + options.path +
			( typeof options.domain === 'string' ? '; domain=' + options.domain : '' ) +
			( options.secure === true ? '; secure' : '' )
		);
	};
	/**
	* parseCookies - retrieve document.cookie string and break it into a hash with values decoded and unserialized
	*
	* @access private
	* @static
	* @return OBJECT - hash of cookies from document.cookie
	*/
	parseCookies = function()
	{
		var cookies = {}, i, pair, name, value, separated = document.cookie.split( ';' ), unparsedValue;
		for( i = 0; i < separated.length; i = i + 1 )
		{
			pair = separated[i].split( '=' );
			name = pair[0].replace( /^\s*/, '' ).replace( /\s*$/, '' );

			try
			{
				value = decodeURIComponent( pair[1] );
			}
			catch( e1 )
			{
				value = pair[1];
			}

			if( typeof JSON === 'object' && JSON !== null && typeof JSON.parse === 'function' )
			{
				try
				{
					unparsedValue = value;
					value = JSON.parse( value );
				}
				catch( e2 )
				{
					value = unparsedValue;
				}
			}

			cookies[name] = value;
		}
		return cookies;
	};

	constructor = function(){};

	/**
	 * get - get one, several, or all cookies
	 *
	 * @access public
	 * @paramater Mixed cookieName - String:name of single cookie; Array:list of multiple cookie names; Void (no param):if you want all cookies
	 * @return Mixed - Value of cookie as set; Null:if only one cookie is requested and is not found; Object:hash of multiple or all cookies (if multiple or all requested);
	 */
	constructor.prototype.get = function( cookieName )
	{
		var returnValue, item, cookies = parseCookies();

		if( typeof cookieName === 'string' )
		{
			returnValue = ( typeof cookies[cookieName] !== 'undefined' ) ? cookies[cookieName] : null;
		}
		else if( typeof cookieName === 'object' && cookieName !== null )
		{
			returnValue = {};
			for( item in cookieName )
			{
				if( typeof cookies[cookieName[item]] !== 'undefined' )
				{
					returnValue[cookieName[item]] = cookies[cookieName[item]];
				}
				else
				{
					returnValue[cookieName[item]] = null;
				}
			}
		}
		else
		{
			returnValue = cookies;
		}

		return returnValue;
	};
	/**
	 * filter - get array of cookies whose names match the provided RegExp
	 *
	 * @access public
	 * @paramater Object RegExp - The regular expression to match against cookie names
	 * @return Mixed - Object:hash of cookies whose names match the RegExp
	 */
	constructor.prototype.filter = function( cookieNameRegExp )
	{
		var cookieName, returnValue = {}, cookies = parseCookies();

		if( typeof cookieNameRegExp === 'string' )
		{
			cookieNameRegExp = new RegExp( cookieNameRegExp );
		}

		for( cookieName in cookies )
		{
			if( cookieName.match( cookieNameRegExp ) )
			{
				returnValue[cookieName] = cookies[cookieName];
			}
		}

		return returnValue;
	};
	/**
	 * set - set or delete a cookie with desired options
	 *
	 * @access public
	 * @paramater String cookieName - name of cookie to set
	 * @paramater Mixed value - Any JS value. If not a string, will be JSON encoded; NULL to delete
	 * @paramater Object options - optional list of cookie options to specify
	 * @return void
	 */
	constructor.prototype.set = function( cookieName, value, options )
	{
		if( typeof options !== 'object' || options === null )
		{
			options = {};
		}

		if( typeof value === 'undefined' || value === null )
		{
			value = '';
			options.hoursToLive = -8760;
		}

		else if( typeof value !== 'string' )
		{
			if( typeof JSON === 'object' && JSON !== null && typeof JSON.stringify === 'function' )
			{
				value = JSON.stringify( value );
			}
			else
			{
				throw new Error( 'cookies.set() received non-string value and could not serialize.' );
			}
		}


		var optionsString = assembleOptionsString( options );

		document.cookie = cookieName + '=' + encodeURIComponent( value ) + optionsString;
	};
	/**
	 * del - delete a cookie (domain and path options must match those with which the cookie was set; this is really an alias for set() with parameters simplified for this use)
	 *
	 * @access public
	 * @paramater MIxed cookieName - String name of cookie to delete, or Bool true to delete all
	 * @paramater Object options - optional list of cookie options to specify ( path, domain )
	 * @return void
	 */
	constructor.prototype.del = function( cookieName, options )
	{
		var allCookies = {}, name;

		if( typeof options !== 'object' || options === null )
		{
			options = {};
		}

		if( typeof cookieName === 'boolean' && cookieName === true )
		{
			allCookies = this.get();
		}
		else if( typeof cookieName === 'string' )
		{
			allCookies[cookieName] = true;
		}

		for( name in allCookies )
		{
			if( typeof name === 'string' && name !== '' )
			{
				this.set( name, null, options );
			}
		}
	};
	/**
	 * test - test whether the browser is accepting cookies
	 *
	 * @access public
	 * @return Boolean
	 */
	constructor.prototype.test = function()
	{
		var returnValue = false, testName = 'cT', testValue = 'data';

		this.set( testName, testValue );

		if( this.get( testName ) === testValue )
		{
			this.del( testName );
			returnValue = true;
		}

		return returnValue;
	};
	/**
	 * setOptions - set default options for calls to cookie methods
	 *
	 * @access public
	 * @param Object options - list of cookie options to specify
	 * @return void
	 */
	constructor.prototype.setOptions = function( options )
	{
		if( typeof options !== 'object' )
		{
			options = null;
		}

		defaultOptions = resolveOptions( options );
	};

	return new constructor();
} )();

( function()
{
	if( window.jQuery )
	{
		( function( $ )
		{
			$.cookies = jaaulde.utils.cookies;

			var extensions = {
				/**
				* $( 'selector' ).cookify - set the value of an input field, or the innerHTML of an element, to a cookie by the name or id of the field or element
				*                           (field or element MUST have name or id attribute)
				*
				* @access public
				* @param options OBJECT - list of cookie options to specify
				* @return jQuery
				*/
				cookify: function( options )
				{
					return this.each( function()
					{
						var i, nameAttrs = ['name', 'id'], name, $this = $( this ), value;

						for( i in nameAttrs )
						{
							if( ! isNaN( i ) )
							{
								name = $this.attr( nameAttrs[ i ] );
								if( typeof name === 'string' && name !== '' )
								{
									if( $this.is( ':checkbox, :radio' ) )
									{
										if( $this.attr( 'checked' ) )
										{
											value = $this.val();
										}
									}
									else if( $this.is( ':input' ) )
									{
										value = $this.val();
									}
									else
									{
										value = $this.html();
									}

									if( typeof value !== 'string' || value === '' )
									{
										value = null;
									}

									$.cookies.set( name, value, options );

									break;
								}
							}
						}
					} );
				},
				/**
				* $( 'selector' ).cookieFill - set the value of an input field or the innerHTML of an element from a cookie by the name or id of the field or element
				*
				* @access public
				* @return jQuery
				*/
				cookieFill: function()
				{
					return this.each( function()
					{
						var n, getN, nameAttrs = ['name', 'id'], name, $this = $( this ), value;

						getN = function()
						{
							n = nameAttrs.pop();
							return !! n;
						};

						while( getN() )
						{
							name = $this.attr( n );
							if( typeof name === 'string' && name !== '' )
							{
								value = $.cookies.get( name );
								if( value !== null )
								{
									if( $this.is( ':checkbox, :radio' ) )
									{
										if( $this.val() === value )
										{
											$this.attr( 'checked', 'checked' );
										}
										else
										{
											$this.removeAttr( 'checked' );
										}
									}
									else if( $this.is( ':input' ) )
									{
										$this.val( value );
									}
									else
									{
										$this.html( value );
									}
								}
								
								break;
							}
						}
					} );
				},
				/**
				* $( 'selector' ).cookieBind - call cookie fill on matching elements, and bind their change events to cookify()
				*
				* @access public
				* @param options OBJECT - list of cookie options to specify
				* @return jQuery
				*/
				cookieBind: function( options )
				{
					return this.each( function()
					{
						var $this = $( this );
						$this.cookieFill().change( function()
						{
							$this.cookify( options );
						} );
					} );
				}
			};

			$.each( extensions, function( i )
			{
				$.fn[i] = this;
			} );

		} )( window.jQuery );
	}
} )();
/*
 * https://gist.github.com/1247442
 */


jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend(jQuery.easing, {
    eightyTwentyLinear: function(x, t, b, c, d) {
        return ((b + c) - (b + c) * 0.8) * (t /= d) + (b + c) * 0.8;
    },
    eightyTwentyQuartOut: function(x, t, b, c, d) {
        return -((b + c) - (b + c) * 0.8) * (t /= d) * (t - 2) + (b + c) * 0.8;
    },
    easeInOutQuart: function (x, t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
          return -c/2 * ((t-=2)*t*t*t - 2) + b;
    }
});
(function($) {

  $.debounce = function(callback, delay) {
    var timeout;
    return function() {
      var self = this, args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        timeout = null;
        callback.apply(self, args);
      }, delay);
    };
  };
  
  $.delay =  function(func, wait) {
    var self = this, args = Array.prototype.slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(self, args); }, wait);
  };
  
})(jQuery);
/**
 * @preserve jquery.fullscreen 1.1.4
 * https://github.com/kayahr/jquery-fullscreen-plugin
 * Copyright (C) 2012 Klaus Reimer <k@ailis.de>
 * Licensed under the MIT license
 * (See http://www.opensource.org/licenses/mit-license)
 */

 
(function() {

/**
 * Sets or gets the fullscreen state.
 * 
 * @param {boolean=} state
 *            True to enable fullscreen mode, false to disable it. If not
 *            specified then the current fullscreen state is returned.
 * @return {boolean|Element|jQuery|null}
 *            When querying the fullscreen state then the current fullscreen
 *            element (or true if browser doesn't support it) is returned
 *            when browser is currently in full screen mode. False is returned
 *            if browser is not in full screen mode. Null is returned if 
 *            browser doesn't support fullscreen mode at all. When setting 
 *            the fullscreen state then the current jQuery selection is 
 *            returned for chaining.
 * @this {jQuery}
 */
function fullScreen(state)
{
    var e, func, doc;
    
    // Do nothing when nothing was selected
    if (!this.length) return this;
    
    // We only use the first selected element because it doesn't make sense
    // to fullscreen multiple elements.
    e = (/** @type {Element} */ this[0]);
    
    // Find the real element and the document (Depends on whether the
    // document itself or a HTML element was selected)
    if (e.ownerDocument)
    {
        doc = e.ownerDocument;
    }
    else
    {
        doc = e;
        e = doc.documentElement;
    }
    
    // When no state was specified then return the current state.
    if (state == null)
    {
        // When fullscreen mode is not supported then return null
        if (!((/** @type {?Function} */ doc["cancelFullScreen"])
            || (/** @type {?Function} */ doc["webkitCancelFullScreen"])
            || (/** @type {?Function} */ doc["mozCancelFullScreen"])))
        {
            return null;
        }
        
        // Check fullscreen state
        state = !!doc["fullScreen"]
            || !!doc["webkitIsFullScreen"]
            || !!doc["mozFullScreen"];
        if (!state) return state;
        
        // Return current fullscreen element or "true" if browser doesn't
        // support this
        return (/** @type {?Element} */ doc["fullScreenElement"])
            || (/** @type {?Element} */ doc["webkitCurrentFullScreenElement"])
            || (/** @type {?Element} */ doc["mozFullScreenElement"])
            || state;
    }
    
    // When state was specified then enter or exit fullscreen mode.
    if (state)
    {
        // Enter fullscreen
        func = (/** @type {?Function} */ e["requestFullScreen"])
            || (/** @type {?Function} */ e["webkitRequestFullScreen"])
            || (/** @type {?Function} */ e["mozRequestFullScreen"]);
        if (func) 
        {
            if (Element["ALLOW_KEYBOARD_INPUT"])
                func.call(e, Element["ALLOW_KEYBOARD_INPUT"]);
            else
                func.call(e);
        }
        return this;
    }
    else
    {
        // Exit fullscreen
        func = (/** @type {?Function} */ doc["cancelFullScreen"])
            || (/** @type {?Function} */ doc["webkitCancelFullScreen"])
            || (/** @type {?Function} */ doc["mozCancelFullScreen"]);
        if (func) func.call(doc);
        return this;
    }
}

/**
 * Toggles the fullscreen mode.
 * 
 * @return {!jQuery}
 *            The jQuery selection for chaining.
 * @this {jQuery}
 */
function toggleFullScreen()
{
    return (/** @type {!jQuery} */ fullScreen.call(this, 
        !fullScreen.call(this)));
}

/**
 * Handles the browser-specific fullscreenchange event and triggers
 * a jquery event for it.
 *
 * @param {?Event} event
 *            The fullscreenchange event.
 */
function fullScreenChangeHandler(event)
{
    jQuery(document).trigger(new jQuery.Event("fullscreenchange"));
}

/**
 * Handles the browser-specific fullscreenerror event and triggers
 * a jquery event for it.
 *
 * @param {?Event} event
 *            The fullscreenerror event.
 */
function fullScreenErrorHandler(event)
{
    jQuery(document).trigger(new jQuery.Event("fullscreenerror"));
}

/**
 * Installs the fullscreenchange event handler.
 */
function installFullScreenHandlers()
{
    var e, change, error;
    
    // Determine event name
    e = document;
    if (e["webkitCancelFullScreen"])
    {
        change = "webkitfullscreenchange";
        error = "webkitfullscreenerror";
    }
    else if (e["mozCancelFullScreen"])
    {
        change = "mozfullscreenchange";
        error = "mozfullscreenerror";
    }
    else 
    {
        change = "fullscreenchange";
        error = "fullscreenerror";
    }

    // Install the event handlers
    jQuery(document).bind(change, fullScreenChangeHandler);
    jQuery(document).bind(error, fullScreenErrorHandler);
}

jQuery.fn["fullScreen"] = fullScreen;
jQuery.fn["toggleFullScreen"] = toggleFullScreen;
installFullScreenHandlers();

})();
(function($) {

  var instances = {}, excludeFromPollutionCheck = ['currentbreakpoint', 'onYouTubePlayerAPIReady'];

  $.plugin = function(name, plugin) {

    if ($.fn[name] !== undefined) {
      $.error('jquery.' + name + ': A plugin with same name has been registered already.');
      return false;
    }

    if ((new plugin()).init === undefined) {
      $.error('jquery.' + name + ': Required method #init has not been implemented.');
      return false;
    }

    return $.fn[name] = function(method) {

      var $el, instance, args = Array.prototype.slice.call(arguments, 1), variableCount;

      return this.each(function(i, el) {
        $el = $(el);
        instance = $el.data(name);

        if (!instance && ( typeof method === 'object' || !method)) {
          instances[name] = instances[name] + 1 || 1;
          instance = new plugin();
          $el.data(name, $.extend(true, instance, {
            $el : $el,
            namespace : name + '-' + instances[name],
            options : method
          }));

          checkGlobalScopePolution(name, function() {
            instance.init($el);
          });

        } else if (instance[method] && method !== 'init') {
          instance[method].apply(instance, [$el].concat(args));
        } else {
          $.error('jquery.' + name + ': Method #' + method + ' does not exist.');
        }

        if (method === 'destroy') {
          $el.removeData(name);
        }
      });
    };
  };

  function checkGlobalScopePolution(plugin_name, do_your_thing) {

    if (window.location.hostname !== 'localhost') {
      return do_your_thing();
    }

    var properties_before = {}, after = 0;

    // collect variables from gobal scope
    for (var prop1 in window) {
      properties_before[ prop1.toString()] = true;
    }

    // ok, just do it
    do_your_thing();

    // loop variables again after plugin is initialized
    for (var prop2 in window ) {
      try {
        // check if it exists before plugin init
        if (!properties_before[prop2.toString()]
  
        // drop out properties that should be on global scope.
        && excludeFromPollutionCheck.indexOf(prop2.toString()) < 0
  
        // seems that jquery puts its self to globa scope
        && prop2.toString().substring(0, 6) !== 'jQuery') {
  
          // push angry message for user if something found
          log(plugin_name + " pollutes global scope. New variable added: " + prop2);
        }
      } catch (err) { 
        // IE8 fails
      }
    }
  };

  function log(message) {
    if (console && console.log) {
      console.log(message);
    }
  };

})(jQuery);
var loadmore_content_hooks = [];

(function ($) {
  "use strict";
  $.fn.loadmore = function (options) {

    var _self = $(this);

    var loader = $(".load-more .loader"),
      label = _self.find("span"),
      buffer = _self.find(".element-buffer"),
      $catalog = $(options.catalog),
      wrapper = $catalog.find('.wrapper');

    if (options.preloaded) {
      // content already loaded, just show it
      $(this).find('.wrapper').show();
      $(this).unbind().on('click', '.wrapper a', function () {
        label.hide();
        loader.fadeIn(300);

        var $showSet = $catalog.find('li:hidden[data-type='+ $('.product-selector .radios a.checked').attr('category') +']').slice(0, parseInt($catalog.data('itemsperload')));

        $showSet.find('img').each(function(){
          $(this).removeClass('adaptive-exclude');
        });

        // show first set of hidden items
        $showSet.css({ opacity: 0, display: 'block'}).removeClass('full-opacity').each(function (i) {
          var transitionOrAnimate = $(this).data('transitionOrAnimate');
          // init if needed, otherwise re-run same method in sequence
          if (typeof transitionOrAnimate == 'undefined') {
            $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);  
          } else {
            setTimeout(function(){
              transitionOrAnimate.init(transitionOrAnimate.$el);
            }, parseInt(100*i, 10));
          }
        });
        $(window).adaptiveImages('doRefresh');

        setTimeout(function(){
          loader.hide();
          label.fadeIn(300);

          // hide the button if no more items are available
          if ($catalog.find('li:hidden[data-type='+ $('.product-selector .radios a.checked').attr('category') +']').length === 0) {
            $catalog.parents('.product-selector').css({ 'padding-bottom': '0.75em' });
            _self.hide();
          }
        }, $showSet.length*100);

        // custom tracking
        if (window.isTrackingAvailable) {
          utag.link({ link_id:window.location, link_text: "load more", linkEvent: "load more" });
        }
      });
    } else {
      // dynamic loading
      $(this).find('.wrapper').show();
      $(this).unbind().on('click', '.wrapper a', function () {
        label.hide();
        loader.fadeIn(300);
        buffer.load(wrapper.data('nextpage') + " " + options.catalog + " .wrapper", function () {
          // some browsers (old symbian, kindle fire) devices show both javascript and <noscript> content so:
          // 1) delete all noscript elements before they are shown -> fail
          // 2) delete the section pagination -> fail
          // 3) add nonajax class to normal div and remove that -> win
          buffer.find(".nonajax").remove();
          buffer.find(".pagination").remove();
          buffer.find("li").css('opacity', '1').removeClass('third').removeClass('fourth');

          // TODO: it would be better to have hooks run before the content is appeneded, but currently no hook implementation supports it
          //          for (var i=0, len=loadmore_content_hooks.length; i < len; i++) {
          //            loadmore_content_hooks[i](buffer);
          //          }

          // append all li elements that do not have li element as ancestor
          wrapper.find("> ul, .content-wrapper > ul").append(buffer.find("li").filter(function() { return !$(this).parent().closest("li").length; }));
          wrapper.data('nextpage', buffer.find('.wrapper').data('nextpage'));

          for (var i=0, len=loadmore_content_hooks.length; i < len; i++) {
            loadmore_content_hooks[i](wrapper);
          }
          // TODO: move adaptive images stuff to hook
          $(window).adaptiveImages('doRefresh');

          if (wrapper.data('nextpage') === '') {
            _self.find(".wrapper").hide();
          }
          loader.hide();
          label.fadeIn(300);
          buffer.empty();
        });
        
        // custom tracking
        if (window.isTrackingAvailable) {
          utag.link({ link_id:window.location, link_text: "load more", linkEvent: "load more" });
        }
      });  
    }
    

  };

}(jQuery));
(function($) {

  $.plugin('slideshow', function() {

    this.VERSION = '1.0.0';

    var options,
      $wrap,
      $content,
      $prev,
      $next, 
      $arrowControls,
      $progressBarTrack,
      $navigation,
      $slides,
      $active,
      $previous,
      $loadingIndicator,
      paused,
      margin,
      slideshowInterval,
      progressBarAnimationInterval, 
      activeSlideIndex,
      $slides; 
 
     this.options = {
        duration: 700,
        easing: 'easeInOutQuart',
        externalControls: false,
        arrows: false,
        navigation : true,
        autoPlay: false,
        slideInterval: 8000,
        progressBar: false,
        progressBarHeight: '3px',
        richContent: false,
        forwardOnSlideTap: false,
        showLoadingIndicator: true, 
        runOnce: false
      };


    this.init = function(el) {
      
      options = this.options;
      paused = false;
      margin = '-25px';
      activeSlideIndex = -1;
   
      $wrap = $(el);
      $content = $wrap.find('div:first');
   
      $loadingIndicator = $('<div class="loading" />');
      initNavigationBar();
      initArrowNavigation();
      initLoadingIndicator();
      initProgressBar();
      initializeSlidesContent();
      bindElements();

      if (options.autoPlay && (window.location.search.indexOf("debugmode=screenshot")<0)) {
        startAutoPlay();
      } else {
        $navigation.find('li:first a').trigger('click');
      }
    };

    this.destroy = function($el) {

    };


    function initProgressBar(){
      if (!options.progressBar) return; // if progressbar is disabled, do nothing.
   
      $progressBarTrack = $('<div class="progress-bar-track"><div class="progress-bar" /></div');
      $progressBarTrack.css({ 'position': 'absolute', 'top': 0, 'height': options.progressBarHeight, 'width': $navigation.find('li:first-child').outerWidth() });
      $progressBarTrack.find('.progress-bar').css({ 'position': 'absolute', 'bottom': 0, 'width': 0, 'height': options.progressBarHeight, 'background': '#124191' });
      $progressBarTrack.appendTo($navigation.find('li'));
    }


    function initLoadingIndicator() {
      if(!options.showLoadingIndicator)  return;
     $loadingIndicator.appendTo($content.parent());
    } 


    function initArrowNavigation(){
      // Arrow navigation

      if (options.arrows && $navigation.children().size() > 1) {
        $prev = $('<a href="#" class="next">&larr;</a>');
        $next = $('<a href="#" class="previous">&rarr;</a>');
        $arrowControls = $('<div class="arrow-controls" />');
    
        $prev.appendTo($arrowControls);
        $next.appendTo($arrowControls);
        $arrowControls.appendTo($wrap);
      }
    }
  

    function initNavigationBar() {

      // Slideshow navigation
      if (!options.externalControls) {
        $navigation = $wrap.find('ul.controls');
      } else {
        $navigation = $(options.externalControls);
      }
      // if navigationBar is disabled, remove it from DOM
      if (!options.navigation) {
        $navigation.remove();
        return;
      }
      // If there are no slides to show, stop.
      if(!$navigation.length) {
        return false;
      }

      initResponsiveImages($navigation);
      if($navigation.children().length===2) {
        $navigation.addClass('two');
      } else if($navigation.children().length===3) {
        $navigation.addClass('three');
      } else if($navigation.children().length===4) {
        $navigation.addClass('four');
      } else if($navigation.children().length===5) {
        $navigation.addClass('five');
      }
      $navigation.find('li:first').addClass('active');
    }


    function initializeSlidesContent(){
            // Create content div if it doesn't exist
      if (!$content.length) {
        $content = $('<div/>').prependTo($el);
      }

      if ($navigation.length) {
        $navigation.find('li').each(function(index) {
          var slides = $content.children(':eq(' + index + ')');
          var slide;
          if (slides.length) {
            slide = $(slides[0]);
          } else {
            slide = $('<div class="slide"></div>');
            slide.css({'display':'none', 'opacity':'0'});
            slide.appendTo($content);
          }
          slide.data('url', $(this).find('a').attr('href'));
          slide.data('class', $(this).attr('class'));
        });
      }

       // Assign slides to $content
      $slides = $content.children();
      $slides.first().show();
    };

    function moveBy(delta) {
      if(options.runOnce && $active.index() === $slides.length-1)  {
        stopAutoPlay(); 
        moveTo(0);
        return;
      }
      if (!$active) {
        $active = $slides.first();
      }
      moveTo(($active.index() + delta) % $slides.length);
    }

    function moveTo(index) {

      // clicking active index won't do anything
      if (index == activeSlideIndex) {
        return;
      }

      if ($active) {

       // $content.animate({ 'height': $active.outerHeight() }); // set height -> auto on contentLoad callback
        $active.animate({ 'opacity': 0 }, options.duration, options.easing, function() {
          // Hide the previous slide & teaser text immediately
          
          //$active.css({ 'display': 'none' });
          // switch active variable to clicked slide and load it's content
          activeSlideIndex = index;
          $previous = $active;
          $active = $slides.eq(index % $slides.length);
          loadContent($active);

          if ($active.index() === 0) {
            $navigation.children().find('.progress-bar').stop().width(0);
          }

          $active.css({ 'display': 'block' }).animate({ 'opacity': 1 }, options.duration, options.easing, function() {
            $navigation.children().removeClass('active').eq($active.index()).addClass('active');
            if (options.autoPlay && paused === false) {
              animateProgressBar();
            } else {
              highlightProgressBar();
            }
          });
        });
      } else {
        // first time use case (on page load)
        activeSlideIndex = index;
        $active = $slides.eq(index % $slides.length);
        loadContent($active);
        $active.css({ 'opacity': 0 }).animate({ 'opacity': 1 }, options.duration, options.easing, function() {
          $navigation.children().removeClass('active').eq($active.index()).addClass('active');
          if (options.autoPlay && paused === false) {
            animateProgressBar();
          }
        });
      }
    }

    function animateProgressBar() {

      if(!options.progressBar) return; // return if progressbar disabled
      var $activeNavigationItem = $navigation.children().eq($active.index());
      $activeNavigationItem.find('.progress-bar').stop().width(0).animate({ 'width': '100%' }, options.slideInterval, "linear");
    }

    function highlightProgressBar() {
      if(!options.progressBar) return; // return if progressbar disabled
    
      var $activeNavigationItem = $navigation.children().eq($active.index());
      $activeNavigationItem.find('.progress-bar').stop().css({ 'width': '100%' });
    };

    function loadContent(slide) {
      var url = slide.data('url');
      var type = slide.data('class');

      $content.height($content.height('auto').height());

      if (currentlyActiveYTPlayer) {
        try {
          currentlyActiveYTPlayer.pauseVideo();
        } catch (e) {
          // noop -> contentWindow of current player might be thrown away
        } 
      }
      
      if (type && type.indexOf('video-poster') >= 0) {
        var $link = $navigation.find('li:nth-child(' + ($(slide).index()+1) + ')');
        if (slide.find('.slideshow-video').size() !== 0) {
          currentlyActiveYTPlayer = $link.data('playerRef');
          if (currentlyActiveYTPlayer) {
            currentlyActiveYTPlayer.playVideo();
          }
          $content.css('height', '');
        } else {
          slide.append('<div class="slideshow-video"></div>');
          // Video plugin call
          $link.video({
              overlay: false,
              target: slide.find('.slideshow-video'),
              videoId: $link.find('a.youtube-link').attr('href'),
              autoplay: $(window).width() >= 640 && options.autoPlay,
              noclick: true
            });
          $link.insertContent($link);
          $content.css('height', '');
        }
      } else if (slide.find('img').size() === 1) {
        initResponsiveImages(slide);
        onImageReady(slide.find('img'), function(){ 
          $content.css('height', '');
        });
 
        $loadingIndicator.css({ 'display': 'none' });
      } else if (url) {
        $loadingIndicator.css({ 'display': 'block', 'opacity': 0 }).animate({ 'opacity': '1' }, 250, 'easeInOutQuart');
        repositionLoadingIndicator();
        $.get(url, function(data) {
          slide.css({ 'opacity': 0 });
          if (url) slide.removeData('url').append(data);
          initResponsiveImages(slide);
          onImageReady(slide.find('img'), function(){ 
            $content.css('height', 'auto');
            $loadingIndicator.css({ 'display': 'none' });
            slide.animate({ 'opacity': 1 });
           // call resize to alight arrows on smaller screen
            if($arrowControls) {
              onResize()
            }
         });
        });
      }
      contentLoadReady();
    };

    function initResponsiveImages(content) {
      $(content).find('.adaptive-exclude').removeClass('adaptive-exclude');
      $(window).adaptiveImages('forceRefresh');
    }

    function contentLoadReady() {
      if($previous) {
        $previous.css({ 'display': 'none' });
      }
    }

    function stopAutoPlay() {
      clearInterval(slideshowInterval);
      clearInterval(progressBarAnimationInterval);
      $navigation.children().find('.progress-bar').stop().width(0);
      paused = true;
    };

    function startAutoPlay() {
      moveTo(0);
      slideshowInterval = setInterval(function() { moveBy(1); }, options.slideInterval);
      paused = false;
    };

    function repositionLoadingIndicator() {
      $loadingIndicator.css({ 'top': $content.outerHeight()/2 + 'px' });
    };

    function onResize() {
      $navigation.find('.progress-bar-track').width($navigation.find('li:first-child').outerWidth());
      var $visuals = $content.find('.visuals:visible:first'), top;
      if ($visuals.length) {
        top = Math.floor((($visuals.height() - $arrowControls.height()) / 2));
      }
      repositionLoadingIndicator();
      if($arrowControls && top){
        $arrowControls.css({ 'top': top + 'px' });
      }
     // $content.css('height', $active.height() + 'px');
    };

    function unbindElements(){
      clearInterval(slideshowInterval);
      $navigation.off('click');
      $content.off('click');
      $wrap.off('click');   
    };

    function bindElements(){
      // Thumbnail click
      $navigation.on('click', 'a', function(event) {
        event.preventDefault();
        moveTo($(this).parent().index());
        if (options.autoPlay) stopAutoPlay();
      });

      if (options.forwardOnSlideTap) {
        $content.on('click', 'div.slide', function(event) {
        event.preventDefault();
          moveBy(1);
          if (options.autoPlay) stopAutoPlay();
        });
      }

      $wrap.on('click', 'a.previous, a.next', function(event) {
        event.preventDefault();
        var disabled = $(this).is('.disabled');
        if (!disabled) {
          if ($('html').attr('dir') === 'rtl') {
            moveBy($(this).is('.previous') ? 1 : -1);
          } else {
            moveBy($(this).is('.previous') ? -1 : 1);
          }
        }
        
        if (options.autoPlay) stopAutoPlay();
      });

      $(window).on('resize', $.debounce(onResize, 100));
    };


    function onImageReady(selector, handler) {
      var list, imageCount, imagesLeft;

      // If given a string, use it as a selector; else use what we're given
      list = typeof selector === 'string' ? $(selector) : selector;

      imagesLeft = list.size();

      // Hook up each image individually
      list.each(function(index, element) {
        if (element.complete) {
          // Already loaded, fire the handler (asynchronously)
          imagesLeft -= 1;        
          if(!imagesLeft) {
            setTimeout(function() {
                fireHandler.call(element);
            }, 10); // Won't really be 0, but close
          }
        }
        else {
          // Hook up the handler
          $(element).on('load', fireHandler);
        }
      });

      function fireHandler(event) {
        // Unbind us if we were bound
        $(this).off('load', fireHandler);


        // Call the handler
        handler.call(this);
      }
    };

  })
})(jQuery);


(function($) {

  $.plugin('normalizeHeights', function() {

    var $document = $(document), $window = $(window), options, $section, $elements;

    this.options = {
      debounceTime: 250,          // limits recalculation interval. 
      elementWrapper: undefined,  // selector used to find all elements that should be aligned inside of containser
      minScreenWidth: 0,  // resolution when element is hidden 
      maxScreenWidth: 9999999,  // resolution when element is hidden 
      animate: false
    };


    this.alignHeights = function() {

      var highestHeight = 0, oldHeight,
          $visibleElements = $elements.filter(':visible');
      
      // get old height to apply animation
      oldHeight = getMaxHeight($visibleElements);
      
      // reset height. This is here so when resilution goes out fo limits, it resets plugin setted heights. 
      // Otherwise elements might be left to state that browsers height calculations wont effect.
      $visibleElements.height('auto');
      
      // return if screen size is out of range
      if(options.minScreenWidth && $document.width() <= options.minScreenWidth) return;
      if(options.maxScreenWidth && $document.width() >= options.maxScreenWidth) return;
      
      highestHeight = getMaxHeight($visibleElements);
 
      // set same highest height for all elements
      if(options.animate) {
        $visibleElements.css('height', oldHeight).animate({'height': highestHeight}, 250);
      } else {
        $visibleElements.css({'height': highestHeight});
      }
    }

    var getMaxHeight = function(elements) {
      var highestHeight = 0;
      elements.each(function(element){
        var element = $(this), 
        element_height = element.height();
        if(highestHeight < element_height) {
          highestHeight = element_height;
        }
      });
      return highestHeight;
    }

    var resolveHeights = function(alignIt) {
      // if elements that should be aligned uses wrapper, then we use those ones
      if (options.elementWrapper) {
        $elements = $section.find(options.elementWrapper);
      } else {
        $elements = $section.children();
      }

      $section.find('img').on('load.' + this.namespace, alignIt);
    }

    // component initializer
    this.init = function($el) {
    
      $section = $el;
      options = this.options;
     
      // add some debounce for method so resize wont kill browser
      var alignIt = $.debounce(this.alignHeights, options.debounceTime);

      // bind for content reload custom event
      $section.on('contentReload', function(event) {
        resolveHeights(alignIt);
        alignHeights();
      });

      resolveHeights(alignIt);

      // bind event when recalculation should be triggered
      
      $window.on('resize', alignIt);

      // recalculate when done
      this.alignHeights();

    };


    // component uninitializer
    this.destroy = function($el) {
      // just unbind event
      $window.off('resize');
      $section.children().find('img').off('load.' + this.namespace);
    };


  });
})(jQuery);
(function($) {

  return $.plugin('adaptiveImages', function() {
    var _el, _images, _selector, _this, _sizes, _currentUsableResolutions;
    _sizes = [];
    forceImageLoad = BrowserDetect.browser === 'Symbian' || window.location.search.indexOf("debugmode=screenshot")>0;


    /*
    *   just sort given sizes
    */
    var sortSizes = function(sizes){
      return (sizes || []).sort(function(a, b) {
        return b.value - a.value;
      }); 
    };


    /*
    *  Bind needed events 
    */
    var handleBindings = function() {
      // unbind old events if they exitst.  Use components common namespace to cleanup all events.
      $(window).off('resize.adaptiveImages');
      $(window).off('scroll.adaptiveImages');
     
      // bind events (again)
      $(window).on('resize.adaptiveImages', function() {
        return $.debounce(onResize(), 500);
      });
      $(window).on('scroll.adaptiveImages', function() {
        return $.debounce(onScroll(), 300);
      });
    }


    /*
    *   create selector string that is used to collect all adaptive images on page
    */      
    var collectSelectors = function (sizes){
      var selector_array = [], _i, _len;
      for (_i = 0, _len = sizes.length; _i < _len; _i++) {
        selector_array.push("img[data-" + sizes[_i].key + "]");      
      }    
      return selector_array.join(', ');
    };


    /* 
    *   Sets data-origin attribute for maching adaptive images.
    */
    var initAdaptiveImages = function() {
      // add data-origin attribute to all (adaptive) images
      $(_selector).filter(':not(img[data-original])').each(function() {
        return $(this).attr('data-original', $(this).attr('src'));
      });
      // collect images to variable for later use
      _images = $('img[data-original]');
    };

    
    /*
    *   loops and collects available resolutions for current screen size
    */
    var resetCurrentMachingResolutions = function(){
      var _i, _len, size, 
          width = _el.width();
      
      // reset old state
      _currentUsableResolutions = [];
      for (_i = 0, _len = _sizes.length; _i < _len; _i++) {
        size = _sizes[_i];
        if (width >= size.value) {
          _currentUsableResolutions.push(size.key);
        }
      }
      //pust original images to available resolutions as fallback image
      _currentUsableResolutions.push('original');

      // Set current breakpoint for tracking purposes
      for (var i = 0; i < window.breakpoints.length; i++) {
        window.currentbreakpoint = window.breakpoints[i];
        if (width >= window.breakpoints[i]) {
          break;
        }
      }
    }

    var isNotHidden = function($elem, maxDepth) {
      while (maxDepth-- >= 0) {
        if ($elem.css('display') == 'none') {
          return false;
        }
        $elem = $elem.parent();
      }
      return true;
    }
    
    /*
    *   Select larges image available on data-attributes for current resolution.  
    *   If there's no any adaptive resolution available, use data-origin as fallback image. 
    */
    var render = function(adaptHiddenImages) {
      var $img, image, prop, size, src, type, width, _i, _len, _results;
  
      for (_i = 0, _len = _images.length; _i < _len; _i++) {
        image = _images[_i];
        $img = $(image);
        if ($img.is('.adaptive-exclude') === false && (adaptHiddenImages || isNotHidden($img, 2))) {
          (function() {
            var _j, _len1;
            for (_j = 0, _len1 = _currentUsableResolutions.length; _j < _len1; _j++) {
              type = _currentUsableResolutions[_j];
              src = $img.attr('data-' + type);
              if (src === undefined) {
                continue;
              }
              if ($img.attr('src') !== src && (imgShouldBeLoaded($img))) {
                $img.attr('src', src);
              }
              break;
            }
          })();
        }
      }
    };


    /*
    *   Check if image should be rendered. 
    *   If client is symbian devise or is on viewport (or just under), render image. 
    */
    var imgShouldBeLoaded = function(img) {

      var imagesTo, imgTop, _window_height, _window;
      if (forceImageLoad) {
        return true;
      }
      _window = $(window);
      _window_height = _window.height();
      imgTop = Math.floor($(img).offset().top);
      imagesTo = _window_height * 2 + _window.scrollTop();
      return imgTop < imagesTo || !$(img).is('.lazy');
    };

    /*
    *   Respond to onScroll event
    */
    var onScroll = function() {
      render();
    }

    /*
    *   Respond to onResize event
    */
    var onResize = function(adaptHiddenImages) {
      resetCurrentMachingResolutions();
      render(adaptHiddenImages);
    }


    /*
    *   public method to load adaptive images that are visible and run rerender.
    */
    var refresh = function(){
      initAdaptiveImages();
      return onResize();
    };

    /*
     *   public method to load adaptive images even if they are not visible and run rerender.
     */
     var forceRefresh = function(){
       initAdaptiveImages();
       return onResize(true);
     };

    /*
    *   plugin init method.
    */
    var initComponent = function(el) {
      _el = el;
      _this = this;
   
      _sizes = sortSizes(_this.options);

      _selector = collectSelectors(_sizes);
      
      if (_sizes === 0) return;
      // if symbian, dont even bind unused events
      if (!forceImageLoad)  {
        handleBindings();
      }
      refresh();
    };


    /*
    *   plugin destroy method.
    */
    var destroyComponent = function(el){
      $(window).off('resize.adaptiveImages');
      return $(window).off('scroll.adaptiveImages');
    }

    /*
    *   plugin methods.
    */
    return {
      doRefresh: refresh,
      forceRefresh: forceRefresh,
      init: initComponent,
      destroy: destroyComponent
    };
    
  });
})(jQuery);
(function($) {

  $.plugin('alignToMiddle', function() {

    var $window = $(window), $document = $(document), options, $section;

    this.options = {
      debounceTime: 150,
      minScreenWidth: 480,
      maxScreenWidth: 9999999
    };

    var align = function() {
      // return if screen size is out of range
      if(options.minScreenWidth && $document.width() <= options.minScreenWidth || options.maxScreenWidth && $document.width() >= options.maxScreenWidth) {
        $section.css({ 'top': 'auto', 'margin-top': 'auto' });
        return;
      } else {
        $section.css({ 'top': '50%', 'margin-top': -parseInt($section.outerHeight()/2, 10) + 'px' });
      }      
    };

    this.init = function($el) {
      $section = $el;
      options = this.options;
      var alignIt = $.debounce(align, options.debounceTime);
      $window.on('resize.' + this.namespace, alignIt).resize();
    };

    this.destroy = function($el) {
      $window.off('resize.' + this.namespace);
    };

  });

})(jQuery);
(function($) {

  $.plugin('aspectBlock', function() {

    var $section,
      options = { 
        elements: undefined,   // element to stretch
        allowedCutPercentage: '0', 
        block_limit_to_forgot_dots: 7,
        cutWithDots: false 
      }, 
    $elements_to_stretch, 
    $stretch_unit = 1;
    $allowed_cut_size = 0;
    
    this.init = function(el) {
     
      $section = $(el);
      $.extend(options, this.options);
      collectElements();
      bindEvents();
      setBlockUnits();
      setHeights();
    };

    this.destroy = function() {
      $(window).off('resize.' + this.namespace);
    }

    var collectElements = function() {

      $elements_to_stretch = $section.find(options.elements);

      $.each($elements_to_stretch, function(i, el) {
        var _el = $(el);
        _el.data('original_content', _el.find('p').first().html().split(' ')); 
      });
    }

    var setBlockUnits = function() {

      $stretch_unit = Math.min.apply(0, $.map( $elements_to_stretch, function(ele, i) { 
        return $(ele).outerWidth(true);
      }));

      $allowed_cut_size = Math.floor(options.allowedCutPercentage / 100 * $stretch_unit);
      
      return true;
    }

    var setHeights = function() {
      $.each($elements_to_stretch, function(i, el) {
       setHeight(el);
      });
    }

    var setHeight = function(el) {
      if ($stretch_unit === 0 && setBlockUnits() && $stretch_unit === 0) {
        return;
      }
      var _el = $(el), toHeight, blocks = 0, current_height, margins_height;
      resetElement(_el);
      current_height = _el.height();
      margins_height =  _el.outerHeight(true) - current_height; 
      

      do {
        toHeight = $stretch_unit * blocks++;
      } while(current_height > ( (options.block_limit_to_forgot_dots > blocks) ? $allowed_cut_size : 0) + toHeight);

      if (options.cutWithDots) {
        addDots(_el, toHeight);     
      }
  
      _el.height(toHeight - margins_height);
      
    }


    var resetElement = function(el) {
      
      var content_to_fit = el.data('original_content').slice(0);
      el.find('p').first().html(content_to_fit.join(' '));
      el.height('auto');
    }


    var addDots = function(el, fit_to_height) {
      var content_to_fit = el.data('original_content').slice(0);
      
      // reset element
      el.find('p').first().html(content_to_fit.join(' '));
    
      var index = content_to_fit.length, 
          sorted = el.height() > fit_to_height;
      
      while(el.height() > fit_to_height && index > 0) {
        content_to_fit.pop(); // remove last word
        index--; // disable infinit loop
        el.find('p').first().html(content_to_fit.join(' '));
      }

      if(sorted) {
        content_to_fit.pop();
        content_to_fit.pop();
        content_to_fit.push('...');
      }

      // put content back
      el.find('p').first().html(content_to_fit.join(' '));
    }

    var bindEvents = function() {
      $(window).on('resize.' + this.namespace, $.debounce(setHeights, 400));
      $.each($elements_to_stretch, function(i, el) {
        $(el).find('img').on('load', function() {
          var _el = el;
          setHeight(_el);
        });
      });
   }


  });
})(jQuery);
(function($) {

  $.plugin('hideContent', function() {
    
      var options,
          $componentRoot,
          $content,
          $contentHidden,
          $contentOriginalHeight,
          $heightTreshold,
          $seeAllBlock;
          
      this.options = {
        heightTresholdPixels: '200',    // height treshold to hide content in pixels
        heightTresholdLines: '4'  // height treshold to hide content in lines of text (default)
      };

      this.init = function(el) {
        $componentRoot = el;
        options = this.options;
        $content = $componentRoot.find(".content");
        $contentHidden = false;
        $contentOriginalHeight = $content.outerHeight();
        $seeAllBlock = "<a class='content see-all-block' href='javascript: void(0);'>"+I18n.get('content_hider', 'see_all')+"</a>";
          
        determineHeightTreshold();
        hideBlock();
      };
      
      
      this.destroy = function($el) {

      };
      
      
      // determines based on content and settings what is the height of visible area
      // preferring line height of the content
      function determineHeightTreshold() {
        var contentLineHeight = parseInt($content.find("p").css("line-height"));
        
        if (contentLineHeight > 0) {
          $heightTreshold = contentLineHeight * options.heightTresholdLines;
        } else {
          $heightTreshold = options.heightTresholdPixels;
        }
        //console.log("hideContent plugin: "+$heightTreshold);
      }
      
      
      function hideBlock() {
        //console.log("contentOriginalHeight: "+$contentOriginalHeight);
        
        // hide part of content if treshold exeeded
        if ($contentOriginalHeight > $heightTreshold) {
          // make whole content to a link
          $content.css("overflow", "hidden");
          
          // append see-all block
          $content.parent().append($seeAllBlock);
          
          // hide the content
          hideThing();
          
          $componentRoot.find(".see-all-block").click(function(event) {
              //console.log("content hidden? "+$contentHidden);
              if ($contentHidden) {
                showThing();
              } else {
                hideThing();
              }
          });
        } 
      };
      
      function hideThing() {
          $content.animate({
            height: $heightTreshold
          }, 250, "easeInOutQuart", function() {
            // Animation complete.
            $content.parent().find(".see-all-block").text(I18n.get('content_hider', 'see_all'));
            $contentHidden = true;
            //console.log("content hidden with height "+$content.height());
          });   
      };
      
      function showThing() {
          $content.animate({
            height: $contentOriginalHeight
          }, 250, "easeInOutQuart", function() {
            // Animation complete.
            $content.parent().find(".see-all-block").text(I18n.get('content_hider', 'hide'));
            $contentHidden = false;
            //console.log("content visible with height "+$content.height());
          });  
      };

  })
})(jQuery);
(function($) {

  $.plugin('cookieNotification', function() {

    var $window = $(window), options, $section;

    this.options = {
      killDuration: 500,
      killDelay: 250,
      killIdleDelay: 1000 * 60 * 1.5,
      useKillIdle: false,
      policyCookieName: "nokia_cookiepolicy",
      killCallback: $.Callbacks(),
      policyCookieUrl: null
    };

    var cookiesEnabled = function() {
     var isEnabled = (navigator.cookieEnabled) ? true : false;
     if (typeof navigator.cookieEnabled == "undefined" && !isEnabled)
      { 
      document.cookie="check_if_cookie_enabled";
      isEnabled = (document.cookie.indexOf("check_if_cookie_enabled") != -1) ? true : false;
      }
     return (isEnabled);
    };

    var getAcceptance = function() {
      if($.cookies.get(options.policyCookieName)) {
        return $.cookies.get(options.policyCookieName);
      } else {
        return false;
      }
    };

    var startKillMeTimer = function() {
      $.delay.apply(this, [killMe, options.killIdleDelay]);
    };

    var killMe = function() {
      var expiryDate = new Date();
      var cookieOptions = {
        domain: '.nokia.com',
        expiresAt: expiryDate
      }
      expiryDate.setTime(expiryDate.getTime() + (1000 * 365 * 86400));
      $.cookies.set(options.policyCookieName, "11111111", cookieOptions);
      $("#cookie-notification").animate({ 'height': '0' }, options.killDuration, 'easeInOutQuart', function() {
       $("#cookie-notification").remove();
        options.killCallback.fire();
      });
    };

    var openPolicyCookieUrl = function() {
      window.location = options.policyCookieUrl;
    }

    this.init = function($el) {
      $section = $el;
      options = this.options;
      // TODO: Add separate condition for true and false based on legal requirementa
      // TODO: refactor that horrible i18n stuff out
      var enabled_to_this_country=I18n.get('cookiedisclaimer','cookie_policy_ipdetection_is_on_active_list');
      if(!getAcceptance() && enabled_to_this_country===true && cookiesEnabled() ) {
        var content = $('#cookie-notification').remove();
        content.show();
        $('#container').prepend(content);
        content.on('click', 'a', function(event) {
          options.killCallback.add(openPolicyCookieUrl);
          options.policyCookieUrl = $(this).attr('href');
          $.delay.apply(this, [killMe, options.killDelay]);
          event.preventDefault();
        });
        if (options.useKillIdle) {
          startKillMeTimer();
        }
      }
    };

    this.destroy = function($el) {
    };

  });

})(jQuery);
(function($) {

  /* Used e.g. in filters */
  $.plugin('enhanceToggle', function() {

    var $window = $(window), $trigger, $target, $section, targetSelector, originalHeight, options;

    function onTriggerClick(event, broadcastClose) {
      var $self = $(this),
          start = $target.height(),
          end = (start === 0) ? $target.height('auto').height() : 0;

      // if this event is open then send broadcast to other instances so they will auto-close
      if (options.closeEvent && !broadcastClose && !isOpen()) {
        $(document).trigger(options.closeEvent);
      }

      // don't jump to the anchor
      if (options.silent && !broadcastClose) event.preventDefault();

      $target.toggleClass(options.openedClassName);
      $trigger.toggleClass(options.activeClassName);

      // remove window hash if it matches the current target and
      // we're about to hide the target
      if (window.location.hash == targetSelector && start > 0 && !broadcastClose) {
        window.location.hash = '';
        event.preventDefault();
      }

      // slide open or closed
      $target.height(start).animate({ 'height': end }, options.duration, options.easing, function() {
        // remove inline height after animation is done if target is open
        if (end > 0) $target.height('');

        if (!broadcastClose) {
          // Scroll the window to the trigger's offset().top
          var scrollPoint = parseInt($self.offset().top, 10);
          // responsive scroll switch makes the page scroll to top only if its narrower than 640px
          if ((options.responsiveScrollToTop && ($(window).width() < 640)) || typeof options.responsiveScrollToTop == 'undefined') {
            $window.scrollTop(scrollPoint);
          }
        }
        options.callback();
      });
    }

    function isOpen() {
      return $target.hasClass(options.openedClassName);
    }

    this.closeAnchor = function() {
      if (isOpen()) {
        onTriggerClick(null, true);
      }
    }

    this.options = {
      openedClassName : 'enh-toggle-opened',
      activeClassName : 'enh-toggle-active',
      duration        : 275,
      easing          : 'easeInOutQuart',
      closeEvent      : null,
      callback        : $.noop,
      silent          : false,
      responsiveScrollToTop: true
    };

    this.init = function($el) {
      $trigger = $el;
      targetSelector = $trigger.attr('href');
      $target = $(targetSelector);
      originalHeight = $target.height();
      options = this.options;

      $target.height(0);
      $trigger.on('click.' + this.namespace, onTriggerClick);

      // trigger toggle if the current location hash matches the selector
      if (window.location.hash == targetSelector) {
        $trigger.trigger('click.' + this.namespace);
      }
      if (options.closeEvent) {
        $(document).on(options.closeEvent, this.closeAnchor);
      }
    };

    this.destroy = function($el) {
      $trigger.off('click.' + this.namespace);
      //$target.height(originalHeight);
      $target.css({ 'height': 'auto' });
      //console.log('I, ' + this.namespace + ', was destroyed :(');
    };

  });

  /* Used for in-page navigations, e.g. product page*/

  $.plugin('anchorNavigation', function() {

    var $window = $(window), options, $section;

    this.options = {
      padding: 12,
      debounceTime: 25,
      pushHistory: false
    };

    function setActive(hash) {
      $section.find('li a[href="' + hash + '"]').parent().addClass('active').siblings().removeClass('active');
      if (options.pushHistory && history.pushState && window.location.hash !== hash) {
        history.pushState(null, null, hash);
      }
    }

    function scroll() {
      var $links = $section.find('li > a');
          scrollTop = $(this).scrollTop();
      if(parseInt((scrollTop + $($links.first().attr('href')).outerHeight()), 10) > $($links.first().attr('href')).offset().top) {
        $links.each(function() {
          var offset = $($(this).attr('href')).offset();
          if ((scrollTop + parseInt($section.outerHeight() + options.padding, 10)) > offset.top && scrollTop < parseInt(offset.top + $($(this).attr('href')).outerHeight()-$section.outerHeight(), 10)) {
            setActive($(this).attr('href'));
          }
        });
      }
      if(parseInt((scrollTop + $($links.first().attr('href')).outerHeight()), 10) < $($links.first().attr('href')).offset().top) {
        $section.find('li').removeClass('active');
      }
    }

    this.init = function($el) {
      $section = $el;
      options = this.options;

      var lazyScroll = $.debounce(scroll, options.debounceTime);

      $window.on('scroll.' + this.namespace, lazyScroll);

    };

    this.destroy = function($el) {
      $window.off('scroll.' + this.namespace);
    };

  });

  /* Used e.g. in search result tabs */
  $.plugin('enhanceAnchors', function() {

    this.options = {

    };

    this.init = function($el) {
      var $filters = $el.find('li > a');

      var $targets = $($filters
        .map(function() {
          if (!!(targetID = this.href.split('#')[1])) {
            return '#' + targetID;
          }
        })
        .get()
        .join(',')
        .replace(/(,)+/g, ',')
      ).hide();

      $filters.bind('click', function() {
        var target  = this.href.split('#')[1],
          $target = $targets.hide();

        $filters
          .filter('.active')
          .removeClass('active');

        if (!!target) {
          $target = $('#' + target);
        }

        $(this).addClass('active');
        $target.show();
      });

      // initially show either ...
      var $initActiveFilter;

      // marked as active
      $initActiveFilter = $filters.filter('.active');

      // or through location hash
      if (!$initActiveFilter.length) {
        var $active = $filters.filter('[href=' + window.location.hash + ']');
        if ($active.length) {
          $initActiveFilter = $active;
        }
      }

      // or simply the first one
      if (!$initActiveFilter.length) {
        $initActiveFilter = $filters.filter('[href=#]');
      }

      $initActiveFilter.trigger('click');
    };

    this.destroy = function($el) {

    };

  });

})(jQuery);
(function($) {

  // ---------------------------------------------------------------------------
  // Imitate placeholder behavior for input fields

  $.plugin('enhancePlaceholder', function() {

    var $input, options;

    function onFocus() {
      // the current value matches the placeholder, empty and remove the class
      if ($input.val() == $input.prop('placeholder')) {
        $input.val('');
        // if the input was originally a password field change it's type back
        if ($input.hasClass(options.passwordClassName)) {
          $input.removeClass(options.passwordClassName);
          $input.prop('type', 'password');
        }
      }
    }

    function onBlur() {
      // nothing has changed, reset
      if ($input.val() === '' || $input.val() == $input.prop('placeholder')) {
        if ($input.attr('type') == 'password') {
          $input
            .addClass(options.passwordClassName)
            .prop('type', 'text');
        }
        $input.val($input.prop('placeholder'));
      }
    }

    function onSubmit() {
      // TODO: should we store the original selector?
      $(this).find('[placeholder]').each(function() {
        var $this = $(this);
        if ($this.val() == $this.prop('placeholder')) {
          $this.val('');
        }
      });
    }

    this.options = {
      passwordClassName: 'enh-placeholder-password'
    };

    this.init = function($el) {
      $input = $el;
      options = this.options;

      $input
        // set the placeholder text based on the placeholder attribute
        .val($input.prop('placeholder'))
        // convert password fields initially to text fields to be able to show the placeholder
        .filter('[type=password]')
        // expose password separately to CSS
        .addClass(options.passwordClassName)
        .prop('type', 'text')
        .end()
        .bind('focus.' + this.namespace, onFocus)
        .bind('blur.' + this.namespace, onBlur)
        // initially blur
        .blur();

      // TODO: attaching events to enclosing form for each input sounds fishy
      // when the parent form is submitted, make sure we don't send placeholders for "empty" fields
      $input.parents('form').bind('submit.' + this.namespace, onSubmit);
    };

    this.destroy = function($el) {
      $input.unbind('.' + this.namespace);
      $input.parents('form').bind('.' + this.namespace);
    };

  });

  // ---------------------------------------------------------------------------

  $.plugin('enhanceCheckbox', function() {

    var $input, $label, options;

    this.options = {
      className: 'enh-checkbox-selected',
      labelClassName: 'enh-checkbox-wrapper'
    };

    function update() {
      $label.toggleClass(options.className, $input.is(':checked'));
    }

    this.check = function($el, checked) {
      $el.attr('checked', checked);
      update();
    };

    this.init = function($el) {
      options = this.options;
      $input = $el;
      $label = findLabelForInput($input).addClass(options.labelClassName);
      $input.on('change.' + this.namespace, update);
      update();
    };

    this.destroy = function($el) {
      $input.off('change.' + this.namespace);
      $label.removeClass(options.className);
    };

  });

  // ---------------------------------------------------------------------------

  $.plugin('enhanceRadio', function() {

    var $inputs, $labels, options;

    this.options = {
      className: 'enh-radio-selected',
      labelClassName: 'enh-radio-wrapper'
    };

    function update() {
      $labels.removeClass(options.className);
      $inputs.filter(':checked').each(function() {
        findLabelForInput($(this)).addClass(options.className);
      });
    }

    this.init = function($el) {
      options = this.options;
      $inputs = $el.find('input[type="radio"]');
      $labels = $el.find('label').addClass(options.labelClassName);
      $inputs.on('change.' + this.namespace, update);
      update();
    };

    this.destroy = function($el) {
      $inputs.off('change.' + this.namespace).removeClass(options.labelClassName);
    };
  });

  $.plugin('enhanceFile', function() {
    var $input, $enh_button, $enh_file_name_container;

    function createElements(){
      $enh_button = $('<input type="button" class="button submit input-file-button" value="' + I18n.input_file.choose_file + '" />');
      $enh_file_name_container = $('<span class="input-file-name">' + I18n.input_file.no_file_selected + '</span>');
      $input.css({'visibility':'hidden', 'height':'0','width':'0'}).after($enh_file_name_container).after($enh_button);
      $enh_button.on('click', function(){
        $input.trigger('click');
      });
    }

    this.init = function($el) {
      $input = $el;

      createElements();

      $input.on('change.' + this.namespace, function(){
        var file = this.value;
        var fileName = file.split("\\");
        $enh_file_name_container.html(fileName[fileName.length-1]);
      });
    };

    this.destroy = function($el) {
      $input.off('change.' + this.namespace);
      $enh_button.remove();
      $enh_file_name_container.remove();
    };

  });

  // ---------------------------------------------------------------------------
  // HELPERS:

  function findLabelForInput($input) {
    var $label = $('label[for=' + $input.attr('id') + ']');
    if ($label.length === 0) {
      $label = $input.closest('label');
    }
    if ($label.length === 0) {
      $.error('Label required for the input element to be defined.');
      return false;
    }
    return $label;
  }

})(jQuery);
(function($) {

  $.plugin('enhanceLoading', function() {

    var self = this, $container, enabled, triggerEvents, updateWindowLocation, useAjaxParameter, callback, scrollToTop, firstPopStateFired;

    function scrollToContainer() {
      if ($container.offset().top < $(window).scrollTop())
        $('html, body').animate({ scrollTop: $container.offset().top }, 400);
    }

    // Return version of `url` we can use for ajax loading (as opposed
    // to what we set as the page URL in the browser address bar)
    function urlForLoading(url) {
      var noHashURL = url.split('#')[0];
      return !useAjaxParameter ? noHashURL : noHashURL + (noHashURL.indexOf('?') === -1 ? '?' : '&') + 'ajax=true';
    };

    function doLoad(url, loadUpdatesLocation, doneHandler) {
      if (scrollToTop)
        scrollToContainer();
      window.nkEnhanceLoadingInProgress = true;
      $container.load(
        [urlForLoading(url), $container.selector + ' > *'].join(' '),
        function() {
          $(window).resize(); // update adaptive images
          if (updateWindowLocation && (loadUpdatesLocation !== false))
            history.pushState(null, null, url);
          if (!!doneHandler)
            doneHandler();
          window.nkEnhanceLoadingInProgress = false;
          if ($.isFunction(callback))
            callback($(this));
        }
      );
    };

    function onEvent(event) {
      event.preventDefault();
      if (!enabled)
        return;
      var $el = $(this);

      if ($el.is('a:not(.disabled)'))
        doLoad($el.attr('href'));
      else if ($el.is('input, select, form')) {
        var $closestForm = $el.closest('form');
        doLoad($closestForm.attr('action').replace(/^\./, '') + '?' + $closestForm.serialize());
      }
    };

    function mapFromQueryString(query) {
      var ret = {};
      var vars = query.replace(/^\?/, '').split('&');
      for (var i=0; i < vars.length; i++) {
        var pair = vars[i].split('=');
        pair[0] = decodeURIComponent(pair[0]);
        pair[1] = decodeURIComponent(pair[1]);
        if (typeof ret[pair[0]] === 'undefined')
          ret[pair[0]] = pair[1];
        else if (typeof ret[pair[0]] === 'string')
          ret[pair[0]] = [ret[pair[0]], pair[1]];
        else
          ret[pair[0]].push(pair[1]);
      }
      return ret;
    };

    function updateStaticTriggerElements() {
      var setInputCheckedState = function($inputEl, isChecked) {
        if ($inputEl.hasClass('enh-checkbox')) {
          $inputEl.enhanceCheckbox('check', isChecked);
        } else {
          if (isChecked)
            $inputEl.attr('checked', 'checked');
          else
            $inputEl.removeAttr('checked');
        }
      };
      var setSelectValue = function($selectEl, selectedValue) {
        var valueToApply = selectedValue;
        if (typeof selectedValue == 'undefined' || selectedValue === null)
          valueToApply = $selectEl.find('option:first').val();
        if ($selectEl.hasClass('enh-select')) {
          $selectEl.enhanceSelect('select', valueToApply);
        } else {
          $selectEl.find('option').removeAttr('selected');
          $selectEl.find('option[value="'+valueToApply+'"]').attr('selected', 'selected');
        }
      };

      var queryParams = mapFromQueryString(window.location.search);
      $.each(triggerEvents, function(eventName, selector) {
        var $el = $(selector);
        var isInsideContainer = (0 < $container.find($el).length);
        var $form = $el.closest('form');
        if (isInsideContainer || !$form)
          return;
        // Disable loading while we are updating the form so that
        // this would not trigger reloads:
        enabled = false;
        // Update form state to match GET parameters
        $form.find('input, select').each(function(index, formItem) {
          $formItem = $(formItem);
          var qValue = queryParams[$formItem.attr('name')];
          if ($formItem.is('input[type=checkbox], input[type=radio]'))
            setInputCheckedState($formItem, (qValue === 'on'));
          else if ($formItem.is('select'))
            setSelectValue($formItem, qValue);
          $formItem.trigger('change');
        });
        enabled = true;
      });
    };

    function onPopState(event) {
      // ignore the first popstate (which is sent upon the initial page load),
      // because we already have the initial content on the page:
      if (firstPopStateFired) {
        doLoad(window.location.href, false, function() {
          updateStaticTriggerElements();
        });
      }
      firstPopStateFired = true;
    };

    this.options = {
      container: '',
      events: {},
      updateWindowLocation: true,
      useAjaxParameter: true,
      callback: $.noop,
      scrollToTop: false
    };

    var supportsHistoryAPI = !!(window.history && history.pushState);

    this.init = function($el) {
      $container = $(this.options.container);
      updateWindowLocation = supportsHistoryAPI && this.options.updateWindowLocation;
      useAjaxParameter = this.options.useAjaxParameter;
      scrollToTop = this.options.scrollToTop;
      triggerEvents = this.options.events;
      callback = this.options.callback;
      enabled = true;

      $.each(this.options.events, function(eventName, selector) {
        $el.on(eventName + '.' + self.namespace, selector, onEvent);
        $(selector).closest('form').addClass('enhanced-loading');
      });
      if (updateWindowLocation)
        $(window).on('popstate', onPopState);
    };

    this.destroy = function($el) {
      $.each(this.options.events, function(eventName, selector) {
        $el.off(eventName + '.' + self.namespace);
        $(selector).closest('form').removeClass('enhanced-loading');
      });
      if (updateWindowLocation)
        $(window).off('popstate', onPopState);
    };

  });

})(jQuery);
(function($) {

  $.plugin('enhanceSelect', function() {

    var $original,
        $select,
        $trigger,
        $label,
        $list,
        $options,
        $masks,
        $focusHelper,
        timeout,
        options,
        $possibleOptions,
        namespace, 
        renderAsFilteredList;

    function createElements() {

      var markup = [
        '<div class="' + $original.attr('class') + '">',
        // the trigger will show and hide the options
        '<a href="#" class="' + options.triggerClassName + '">',
        // the trigger will in many cases need some sort of icon
        '<span class="' + options.triggerIconClassName + '">+</span>',
        // show current value in trigger text
        '<strong>' + $original.find('option[value="' + $original.val() + '"]').text() + '</strong>',
        '</a>',
        // this will help us with focus and keyUp events
        '<input type="text" class="focus-helper" />',
        '<ul>'
      ];
      renderAsFilteredList  = $original.find('option').length >  options.asFiltedListFrom;
      
      if(renderAsFilteredList) {
        (function(){
          var originalOptions = $original.find('option').sort(function(a, b){
            var a_value = a.getAttribute('value');
            var b_value = b.getAttribute('value');
            if(a_value < b_value) return -1;
            if(a_value > b_value) return +1;
            return 0;
          });
          $original.html(originalOptions);
        })();
      }
      
      $original.find('option').each(function() {
        var $this = $(this), selected = $this.is(':selected') ? 'class="selection" ' : '';
        
        if(options.showEmptyValues || $(this).attr('value')) {
          markup.push('<li><a ' + selected + 'href="#' + $this.val() + '">' + $this.html() + '</a></li>');
        } 

      });
      markup.push('</ul></div>');
      $select = $(markup.join(''));

      // attach to DOM
      $original.hide().before($select);

      // store references to elements
      $trigger              = $select.find('a.' + options.triggerClassName);
      $label                = $trigger.find('strong');
      $list                 = $select.find('ul').hide();
      $options              = $list.find('a');
      $possibleOptions      = $options;
      $focusHelper          = $select.find('input.focus-helper');
      // "masks" are parent elements with `"overflow" set to "hidden"


      $masks = $original.parents().filter(function() {
        return $(this).css('overflow') == 'hidden';
      });
    }

    function bindEvents() {
      // Bind to form reset event
      $original.closest('form').bind('reset.' + namespace, function(event) {
          selectOption($($options.get(0)));
        });
      // Trigger click toggles options list visibility
      // (some browsers actually do set the focus on a link)
      $trigger
        .bind('click.' + namespace, function(event) {
          event.preventDefault();
          $list.is(':visible') ? hideList() : showList();
          $focusHelper.focus();
        })
        .bind('focus.' + namespace, function() {
          $focusHelper.focus();
        });

      // Option hover highlights, click selects
      $options
        .on('mouseenter.' + namespace, function() {
          $options.removeClass('selection');
          $(this).addClass('selection');
        })
        .on('mouseleave.' + namespace, function() {
          $(this).removeClass('selection');
        })
        .on('click.' + namespace, function(event) {
          selectOption($(this));
          if (options.silent) event.preventDefault();
        });

      // Keyboard navigation
      $focusHelper
        .bind('focus.' + namespace, function() {
          // ensure that the helper is empty
          $(this).val('');
        })
        // handle different key up events
        .bind('keyup.' + namespace, onKeyUp);

      $list.on('keyup.' + namespace, 'a' , onKeyUp);
      // Fix size and offset on window resize/scroll
      $(window).bind('resize.' + namespace, $.debounce(adjustHeightAndOffset, 300)).trigger('resize');
    }

    // Show the options list
    function showList() {
     // ensure that everything is it's place to begin with

      adjustHeightAndOffset();
      $focusHelper.val('');
      $list.show();
      $possibleOptions = $options;
      $options.show();

      var original_selection_index = $original.find('option').filter(':selected').index()
      if($original.size() && original_selection_index) {
        $($options.removeClass('selection').get(original_selection_index-1)).addClass('selection')
      } else {
        $($options.removeClass('selection').get(0)).addClass('selection')
      }
      
      $('html').on('click.' + namespace, hideIfClickedOutside);
    
      // add extra style for focus helper. Input is used as filter for options when component is rendered as filtered list
      if (renderAsFilteredList) {
        $trigger.hide();
        $focusHelper.addClass('filtered-list');
      }
      $masks.css('overflow', 'visible');
    }

    // Hide the options list
    function hideList() {
      
      $list.hide();
      $('html').off('click.' + namespace, hideIfClickedOutside);
      $trigger.show();
      // revert changes to point before list went visible 
      if (renderAsFilteredList) {

        $trigger.show();
        $focusHelper.removeClass('filtered-list');
        $focusHelper.val('');
      }
      setTimeout(function(){$masks.css('overflow', 'hidden');}, 50);
        

    }

    // hide list
    function hideIfClickedOutside(event) {
      if (!$.contains($select.get(0), event.target)) {
        hideList();
      }
    }

    function selectOption($option) {
      var value = $option.attr('href').split('#')[1];
      $original.val(value).trigger('change');
      $label.text($option.text());
      $options
        .removeClass('selection')
        .filter('[href="#' + value + '"]')
        .addClass('selection');
      hideList();

      // for form validation: if selected element is something else than first element -> user has chosen an actual value
      if (value) {
        $list.parent().addClass("element-selected");
      } else {
        $list.parent().removeClass("element-selected");
      }
    }

    function onKeyUp(event) {
      var $current, $selection, key = { tab: 9, esc: 27, up: 38, down: 40, enter: 13, space: 32 };

      // if component is not filted list, input should be empty after a while
      if(!renderAsFilteredList) {
        // ensure that the helper is always empty
        clearTimeout(timeout);
        timeout = setTimeout(function(focusHelper) {
          focusHelper.val('');
        }, 500, $focusHelper);
      }

      // show the list if its hidden
      if ($list.is(':hidden')) {
        if ($.inArray(event.which, [key.tab, key.enter, key.space, key.down] != -1)) showList();
        return;
      }
       
      // only deal with key events if the list actually showing
      switch(event.which) {
        case key.esc:

          hideList();
          break;

        case key.up:
        case key.down:

          event.preventDefault();
          
          $current = $options.filter('.selection');
          $options.removeClass('selection');
        
          // Change selection by arrow keys
          var current_index = $possibleOptions.index($current);
          if (event.which == key.up) {
            $selection = $possibleOptions[current_index -1] || $possibleOptions[$possibleOptions.size()-1] ;
          } else if (event.which == key.down) {
            // next or first 
            $selection = $possibleOptions[current_index +1] || $possibleOptions[0] ;
          }
          $selection = $($selection);
          $selection.addClass('selection');
          
          // adjust scroll if necessary
          var selectionTop  = $selection.position().top,
            selectionHeight = $selection.height(),
            listHeight      = $list.height(),
            scrollTop       = $list.scrollTop();
          if (selectionTop + selectionHeight > listHeight || selectionTop < 0) {
            if ((selectionTop + scrollTop) >= listHeight) {
              $list.scrollTop(selectionTop + scrollTop - listHeight + selectionHeight);
            } else if (selectionTop < scrollTop) {
              $list.scrollTop(scrollTop + selectionTop);
            }
          }
          break;

        case key.enter:
        case key.space:
        case key.tab:

          event.preventDefault();
          $current = $options.filter('.selection');
          if ($current.length) {
            selectOption($current.first());
            $list.hide();
          }
          break;

        default:

          // select by currently typed
          var needle = $focusHelper.val();
          $possibleOptions = $options.filter(function() {
            if (needle.length <= 0) { return $options; }
            return $.trim($(this).text().toLowerCase()).slice(0, needle.length) == needle;
          });
          var match = $possibleOptions.first();
          if (match.length) {
            $options.removeClass('selection');
            match.addClass('selection');
          }
          if (renderAsFilteredList) {
            $list.hide();
            $options.hide();
            if (needle.length <= 0)  {
              $options.show();
            } else {
              $possibleOptions.show(); 
            } 
            $list.show();
          }

      }
    }

    // adjust the height before adjusting offset,
    // since the offset depends on the correct height
    function adjustHeightAndOffset() {
      var $window      = $(window),
        viewportHeight = $window.height(),
        triggerHeight  = $trigger.outerHeight(),
        triggerOffset  = $trigger.offset().top - $window.scrollTop(),
        listHeight     = $list.css('height', '').outerHeight();
      // ensure that all options a accessible and visible
      // by the means of scrolling if necessary
      $focusHelper.css({
        width: $trigger.outerWidth() , // remove margins
        height: $trigger.outerHeight() -2// remove margins
      });

      if (listHeight > viewportHeight) {
        listHeight = Math.floor(viewportHeight / triggerHeight) * triggerHeight - triggerHeight;
        $list.css('height', listHeight);
      }
      // ensure that the options list is always fully visible
      // list fits by default
      if (viewportHeight - (triggerHeight + triggerOffset) > listHeight) {
        $list.css('top', triggerHeight);
         }
      // list doesn't fit, not enough room beneath
      else {
        var overflow = listHeight - (viewportHeight - (triggerHeight + triggerOffset));
        // push the list up an nth of the height of the trigger for looks
        var offset = Math.floor(overflow / triggerHeight) * triggerHeight * -1;
        // ensure that the list is always glued to the trigger,
        // this handles the top
        $list.css('top', Math.max(offset, -listHeight));
      }
    }

    this.options = {
      triggerIconClassName: 'enh-select-trigger-icon',
      triggerClassName:     'enh-select-trigger',
      silent:               true,
      simple:               false, 
      showEmptyValues:      true, 
      asFiltedListFrom:     999
    };

    this.init = function($el) {
      // 608 is the width of iframes in the tablet-lite breakpoint
      // we need to enhance the selects from tablet-lite up and for iframes
      // this means 608 ->

      if ($(window).width() <= 607 && $('head meta[name="componentContext"]').attr('content') !== 'styleguide')
        return;

      $original = $el;
      options = this.options;
      namespace = this.namespace;
      createElements();
      bindEvents();
      $el.closest('form').addClass('enhanced');
    };

    this.select = function($el, value) {
      selectOption($options.filter('[href="#' + value + '"]'));
    };

    this.destroy = function($el) {
      $original.show();
      $select.remove();
      $(window).off('.' + namespace);
      $('html').off('.' + namespace);
      $el.closest('form').removeClass('enhanced');
      $list.off('keyup.' + namespace, 'a');
    
      $options
        .off('mouseenter.' + namespace)
        .off('mouseleave.' + namespace)
        .off('click.' + namespace);
    };

  });
})(jQuery);
(function($) {
  /*
    Thanks to Filament Group for the simple idea of checking for two rows of navigation items!
  */
  $.plugin('enhanceSubNavigation', function() {

    var $window = $(window),
        $section,
        navItems;

    this.options = {
      debounceTime: 250
    };

    var respond = function() {
      $section.removeClass('drop-menu');

      // Check if the items go on two rows, if so, trigger the toggle behaviour
      if($(navItems[navItems.length-1]).offset().top > $(navItems[0]).offset().top) {
        $section.addClass('drop-menu');
        $section.find('.active').prependTo($section.find('.wrapper ul'));
        if ($section.find('li.active').length < 1) {
          $section.find('.wrapper ul').prepend('<li class="active helper-label"><a>' + currentPageTitle + ' ' + I18n.get('helpers', 'navigation_label_extension') + '</a>');
        }
      } else {
        $section.find('li.helper-label').remove();
      }
    };

    this.init = function($el) {
      $section = $el;
      navItems = $el.find('li');
      options = this.options;

      // Bind a debounced resize event to the window
      var lazyRespond = $.debounce(respond, options.debounceTime);
      $window.on('resize.' + this.namespace, lazyRespond);

      // Bind open/close toggle to the active item
      $section.on('click', 'li.active', function(event) {
        $section.toggleClass('expanded');
        event.preventDefault();
      });
      respond();

    };

    this.destroy = function($el) {
    };
  });
})(jQuery);
(function($) {

  $.plugin('feedback', function() {
  	
  	  var options,
           $componentRoot,
           $yesButton,
           $noButton,
           $inputWrapper,
           $inputField,
           $thankYouBlock,
           $inputMaxChars,
           $sendButton,
           $minInputWidth,
           $breakpoint,
           $stars,
           $starsHitArea,
           $starsAmount,
           $starRating,
           $alreadyRatedRating,
           $hidableArea,
           $isRTL,
           $cookieValues,
           $maxCookieValues;
  	
      this.options = {
        url: 'NA',                      // optional parameter that defines where the rating data is sent
        useStars: false,                // render component using either yes/no dialogue or stars
        itemID: 'NA',                   // ID for star rated item
        cookieName: 'topicRatingCookie',// cookie name
        callback: 'NA'                  // callback function for utag trakcing library function
      };

	    this.init = function(el) {
			  options = this.options;
			  $componentRoot = el;
        $inputMaxChars = 200;
        $minInputWidth = 250;
        $breakpoint = 240;
        $cookieValues = [];
        $maxCookieValues = 25;
        $isRTL = $('body').hasClass('rtl');
        $inputWrapper = "<div class='input-wrapper'></div>"
			  $inputField = "<input class='text-field' type='text' value='' name='feedback-field' maxlength='"+$inputMaxChars+"'></input>";
			  //$thankYouBlock = "<div class='title'>"+I18n.get('feedback_block', 'thank_you')+"</div>";
			  
			  $yesNoButtons = "<div class='buttons'><div class='button button-yes'>"+I18n.get('feedback_block', 'feedback_yes')+"</div><div class='button button-no'>"+I18n.get('feedback_block', 'feedback_no')+"</div></div>";
			  $sendButton = "<div class='buttons'><div class='button button-send'>"+I18n.get('feedback_block', 'send')+"</div></div>";
        
        $stars = "<div class='stars-rating'></div>";
        $starsHitArea = 20;
        $starsYOffset = 22;
        $starsAmount = 5;
        $starRating = 0;
        $alreadyRated = false;

			  //console.log("URL = "+options.url+", componentRoot = "+$componentRoot);
			  
			  // init cookie
			  initCookie();
			  
			  // set hidable area
			  setHidableArea();
			  
			  // render rating widget
			  renderRatingWidget();
			  
			  // bind events
			  bindEvents();
	    };
	    
      this.destroy = function($el) {
      };
      
      //
      function setHidableArea() {
        if (options.useStars) {
          $hideableArea = $componentRoot.find(".title");
        } else {
          $hideableArea = $componentRoot.children(":first-child");
        }
      }
      
      // renders either yes/no buttons or rating widget
      function renderRatingWidget() {
        if (options.useStars) {
          $componentRoot.find('.feedback-wrapper .title:first').after($stars);
          initializeStars();
        } else {
          $componentRoot.find('.feedback-wrapper').append($yesNoButtons);
          $yesButton = $componentRoot.find('.button-yes');
          $noButton = $componentRoot.find('.button-no');
          equalizeButtons();
        }
      }
      
      //
      function initCookie() {
        $cookieValues = $.cookies.get(options.cookieName);
        if ($cookieValues === null) {
          $cookieValues = [];
          $.cookies.set(options.cookieName, $cookieValues);
        }
        for (var i = 0; i < $cookieValues.length; i++) {
           if ($cookieValues[i] === options.itemID) {
               $alreadyRated = true;
               break;
           }
        }
      }
      
      // Updates FAQ cookie appending FAQ ID to the queue of 25 elements, Older elements get deleted if queue overflows
      function updateCookie() {   
          if (options.itemID !== 'NA' && options.itemID !== "") {
            // refresh cookieValues variable from actial cookie because multiple widgets can be on same page
            initCookie();
            
            // remove first element if table overflows
            if ($cookieValues.length === $maxCookieValues) {
                $cookieValues.shift();  
            }
            // append new element to table
            $cookieValues.push(options.itemID);
            
            // generate new cookie data and update browser cookie
            $.cookies.set(options.cookieName, $cookieValues, {
              expires: 30
            });
         }
      }
      
      //
      function initializeStars() {
        // check from cookie is the item rated already
        if ($alreadyRated) {
          $componentRoot.find('.stars-rating').remove();
          $componentRoot.find(".title:first").remove();
          $componentRoot.find(".title:last").removeClass("hidden");
        } else {
          // inject stars and init hit area
          for (var $i = 1; $i <= $starsAmount; $i++) {
            $componentRoot.find('.stars-rating').append("<div id='"+$i+"-star-"+options.itemID+"' class='star'></div>");
          }
          $componentRoot.find('.star').css("height", $starsHitArea);
          $componentRoot.find('.star').css("width", $starsHitArea);
        }
      }
      
      // make yes-no buttons same size
      function equalizeButtons() {
        //console.log("widths: "+$yesButton.width()+", "+$noButton.width());
        var maxWidth = Math.ceil(Math.max($yesButton.width(), $noButton.width()));
        $yesButton.width(maxWidth);
        $noButton.width(maxWidth);
      };
      
      // bind events
      function bindEvents() {
        // buttons
        $componentRoot.find('.button-yes').click(function(event) {
          //console.log("yes clicked");
          sendFeedback({
                        type: "button",
                        text: "yes"
                        });
          hideRatingArea("yes");
        });
        
        $componentRoot.find('.button-no').click(function(event) {
          //console.log("no clicked");
          sendFeedback({
                        type: "button",
                        text: "no"
                        });
          hideRatingArea("no");
        });
        
        // stars
        $componentRoot.find(".star").bind({
          
          mouseup: function(event) {
            // unbind events after click
            $(this).parent().children().unbind('mouseenter').unbind('mouseleave').unbind('click');
            $(this).parent().css('cursor', 'default');
            
            switchToGreyedOut($(this));  
            var starValue = $(this).attr("id").charAt(0);

            sendFeedback({
                          type: "star",
                          text: starValue
                          });
            
            updateCookie();
            
            // send tracking data
            if (window.isTrackingAvailable && options.callback && options.callback !== 'NA') {
              options.callback(options.itemID, starValue);
            }              
                          
            showFeedbackResult("starsSent");
          },
          mouseenter: function(event) {
            var starNumber = parseInt($(this).attr("id").charAt(0));
            var starDisplacement = 0;
            if ($isRTL) {
              starDisplacement = -starNumber*$starsHitArea;
            } else {
              starDisplacement = starNumber*$starsHitArea - 100;
            }
             
            
            if ($.browser && $.browser.msie && false) {
              // might need something IE8 specific here
            } else {
                $(this).parent().css("background-position", starDisplacement + "px -"+$starsYOffset+"px");
            }  
          },
          mouseleave: function(event) {
              if ($isRTL) {
                $(this).parent().css("background-position", "0 -"+$starsHitArea+"px");
              } else {
                $(this).parent().css("background-position", -$starsAmount*$starsHitArea + "px -"+$starsYOffset+"px");
              }
          }    
        });
      };
      
      //
      function switchToGreyedOut($star) {
        var bgpos = $star.parent().css('background-position'); 
        var xpos = 0;
        // we need an IE8 hack to get bg-position
        if (!bgpos) {
          xpos = $star.parent().css('background-position-x');
          $star.parent().css("background-position-x", xpos); 
          $star.parent().css("background-position-y", "-2px");
        } else {
          xpos = bgpos.split(" ")[0];
          $star.parent().css("background-position", xpos+" -2px");
        }
      };
      
      //
      function hideRatingArea($selection) {
        $hideableArea.fadeOut('fast', function() {
            showFeedbackResult($selection);
        });
      };
      
      //
      function showRatingArea() {
        $hideableArea.fadeIn('fast');
      }
      
      //
      function showFeedbackResult($selection) {
        //console.log("show result");
        $componentRoot.find(".buttons").remove();
        $componentRoot.find(".input-wrapper").remove();
        if ($selection == "yes") {
          $componentRoot.find(".title").text(I18n.get('feedback_block', 'thank_you'));
        } else if ($selection == "no") {
          $componentRoot.find(".title").text(I18n.get('feedback_block', 'thank_you'));
          if ($(window).width() > $breakpoint) {
            $componentRoot.find(".title").text($componentRoot.find(".title").text() + " " + I18n.get('feedback_block', 'why_no'));
          }
        } else if ($selection == "textSent") {
          $componentRoot.find(".title").text(I18n.get('feedback_block', 'thank_you'));
          $componentRoot.children(":first-child").fadeIn('fast');
          return;
        } else if ($selection == "starsSent") {
          $componentRoot.find(".title:last").removeClass("hidden");
          //generateThankYouBlock();
        }
        
        // check if button version or stars version 
        if (options.useStars) {
          
        } else {
          $componentRoot.find(".title").parent().append($inputWrapper);       
          $componentRoot.find(".input-wrapper").append($inputField).focus();
          $componentRoot.find(".input-wrapper").append($sendButton);
          
          // bind event to input field send button
          $componentRoot.find(".text-field").keypress(function(event) {
            //console.log("keypress");
            if (event.which == 13) {
              sendFeedback({
                          type: "field",
                          text: $componentRoot.find(".text-field").val()
                          });
              hideRatingArea("textSent");         
            }
          });
          $componentRoot.find(".button-send").click(function() {
              //console.log("mouseclick");
              sendFeedback({
                          type: "field",
                          text: $componentRoot.find(".text-field").val()
                          });
              hideRatingArea("textSent");              
          });
                  
          // use a hack to get the correct widths
          setTimeout(function(){
            // calculate new width for input wrapper field to fill whole space
            var fieldPaddingUsed = $componentRoot.find(".title").outerWidth() - $componentRoot.find(".title").width();
            var wrapperWidth = Math.max($componentRoot.outerWidth() - $componentRoot.find(".title").outerWidth() - fieldPaddingUsed, $minInputWidth);
            $componentRoot.find(".input-wrapper").width(wrapperWidth);
            
            // calculate width for input based on send button (magic multiply factor because input field has some padding of its own)
            var inputWidth = wrapperWidth - $componentRoot.find(".input-wrapper .buttons").width() - 1.5*fieldPaddingUsed;
            $componentRoot.find(".text-field").width(inputWidth);
            $componentRoot.find("input").focus();
          },0);
        }
        
        //showRatingArea();
      };
      
      // ajaxpost yes/no and input field data
      function sendFeedback($data) {
        //console.log("sendFeedback: "+$data.text);
        if (options.url !== "NA") {
          var cappedData = $data.text.substring(0, $inputMaxChars);
          $.post(options.url, cappedData, function(result) {
            //console.log("data sent OK");
          }, "html");
        }
      };
      
	})
})(jQuery);
(function($) {

	$.fn.formValidation = function(options) {
		
		var $wrap = $(this);
		
		// check that all labels that have the class 'required' are filled
		var requiredItems = $wrap.find('.required-item');
    var inputFile = $wrap.find('.file');
		//console.log("requiredItems = "+requiredItems.size());
		return this.each(function() {
			validateForm = function() {
				//console.log("validateForm called");
				var allOK = true;
				
				requiredItems.each(function() {
					if (!$(this).is(':visible')) {
						return true;
					}

					// check field type
					var type = "";
					var showError = false;
					var errorNumber = 1;  // same field can have multiple error messages
					var imei_regex = new RegExp(/^((\w{11})|(\w{15})|\w{16}|\w{18})$/g);

					if ($(this).find("input").length) {
						type = "input";
					} else if ($(this).find("textarea").length){
						type = "textarea";
					}

					if ($(this).hasClass('email')) {
					  // check emtpy field and placeholder first
					  var fieldEmpty = ($(this).find("input#email").val() === "");
					  var placeholderSame = ($(this).find("input#email").attr("placeholder") === $(this).find("input#email").val());
					  if (fieldEmpty || placeholderSame) {
					    errorNumber = 2;
					    showError = true;
					  } else {
  						var filter = /^(("[\w-+\s]+")|([\w-+]+(?:\.[\w-+]+)*)|("[\w-+\s]+")([\w-+]+(?:\.[\w-+]+)*))(@((?:[\w-+]+\.)*\w[\w-+]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/;
  						var val = $(this).find(type).val();
  						showError = !val || !filter.test(val);
  					}
					} else if ($(this).hasClass('email2')) {
						var ours = $(this).find(type).val();
						var other = $wrap.find('.required-item.email input').val();
						showError = !ours || ours != other;
					} else if($(this).hasClass('imei_code')){ 
					  // lets do regexp match and 
						var imeiValue = $(this).find('#' + $(this).attr('for')).val();
            var regexpOK = imeiValue.match(imei_regex);
            var luhnOK = checkLuhn(imeiValue);
            showError = !(regexpOK && luhnOK);
					} else if($(this).hasClass('select')){ 
						showError = !$(this).find('select').val();
					} else if($(this).find(type).attr('type') === "checkbox") {
						showError = !$(this).find(type).is(':checked');
					} 
					else{
						// check that field is non-empty
						showError = !$(this).find(type).val();
					}

					if (showError) {
					  if (errorNumber === 1) {
						  $(this).find(".required-note").show();
						  $(this).find(".required-note-2").hide();
						} else if (errorNumber === 2) {
						  $(this).find(".required-note-2").show();
						  $(this).find(".required-note").hide();
						}
						allOK = false;
					} else {
						$(this).find(".required-note").hide();
						$(this).find(".required-note-2").hide();
					}
				});
				
      if(typeof I18n.input_file !== 'undefined' && typeof I18n.input_file.valid_file_extension !== 'undefined' && I18n.input_file.valid_file_extension.length > 0) {
        inputFile.each(function(){
          // <input type="file"> should not be put into the <label>, because clicking <label> will launch the browser file window, which is not nice.
          // So when it has class "file", validate the next element of <label>
          var showError = true;
          var $input = $(this).next().children('input');
          if($input.length > 0 && $input.attr('type') === "file")
          {
            var filename = $input.val();
            if (filename =='' && !$(this).hasClass('required-item')) {
              $(this).find('.required-note').hide();
              return;
            }
            if(filename) {
              var ext = filename.match(/\.([^\.]+)$/);
              if ($.isArray(ext) && typeof ext[1] !== 'undefined') {
                ext = ext[1];
                if (BrowserDetect.version === 8) {
                  var arrayOfFileExtensions = $.trim(I18n.input_file.valid_file_extension);
                  var arrayTemp = [];
                  var arrayElem = "";
                  for (var i = 0, j = 0; i < arrayOfFileExtensions.length; i++) {
                    if (arrayOfFileExtensions[i] === ",") {
                      arrayTemp[j] = arrayElem;
                      arrayElem = "";
                      j++;
                    } else {
                      arrayElem += arrayOfFileExtensions[i];
                    }
                  }
                  arrayOfFileExtensions = arrayTemp;
                } else {
                  var arrayOfFileExtensions = I18n.input_file.valid_file_extension.trim().split(',');
                }
                if($.inArray(ext.toLowerCase(), arrayOfFileExtensions) >= 0) {
                  showError = false;
                  if (BrowserDetect.version == 8 || BrowserDetect.version == 9) {
                    var uploadedFileSize = 0;
                  } else {
                    var uploadedFileSize = $input[0].files[0].size;
                  }
                  if(typeof I18n.input_file.max_size !== 'undefined' && parseInt(I18n.input_file.max_size) * 1048576 < uploadedFileSize) {
                    showError = true;
                  }
                }
              }
            }
          }

          if(showError) {
            $(this).find('.required-note').show();
          }
          else {
            $(this).find('.required-note').hide();
          }

  			});
  		}
						
					
				return allOK;
			}

			$wrap.find(".form-tooltip").bind('click', function(event) {
				//console.log("tooltip click");
				var tooltipText = $(this).next();
				if (tooltipText.is(':visible')) {
					$(this).next().slideUp("fast");
					//$(this).next().css("cssText", "display: none !important");
				} else {
					$(this).next().slideDown("fast");
					//$(this).next().css("cssText", "display: block !important");
				}
				event.preventDefault();
			});
		});
		
		// Luhn check validator for IMEI field
		function checkLuhn(input) {
      var sum = 0;
      var numdigits = input.length;
      var parity = numdigits % 2;
      for(var i=0; i < numdigits; i++) {
        var digit = parseInt(input.charAt(i))
        if(i % 2 == parity) digit *= 2;
        if(digit > 9) digit -= 9;
        sum += digit;
      }
      return (sum % 10) == 0;
    }
		
	}

})(jQuery);
(function($) {

  $.plugin('onImageReady', function() {

    var $window = $(window), options;

    this.options = {};

    this.init = function($el) {
      
      if (element.complete) {
          // Already loaded, fire the handler (asynchronously)
        setTimeout(function() {
          fireHandler.call(element);
        }, 0); // Won't really be 0, but close
      }
      else {
        // Hook up the handler
        $(element).bind('load', fireHandler);
      }
    };

    this.destroy = function($el) {
    };


    function fireHandler(event) {
      // Unbind us if we were bound
      $(this).unbind('load', fireHandler);

      // Call the handler
      handler.call(this);
    }
 });
})(jQuery);

/*



function onImageReady(selector, handler) {
  var list;

  // If given a string, use it as a selector; else use what we're given
  list = typeof selector === 'string' ? $(selector) : selector;

  // Hook up each image individually
  list.each(function(index, element) {
      if (element.complete) {
          // Already loaded, fire the handler (asynchronously)
          setTimeout(function() {
              fireHandler.call(element);
          }, 0); // Won't really be 0, but close
      }
      else {
          // Hook up the handler
          $(element).bind('load', fireHandler);
      }
  });

  function fireHandler(event) {
      // Unbind us if we were bound
      $(this).unbind('load', fireHandler);

      // Call the handler
      handler.call(this);
  }
}*/
;
(function($) {

  $.plugin('imeiStatusCheck', function() {

    var options = {
      }, 
      $status_dependent_elements, 
      $form_section, 
      $form, 
      $actions_section, 
      $loading_section, 
      loading_delay, 
      search_params = {}, 
      url;
 
    var onFormSubmit = function(e) {
      e.preventDefault();
      // validate imei before send?
      $form.find('.field-error').hide() ;


      if(validateForm()) {
        search_params = getLastSearchParams();

        $form.find('input[type="submit"]').attr('disabled', 'disabled');
  
        $.ajax({
          url: url,
          data: search_params, 
          success: handleStatusResponse, 
          error: notifyUserAboutAjaxFailure, 
          beforeSend: queryStarted, 
          complete: queryComplete
        });
      } else {
        $form.find('.invalid-imei').css('display', 'block');
        checkResultStatus("invalid", options.relative_articles_prefix);
      }

      location.hash = '#main';
    };

    var queryStarted = function(){
      // add small delay if request hangs
      loading_delay = setTimeout(function(){$loading_section.slideDown(500);}, 700);
      $actions_section.hide();
    };

    var queryComplete = function(){
      clearTimeout(loading_delay);
      $loading_section.hide();
      $actions_section.show();
    };
 
    var getLastSearchParams = function() {
      var ret = {};
      ret['deviceId'] = $form.find('input#imei_code').val();
      ret['captcha'] = $form.find('input#captcha').val();
      return ret;
    };

    var handleStatusResponse = function(result) {
      if (result.errorMessage) {
        $form.find('.invalid-imei').show();
        checkResultStatus("invalid", options.relative_articles_prefix);
        reset();
        return;
      }
      handleStatusChange(result);
      $form_section.hide();
    };
    
    function track_submit(checker, status) {
    	if (window.isTrackingAvailable) {
    		utag.view({ pName: nkT.pName + checker + status });
    	}
    }
    
    function checkResultStatus(status, checkerType) {

    	if (checkerType == 'imei_warranty_check') {
    		track_submit(":warranty checker:", status);
     	} else {
     		track_submit(":repair checker:", status);
     	}
    	
    }

      var handleStatusChange = function(statusData) {
      var status = statusData.warrantyStatus || statusData.repairCaseStatus;      
      
      var articles_visible = $status_dependent_elements.filter('.'+ options.relative_articles_prefix +'_'+ status).show();
      articles_visible.find(options.imei_placeholder).html(search_params.deviceId);
   
      $status_dependent_elements.filter('.'+ options.relative_articles_prefix +'_default').hide();
      if (statusData.token) {
        var href = $('a.token');
        href.attr('href', href.attr('href') + "&token=" + statusData.token +"&productCode=" + statusData.productCode);
      }
      
      if( $('.repair_case_button').hasClass('exceptionsEnabled') ) {      	  
	      if( statusData.pp1 == "Y" || statusData.pp2 == "N" || statusData.pp3 == "N" || statusData.pp4 == "Y") {	
	    	  $('.repair_case_button').hide();
	      }    
      }      
      checkResultStatus(status === "Y" ? "valid" : "not supported", options.relative_articles_prefix);
      
    };
    

    var notifyUserAboutAjaxFailure = function() {
      // TODO trigger some user notification (by custom event ?)
      // http://www.sitepoint.com/jquery-custom-events/
      $form.find('.communication-error').show();
      checkResultStatus("error", options.relative_articles_prefix);
      reset();
    };

    var reset = function() {
      // reset component
      $form.find('input[type="submit"]').removeAttr('disabled');
    };

    var initComponent = function(el) {
      $form_section = $(el);

      $actions_section = $form_section.find('.actions');
      $loading_section = $form_section.find('.status-loading');
      // merge options
      options = this.options;
      // collect sections
      $status_dependent_elements = $('body').find('[class*="'+ options.relative_articles_prefix +'_"]');
      // hide elements it those haven been hidden by default
      $status_dependent_elements.filter('.'+ options.relative_articles_prefix +'_default').show();
      // find form for later use
      $form = $form_section.find('form');
      url = $form.attr('action');

      // bind form submit
      $form.on('submit', onFormSubmit);
      $form.show()
      //FIXME/TODO/HACK - remove this if it is not needed, why did the form not reset when I reloaded the page?
      reset();
    };
   
    var destroyComponent = function() {
      
    };

    return {
      init: initComponent, 
      destroy: destroyComponent
    };
  });
})(jQuery);
(function($) {

  /**
   * Pseudo-class 'layoutEnhancer'
   *
   * Rearranges the tiles on the page upon page load or resize. The basic idea is to remove the unnecessary empty
   * slots inside the tiles area by modifying the tiles layout.
   *
   * @author - tuomas.karhu@fusion.fi
   */
  $.plugin('layoutEnhancer', function() {

    /////////////////////////////////
    // internal plugin attributes
    /////////////////////////////////

    // known tile types
    var TILE_TYPE_IMAGE = 'image_tile';
    var TILE_TYPE_TEXT  = 'text_tile';

    // known tile importance levels
    var TILE_IMPORTANCE_MEDIUM  = 'importance_medium';
    var TILE_IMPORTANCE_HIGH    = 'importance_high';

    var $container;   // (jQuery obj) the wrapper div for all the tiles
    var tileDefs;     // (Array of type TileDef) tile definitions aka TileDef objects; see prepareTileDefs() below

    var maxRows = 100;   // (int) max # of rows in the view; TODO: don't hard code this!
    var maxCells = -1;  // (int) max # of cells in the view; recalculated on every resize event
    var rows = [];      // (a two dimensional Array of type int) -1 if no tile is in the cell, tile index if occupied

    // transition related
    var isAnimating  = false; // is the transition animation currently running
    var FADE_DURATION = 150;  // duration (milliseconds) for the fade in / out
    var FADE_DELAY    = 20;   // delay (milliseconds) between fades of each tile

    /////////////////////////////////
    // internal plugin logic
    /////////////////////////////////

    /**
     * Invoked in the beginning of the plugin lifecycle. Prepares the data structures needed while
     * reorganizing the tiles later.
     *
     * @param $tiles - The jQuery object containing all tile definitions
     */
    function prepareTileDefs($tiles, resizeOnReady) {
      //console.log("prepareTileDefs: len = ", $tiles.length);

      tileDefs = [];
      
      var abort = false;

      $tiles.each(function(i, tile) {
        if (abort) return;
        
        // define the tile type (in this version only image or text)
        // this is null for tiles with textual content
        var innerContent = $(tile).find('img.floating');
        var tileType = innerContent.length > 0 ? TILE_TYPE_IMAGE : TILE_TYPE_TEXT;
        var importance;

        if ($(tile).is('.high-importance'))
          importance = TILE_IMPORTANCE_HIGH;
        else
          importance = TILE_IMPORTANCE_MEDIUM;

        var w = -1.0;
        var h = -1.0;

        // image tile --> calculate based on aspect ratio
        if (tileType == TILE_TYPE_IMAGE) {
          // check whether the tile is vertical or horizontal

          // find the aspect ratio that is closest to the proportions of this image
          w = $(tile).width();
          h = $(tile).height();
          
          // handle lazy images by redoing the layout when the dimensions are known
          if (w <= 1 && h <= 1) {
            abort = true;
            innerContent.load(function(event) {
              // remove the event after it has fired for the first time
              // otherwise image sizes in different breakpoints will trigger this too
              $(this).unbind(event);
              prepareTileDefs($tiles, true);
            });
            return;
          }

          var cellsHorizontal, cellsVertical;
          var closestAr = 1000;
          var closestArInd = 0;
          var ar = w / h;

          // the differences in relation to the acceptable aspect ratios
          var arComp = [
            Math.abs(ar - (1 / 1)),
            Math.abs(ar - (2 / 1)),
            Math.abs(ar - (4 / 1)),
            Math.abs(ar - (1 / 2)),
            Math.abs(ar - (1 / 3)),
            Math.abs(ar - (2 / 3))
          ];

          for (var a=0; a<arComp.length; a++) {
            if (arComp[a] < closestAr) {
              closestAr = arComp[a];
              closestArInd = a;
            }
          }

          switch (closestArInd) {
            case 0:
              cellsHorizontal = 1;
              cellsVertical   = 1;
              break;
            case 1:
              cellsHorizontal = 2;
              cellsVertical   = 1;
              break;
            case 2:
              cellsHorizontal = 4;
              cellsVertical   = 1;
              break;
            case 3:
              cellsHorizontal = 1;
              cellsVertical   = 2;
              break;
            case 4:
              cellsHorizontal = 1;
              cellsVertical   = 3;
              break;
            case 5:
              cellsHorizontal = 2;
              cellsVertical   = 3;
              break;
          }
        }

        // text tile --> 1x1
        else {
          cellsVertical   = 1;
          cellsHorizontal = 1;
        }

        //console.log("tile", i, "[", tileType, "] .w=", $(tile).width(), "/.h=", $(tile).height(),
        //            "--> aspect r = ", (w/h), "--> sv=", cellsVertical, ", sh=", cellsHorizontal);

        // this untyped object is later on being referenced as 'TileDef object', even though it's not
        // defined as an instance of such class
        // TODO: define the class
        tileDefs.push({
          ind             : i,
          tileType        : tileType,
          importance      : importance,
          content         : $(tile),
          innerContent    : innerContent,
          cellsHorizontal : cellsHorizontal,
          cellsVertical   : cellsVertical,
          originalCellsHorizontal:  cellsHorizontal,
          originalCellsVertical:    cellsVertical,
          row             : -1,
          column          : -1,
          originalWidth   : w,
          originalHeight  : h
        });
      });
      
      if (resizeOnReady) {
        onResize();
      }
    }

    /**
     * Invoked on page load and on viewport resize. Hides the tiles, and later proceeds
     * to the reordering itself.
     */
    function onResize() {
      //hideTiles();
      reorderTiles();
    }

    /**
     * Invoked once the tiles have been hidden (hiding transition is complete).
     */
    function reorderTiles() {

      // bounds: how many cells can fit on one row
      var totalWidth = $container.parent().width();

      // define gutter
      var gutter = totalWidth < 640 ? 14 : 16;

      // define the max amount of cells on a row
      if (totalWidth < 240)
        maxCells = 1;
      else if (totalWidth < 320)
        maxCells = 1;
      else if (totalWidth < 480)
        maxCells = 2;
      else if (totalWidth < 640)
        maxCells = 2;
      else if (totalWidth < 768)
        maxCells = 4;
      else if (totalWidth < 1024)
        maxCells = 4;
      else if (totalWidth < 1278)
        maxCells = 8;
      else
        maxCells = 8;

      var unitWidth   = (totalWidth + gutter) / maxCells;
      var unitHeight  = unitWidth; // only square tiles at the moment

      //console.log('totalw=', totalWidth, '--> gutter=', gutter, 'cells=', maxCells, ', unitwidth=', unitWidth);

      // the y coordinate of the lowest point in any of the tiles
      var maxHeight = 0;

      // iterators: t = tile, r=row, c=column
      var t, r, c;

      // reset calculations i.e. create empty rows
      rows = new Array(maxRows);
      for (r = 0; r < maxRows; r++) {
        rows[r] = new Array(maxCells);
        for (c = 0; c < maxCells; c++) {
          rows[r][c] = -1;
        }
      }

      // iterate through all tiles and recalculate their positions and dimensions
      var tileX;
      var tileY;
      var tileWidth;
      var tileHeight;
      var innerWidth;
      var innerHeight;
      var found;

      for (t = 0; t < tileDefs.length; t++) {
        // reset cell span
        tileDefs[t].cellsHorizontal = tileDefs[t].originalCellsHorizontal;
        tileDefs[t].cellsVertical   = tileDefs[t].originalCellsVertical;

        // 1) the normal case: find a slot for each tile, on one row or another
        if (maxCells > 1) {

          // high importance --> more space if possible
          if (tileDefs[t].importance == TILE_IMPORTANCE_HIGH &&
              tileDefs[t].cellsHorizontal * 2 <= maxCells) {

            tileDefs[t].cellsVertical   *= 2;
            tileDefs[t].cellsHorizontal *= 2;
          }

          found = false;

          // try each row, left to right
          for (r = 0; r < rows.length; r++) {
            if (addToRow(r, tileDefs[t]))
            {
              //enought empty space found --> no need to check more rows
              //console.log('tile ', t,' added to row ', r);
              found = true;
              break;
            }
          }

          //console.log('reorder', t, ' done: rows = ');
          //printRows();

          // there's space on the current row
          if (found) {
            tileY = tileDefs[t].row * (unitHeight);
            tileX = tileDefs[t].column * (unitWidth);
          } else {
            // no space on any row --> too few rows defined
            //console.log('ERROR: couldnt fit image ', t,' on any row');

            // TODO: how to hide the tile properly?
            tileY = -10000;
            tileX = -10000;
          }

          tileWidth  = tileDefs[t].cellsHorizontal * unitHeight - gutter;
          tileHeight = tileDefs[t].cellsVertical * unitWidth - gutter;
        }

        // 2) a special case: just one cell available, so stretch all tiles to max width and stack
        // them vertically on top of each other
        else {
          tileY       = maxHeight;
          tileX       = 0;
          tileWidth   = unitWidth - gutter;
          tileHeight  = tileDefs[t].originalHeight * tileWidth / tileDefs[t].originalWidth;
          if (tileDefs[t].tileType == TILE_TYPE_IMAGE)
            tileHeight += gutter;
        }

        // update the tile position and scale on the DOM level
        if ($('body').hasClass('rtl')) {
			tileDefs[t].content.css({
	          'top'    : tileY + 'px',
	          'right'   : tileX + 'px',
	          'width'  : tileWidth,
	          'height' : tileHeight
        	});
        } else {
        	tileDefs[t].content.css({
	          'top'    : tileY + 'px',
	          'left'   : tileX + 'px',
	          'width'  : tileWidth,
	          'height' : tileHeight
        	});
        }


        // handle the inner content
        switch (tileDefs[t].tileType) {

          // images are scaled and cropped a bit in order to fill the whole tile area...
          case TILE_TYPE_IMAGE:
            if (maxCells > 1) {
              if (tileWidth < tileHeight) {
                innerWidth  = (unitWidth) * tileDefs[t].cellsHorizontal - gutter;
                innerHeight = tileDefs[t].originalHeight * (innerWidth / tileDefs[t].originalWidth);
              }
              else {
                innerHeight = (unitHeight) * tileDefs[t].cellsVertical - gutter;
                innerWidth  = tileDefs[t].originalWidth * (innerHeight / tileDefs[t].originalHeight) + gutter;
              }
            } else {
              innerWidth  = tileWidth;
              innerHeight = tileHeight - gutter;
            }

            //console.log('crop h = ', (innerWidth - tileWidth), 'crop v = ', (innerHeight - tileHeight));

            tileDefs[t].innerContent.css({
              'width':  innerWidth,
              'height': innerHeight
            });
            break;

          // ... whereas textual tiles remain as they are
          case TILE_TYPE_TEXT:
            // no op
            break;
        }

        //console.log('tile', t, ' (', tileDefs[t].column, ',', tileDefs[t].row, ') -->', '(', tileX, ',', tileY, ')');
        //console.log('tile', t, ' w/h=', tileDefs[t].content.width(), '/', tileDefs[t].content.height());

        // remember the lowermost point
        var tileBottom = tileY + tileDefs[t].content.height();
        if (tileDefs[t].tileType == TILE_TYPE_TEXT && maxCells == 1)
          tileBottom += gutter;

        if (tileBottom > maxHeight)
          maxHeight = tileBottom;
      }

      //console.log('all done, rows = ');
      //printRows();

      // show container (hidden in the beginning of the plugin lifecycle)
      $container.css({
        'visibility': 'visible'
      });

      // finally, resize the container block in order to make all tiles fit in it
      $container.width(totalWidth);
      $container.height(maxHeight);

      /* DEPRECATED: no animations
      // finally, resize the container block (with transition animation) in order to make all tiles fit in it
      // TODO: refine transition (at least duration based on distance)
      $container.animate({
        width  : totalWidth + 'px',
        height : maxHeight + 'px'
      }, FADE_DURATION, 'easeInOutSine');
      */
      // show tiles with transition
      //showTiles();
    }

    /**
     * Tries to add a tile to a particular row: checks if there's enough space on that row, and if the
     * tile is higher than one unit also the necessary space on the rows below. Basic idea: try to add
     * as high and as left as possible.
     *
     * @param rowIndex - (int) The index of the row (in Array 'rows') we're trying to add the tile
     * @param tile     - (TileDef object) The tile at hand
     * @return - true, if the tile was added, false if there was not enough space on the row
     */
    function addToRow(rowIndex, tile) {
      // loop through the cells of the row
      for (var c = 0; c < rows[rowIndex].length; c++) {
        var fits = true;

        // check if fits horizontally (on every cell necessary)
        for (var ch = 0; ch < tile.cellsHorizontal; ch++) {
          if (c + ch >= maxCells || rows[rowIndex][c + ch] >= 0) {
            //console.log('addToRow(', rowIndex, '): no space on cell ' + (c+ch), ' on row ' + (rowIndex));
            fits = false;
            break;
          }

          // check if fits vertically (on every row necessary)
          for (var cv = 0; cv < tile.cellsVertical; cv++) {
            if (rowIndex + cv >= maxRows || rows[rowIndex + cv][c + ch] >= 0) {
              //console.log('addToRow(', rowIndex, '): no space on cell ' + (c+ch), ' on row ' + (rowIndex+cv));
              fits = false;
              break;
            }
          }
        }

        // no conflict --> add to this row
        if (fits) {
          // update the 'rows' array
          for (var ch = 0; ch < tile.cellsHorizontal; ch++) {
            for (var cv = 0; cv < tile.cellsVertical; cv++) {
              rows[rowIndex + cv][c + ch] = tile.ind;
            }
          }

          // update the TileDef object itself
          tile.row    = rowIndex;
          tile.column = c;

          return true;
        }

        // didn't fit on this cell --> check the next cell horizontally
        else
        {
          continue;
        }
      }

      // no space on this row
      //console.log('addToRow(', rowIndex, '): no space on this row');
      return false;
    }

    /**
     * tmp helper util --> remove once done with development
    function printRows() {
      //console.log("\n\n***rows");
      var r, c, msg;
      for (r = 0; r < rows.length; r++) {
        msg = '';
        for (c = 0; c < rows[r].length; c++)
          msg += rows[r][c] + '\t';
        //console.log('row ', r, '* ', msg, ' *');
      }
      //console.log("***rows end\n\n");
    }
     */

    /////////////////////////////////
    // transitions
    /////////////////////////////////

    function hideTiles() {
      //console.log('hideTiles()');

      // add callback function only to the animation with most delay
      for (var t = 0; t < tileDefs.length; t++) {

        // if playing the show/hide animation at the moment, kill it
        if (isAnimating) {
          tileDefs[t].content.stop(true, false);
        }
        tileDefs[t].content.delay((tileDefs.length - t) * FADE_DELAY).fadeOut(FADE_DURATION,
          (t > 0) ? null : onHidden);
      }

      isAnimating = true;
    }

    function showTiles() {
      //console.log('showTiles()');

      // add callback function only to the animation with most delay
      for (t = 0; t < tileDefs.length; t++) {
        tileDefs[t].content.delay(t * FADE_DELAY + 200).fadeIn(FADE_DURATION, (t < tileDefs.length - 1) ? null : onShown);
      }
    }

    function onHidden() {
      //console.log('onHidden()');
      reorderTiles();
    }

    function onShown() {
      //console.log('onShown()');
      isAnimating = false;
    }

    /////////////////////////////////
    // public plugin interface
    /////////////////////////////////

    /**
     * The plugin initialization routine.
     */
    this.init = function($el) {
    	
      // check RTL
      if ($('body').hasClass('rtl')) {
      	$container = $el.find('.float-container').css({
        'position'   : 'relative',
        'visibility' : 'hidden',
        'padding'    : '0px',
        'margin'     : '0px',
        'right'      : '0px',
        'top'        : '0px'
      	});
      } else {
      	 $container = $el.find('.float-container').css({
        'position'   : 'relative',
        'visibility' : 'hidden',
        'padding'    : '0px',
        'margin'     : '0px',
        'left'       : '0px',
        'top'        : '0px'
      	});
      }	

      var $tiles = $container.find('.floating-tile').css({
        'position' : 'absolute',
        'margin'   : '0px',
        'padding'  : '0px'
      });

      // init reordering
      prepareTileDefs($tiles, false);
      
      // start listening to the resize events and reorder once at the beginning
      // TODO: fix the namespace problem
      //$(window).on('resize', reorderTiles);
      $(window).resize($.debounce(onResize, 10)).resize();
    };

    /**
     * The plugin 'destructor'.
     */
    this.destroy = function($el) {
      // TODO: implement the destructor properly
      // TODO: fix the namespace problem
      //$el.off('click.' + this.namespace);
    };

  });

})(jQuery);
/**
 * Live tile animation plugin
 *
 * expected data on target elem:
 *    data-rootclass      Live tile element class, e.g. 'social-media twitter'
 *    data-datafeed       URL to a JSON object, see code for supported data structures
 *    data-rotationdelay  Delay between each tile rotation in seconds, e.g. 5
 */


(function ($) {

  $.plugin('livetile', function () {
    
    var _this = this,
        slideshowInterval,
        $liveLink;
    this.data_options = {};

    this.init = function (el) {

      this.data_options = $(el).data(),
      _this.animate = (navigator.userAgent.indexOf('Android') == -1 && navigator.userAgent.indexOf('Silk') == -1 && BrowserDetect.browser != "Symbian" && (BrowserDetect.browser != "IEMobile" && BrowserDetect.version != 10)),
      _this.flip = {
        front: 'flip-front',
        back: 'flip-back'
      };

      if (typeof (this.data_options.datafeed) === "undefined" || typeof (this.data_options.rotationdelay) === "undefined" || typeof (this.data_options.rootclass) === "undefined") {
        return false;
      }

      // set live tile root element
      this.data_options.$root = $("." + this.data_options.rootclass.replace(' ', '.'));

      // fetch data from source and start animation
      if (this.data_options.$root.size() !== 0) {
        $.getJSON(this.data_options.datafeed, this.handleDataResponse);
      }

      // start and stop animations when video overlay is opened
      $(document).on('videoStarted', this.stopLivetile);
      $(document).on('videoStopped', this.startLivetile);

    };

    // twitter data handler, parses data into <li> elements
    this.handleTwitterFeed = function (data) {
      if ($(data).length > 1) {
        var $list = _this.data_options.$root.find('.caption ul.live');
        $(data).each(function () {
          $list.append('<li><span data=\'http://twitter.com/nokia/status/' + this.id_str + '\'>' + this.text + '</span></li>');
        });

        // init follow button
        !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
      }
    };

    // facebook data handler, parses data into <li> elements
    this.handleFacebookFeed = function (data) {
      if ($(data.data).length > 1) {
        var $list = _this.data_options.$root.find('.caption ul.live');
        $(data.data).each(function () {
          if (typeof (this.message) !== "undefined") {
            $list.append('<li style="display:none"><span data=\'' + this.link + '\'>' + this.message + '</span></li>');
          }
        });
      }
    };

    this.handleDataResponse = function (data) {

      _this.handleTwitterFeed(data);
      _this.handleFacebookFeed(data);

      if ($(data).length > 1 || $(data.data).length > 1) {
        // hide static list if we get any data in
        _this.data_options.$root.find('ul.default').hide();

        if (_this.animate) {
          $(window.translateZelements).each(function(index){ 
            $(this).addClass('zero-translate-z');
          });
        }

        // random delay before starting the animation
        setTimeout(_this.startLivetile, Math.floor((Math.random() * 2500) + 1));
      }
    };

    // animation function that will flip given tile
    function _flip($targetTile, iterator) {
      var _undo = (iterator % 2 === 0) ? _this.flip.front : _this.flip.back;
      var _flip = (iterator % 2 === 1) ? _this.flip.front : _this.flip.back;
      var $tileLink = $targetTile.find('.tile-content-wrapper');

      // animation disabled on Android because its causing blurry fonts
      if (_this.animate) {
        $targetTile.removeClass(_undo).addClass(_flip);
        $tileLink.removeClass(_undo).addClass(_flip);
        
        // chrome losing mouse focus on tile after flip animation
        //$targetTile.find('#livetile-link').trigger('mouseleave').trigger('mouseenter');
      }
    }

    // stops livetile by reseting slideshow interval
    this.stopLivetile = function () {
      clearInterval(slideshowInterval);
      slideshowInterval = undefined;
    };

   //
    this.copySOMELink = function ($tile) {
      $theLink = $tile.find("span").attr("data");
      $liveLink.attr("href", $theLink); 
    }

    // starts livetile animation
    this.startLivetile = function () {

      var iterator = 0,                                                   // iterator is used to decide which way the tile should flip
        $targetTile = _this.data_options.$root,                           // $targetTile is the context in which we operate
        $list = $targetTile.find('.caption ul.live li').not('.follow'),   // $list keeps the list of tiles to flip through
        $next = $list.first().next(),                                     // $next identifies item that should be shown on following flip
        $follow = $targetTile.find('li.follow'),                          // $follow is the sharing tile (follow/like)
        $prev;

      $follow.hide();
      $liveLink = $targetTile.find('#livetile-link')
      _this.copySOMELink($list.first());
      $list.first().show();
      

      slideshowInterval = setInterval(function () {
        // any "fallback" can be run at this point, e.g. fadeIn/fadeOut        
        $prev = ($next.prev().not('.follow').size() === 0) ? $list.last() : $next.prev().not('.follow');

        // hide previous item and show the next one
        $prev.fadeOut(150, function () {
          $next.fadeIn(150);
          $next = ($next.next().size() === 0) ? $list.not('.follow').first() : $next.next();
          
        });
        _this.copySOMELink($next);
        
        _flip($targetTile, iterator);
        iterator += 1;

      }, _this.data_options.rotationdelay * 1000);         // delay between each rotation



      // this click will flip the tile and show followus tile instead of next in line (CLICK FACEBOOK ICON THINGY)
      if ($follow.length > 0) {
        _this.data_options.$root.find('.tile-content-wrapper > a').unbind().on('click', function (e) {
          e.preventDefault();
          _this.stopLivetile();
          
          // init FB Like button, this needs to happen here, when the element is visible already (FB SDK limitation)
          if ($targetTile.is('.facebook')) {
            (function(d, s, id) {
              var js, fjs = d.getElementsByTagName(s)[0];
              if (d.getElementById(id)) return;
              js = d.createElement(s); js.id = id;
              js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=350309071724299";
              fjs.parentNode.insertBefore(js, fjs);
              }(document, 'script', 'facebook-jssdk'));
          }

          $prev = (typeof $prev === "undefined") ? $next : $prev;
          $next = $follow.show();

          $prev.fadeOut(150, function () {
            $next.fadeIn(150);
            $next = ($next.next().size() === 0) ? $list.first() : $next.next();
            $targetTile.find('.tile-content-wrapper > a').css('visibility', 'hidden');
          });

          // disable master SOME link
          $liveLink.attr("style", "cursor:default;outline:none"); 
          $liveLink.attr("onclick", "event.preventDefault();"); 
          if (BrowserDetect.version === 8) {
            $targetTile.find(".follow").css("height","165px");
            $liveLink.attr("href", "javascript: void(0)");
            $liveLink.attr("target", "");
          }
          _flip($targetTile, iterator);

          // start rolling again after timeout
          setTimeout(function(){
            $targetTile.find('.tile-content-wrapper > a').css('visibility', 'visible');
            
            // return SOME link behaviour to normal
            $liveLink.attr("style", ""); 
            $liveLink.attr("onclick", "");
            if (BrowserDetect.version === 8) {
              $liveLink.attr("target", "_blank");
            }
            
            _flip($targetTile, iterator+1);
            _this.startLivetile();
          }, 10*1000);

        });
      }
    };

  });
}(jQuery));
(function($) {
 
  $.plugin('movingImages', function() {
 
    var $window = $(window), $document = $(document), options, $element;

    this.options = {
      breakpoints:[], // resize with thiese breakpoints [0, 1024]
      debounceTime: 50
    };
 
    var setHeight = function() {
      if(options.breakpoints.length !==2 || ($(window).width() > options.breakpoints[0] && $(window).width() <= options.breakpoints[1])) {
        $element.css({ 'height': $element.outerWidth() }); 
      } else {
        $element.css({'height': ''});
      }
    };
 
    this.init = function($el) {
      $element = $el;
      options = this.options;
      var lazySetHeight = $.debounce(setHeight, options.debounceTime);
      $window.on('resize.' + this.namespace, lazySetHeight).resize();
    };
 
    this.destroy = function($el) {
      $window.off('resize.' + this.namespace);
    };
 
  });
 
})(jQuery);
(function($) {

  $.plugin('offersTableFilters', function() {  

    var $window = $(window), $form, ajaxUrl, loadTarget, columnHeaders, columnFooters;

    function updateFormHiddenParameters() {
      $form.find('input[type=hidden]').each(function() {
        var nam = $(this).attr('name') + '=',
        val = window.location.search,
        idx = val.indexOf(nam),
        end = val.indexOf('&', idx),
        end = end == -1 ? val.length : end,
        val = val.substring(idx + nam.length, end);
        if (idx > 0 && val) {
          $(this).attr('value', val);
        }
      });
    }

    function loadTarget(url) {
      if (window.history && history.replaceState) {
        history.replaceState(null, null, url);
      }
      updateFormHiddenParameters();
      $loadTarget.load(ajaxUrl + url.substring(1), function() {
        $offers.trigger('contentReload');
        if ($offers.offset().top < $(window).scrollTop())
          $('html, body').animate({ scrollTop: $offers.offset().top }, 400);
      });
    }

    function bindEvents() {
      $offers.on('click', columnHeaders, function(event) {
        loadTarget($(this).attr('href'));
        event.preventDefault();

        // highlight elements
        var position = $(this).closest('th').index() + 1;
        $('thead th, tbody td').removeClass('highlight');
        $('thead th:nth-child(' + position + '), tbody td:nth-child(' + position + ')').addClass('highlight');

      });
	    
      // Test for offers filters changes
      $form.on('change', function(event) {
        loadTarget('?'+$form.serialize());
      });
   
      // Test for offers table column hover, excluding the info column
      $offers.on('mouseenter mouseleave', columnHeaders, function(event) {
        var position = $(this).closest('th').index() + 1;
        $('thead th, tbody td').removeClass('hover');
        if (event.type == 'mouseenter') {
          $('thead th:nth-child(' + position + '), tbody td:nth-child(' + position + ')').addClass('hover');
        }
      });

      $offers.find('th.highlight').each(function() {
        var position = $(this).index() + 1;
        $('tbody td:nth-child(' + position + ')').addClass('highlight');
      });

      $offers.on('click', columnFooters + ","+paginationFooters, function(event) {
        loadTarget($(this).attr('href'));
        event.preventDefault();
      });
    };
    
    this.init = function($el) {
      $offers = $el;
      $form = $('.offers-filters form');
      ajaxUrl = $form.attr("ajax-url");
      $loadTarget = $('#' + $form.attr("data-target"));
      columnHeaders = 'thead th:not(.info) a';
      columnFooters = '.footer li a';
      paginationFooters = '.offers-list .pagination li a';
      bindEvents();
    };
    
    this.destroy = function($el) {
    };

  });

})(jQuery);
 $.plugin('openOnNewWindow', function() {

    var el, options;

    var init = function($el) {
      options = this.options;
      el = $($el);
      el.attr('target', '_new_tab')
      el.on('click.' + this.namespace, open);
    },
   
    open = function(e){
      window.open('http://maps.nokia.com/map=51.51615621,-0.083722984,17/title=Orange', '_new_tab');
      e.preventDefault();
      return false;
    },  

    destroy = function($el) {
      $el.off('click.' + this.namespace);
    };

    return {
      destroy: destroy, 
      init: init
    };
    
  });
(function($) {
 $.plugin('showOverlay', function() {

    var $window = $(window),
        options, 
        $trigger, 
        $section,
        $section_wrapper,  
        $overlayPart, 
        $templateContainer, 
        $overlayContent, 
        $aside_navigation, 
        original_scroll_position, 
        doFade, 
        isOpen = false;
 
    // Define options and their defaults
    this.options = {
      overlayContent: false, 
      trigger: false
    }
 
   this.init = function($el) {
      
      doFade = (BrowserDetect.browser === 'Explorer' && BrowserDetect.version < 9) ? false : true,
      options = this.options;
      $section = $el;         
      $section_wrapper = $($el.find('.wrapper').get(0));

      $trigger = $el.find(options.trigger);
      $overlayContent = $el.find(options.overlayContent);

      $aside_navigation = $('.aside-navigation');
      removeOldOverlay();
      

      $templateContainer = getTemplateContainer();
      $section_wrapper.append($templateContainer);
      

      $trigger.on('click', triggerShowOverlay);
    };

    function triggerShowOverlay(e) {
      e.preventDefault();
      showOverlay();
    }

    this.destroy = function($el) {
      // Unbinds
    };
 
    function showOverlay() {

      if(isOpen) {
        return;
      }

      $aside_navigation.hide();
      $overlayPart = getOverlayPart();
      $overlayPart.css({ 'opacity': '0' });
      $templateContainer.css({ 'opacity': '0', height: 'auto'});
      
      if(doFade) {
        $('#container > #main').prepend($overlayPart);
      }
      
      $section_wrapper.append($templateContainer);
      
      var anim = doFade ? $.fn.animate : $.fn.css; 
      anim.call($overlayPart, { 'opacity': '.85' });
      anim.call($templateContainer, { 'opacity': '1', height: 'auto' });

      original_scroll_position = Math.floor($('body').scrollTop());

      var width = $templateContainer.width();
      var height = width * 3 / 4;

      $('html,body').animate({'scrollTop': Math.floor($templateContainer.offset().top - Math.max(($(window).height() - height) / 2, 0)) });

      initContentComponenetsIfNeeded();
      isOpen = true;
      
    };

    function closeOverlay(event) {
      //$('html,body').animate({'scrollTop': original_scroll_position});
      $('body').scrollTop(original_scroll_position);
      $aside_navigation.show();
      $overlayPart.remove();      
      $templateContainer.remove();
      isOpen = false;
      event.preventDefault();
      event.stopPropagation();
    };

    function getOverlayPart(){
      var _overlay = $('<div class="responsive-video-overlay"><div></div><div>');
      _overlay.on('click', closeOverlay);
     
      $(document).on("keyup.key27", function(event) {
        $(document).off("keyup.key27");

          closeOverlay(event);      
      });


      return _overlay;
    };

    function getTemplateContainer() {
      var _wrapper =
        $('<div class="overlay-wrapper"> \
          <div class="responsive-gallery"> \
            <a class="close" href="#" style="display: block;"></a> \
          </div> \
        </div>').css({height: 1,  opacity: 0, overflow: 'hidden'});

      if($overlayContent) {
        _wrapper.find('.responsive-gallery').prepend($overlayContent.detach().show());
      }
      _wrapper.find('ul.controls li a').bind('click',function(e) { e.preventDefault();});
      _wrapper.find('.close').on('click', closeOverlay);
      return _wrapper; 
    };

    function initContentComponenetsIfNeeded() {
      if($overlayContent.hasClass('standalone-slideshow')) {
        
        // $section.find('.content-wrapper').slideshow2 ({ arrows: true });
        
      //   $section.find('.slide:first').show();
      }
    }

    function removeOldOverlay(){
      $overlayContent.remove(); 
    };
  });
})(jQuery)
;
(function($) {

  $.plugin('productAvailabilityNotifier', function() {  

    var $window = $(window), options, $section, $notifierHeight;

    this.options = {
      postURL: "/ajax/product_availability_notifier_server.haml"
    };
    
    function adjustSubmitNotifyMeHeight() {
      // no height adjustment for non-js thank you page
      if ($(".product-notifier").find(".nonjs-hidden-area").text() === "") {
         $notifierHeight = $(".product-notifier").find(".unhidden-area").height() + $(".product-notifier").find("header h3").outerHeight(true);
         $(".product-notifier").find(".content").css("height", $notifierHeight);
         
         // check if error label(s) are set visible because of inline-block use send button needs to move too when error msgs appear
         if ($section.find("form div.validation-error-block label span:visible").length > 0) {
           $section.find(".actions").css("margin-top", "0").css("margin-bottom", "0.5em").css("vertical-align", "bottom");
         } else if ($section.find("form div.validation-error-block label span:hidden").length > 0) {
           $section.find(".actions").css("margin-top", "0.6em");
         }
       }
    };
  
    function submitNotifyMe() {
      // send the form data to server via ajax $.post
      var data = {
                  email: $("#email").val(),
                  agreed: $(".agreement-block input").is(':checked')
                  };
      
      $.post(options.postURL, function(data) {
        // if all validation OK, display thank you page
        $(".product-notifier").find(".unhidden-area").fadeOut(function() {
          $(".product-notifier").find(".hidden-area").fadeIn();
        });
      }).fail(function() {
        $section.find(".validation-error-block").find("span.error").show();
        adjustSubmitNotifyMeHeight();
      });
    }
  
    function bindEvents() {
      
      // when DOM has loaded for the component, set the height
      $(".product-notifier").ready(function() {
        adjustSubmitNotifyMeHeight();
      });
      
      // form submit via JS
      // NOTE: DISABLED because WAL app don't accept AJAX POST requests
      /*
      $section.find("form").submit(function(event) {
         event.preventDefault();
         return validateForm() ? submitNotifyMe() : adjustSubmitNotifyMeHeight();
      });
      */
      
      // always first hide server error message
      $section.find("form input.button.submit").click(function() {
        $section.find(".validation-error-block").find("span.error").hide();
        setTimeout(function() { adjustSubmitNotifyMeHeight(); },20);   // for desktop
        setTimeout(function() { adjustSubmitNotifyMeHeight(); },200);  // for slower devices
      });
    };
    
    
    this.init = function($el) {
      $section = $el;
      options = this.options;
      bindEvents();
      
      $(window).on('resize', $.debounce(adjustSubmitNotifyMeHeight, 300));
    };
    
    this.destroy = function($el) {
    };

  });

})(jQuery);
(function($) {
  $.plugin('productBasedScreening', function() {
    var $window = $(window), $element, $form;

    var onSubmit = function(){
      var IMEI_code = $.trim($form.find("#deviceId").val()), url = $form.attr('action') + '&' + $form.serialize();
      if (IMEI_code === "") {
        $form.find(".required-note").css("cssText", "display: none !important");
        $form.find(".invalid-imei").css("cssText", "display: inline-block !important");
      } else {
        $.ajax({
            url: url,
            dataType: 'json',
            timeout: 10000,
            async: false,
            cache: true,
            success: function(data) {
              if(data.deviceStatus === "supported" || data.deviceStatus === "not supported") {
                data.IMEI  = IMEI_code.toString().substring(0, 8) + IMEI_code.substring(8).replace(/./g, "*");

                var validPhoneModelCookie = { "valid" : ((data.deviceStatus === "supported")? true : false), "imei" : data.IMEI };
                var expiryDate = new Date();
                if(I18n.IMEI_checker.cookie_expiration > 0) {
                  expiryDate.setDate(expiryDate.getDate() + parseInt(I18n.IMEI_checker.cookie_expiration));
                } else {
                  expiryDate = null;
                }
                $.cookies.set("nkValidPhoneModel", validPhoneModelCookie, {
                    expiresAt: expiryDate,
                    path: I18n.IMEI_checker.cookie_path
                  });

                load_dynamic_support_contacts(validPhoneModelCookie, function(){ $('html, body').animate({ scrollTop: $element.offset().top }, 400); });

                track_submit(data.deviceStatus === "supported" ? "valid" : "not supported");
              } else if(data.deviceStatus === "error") {
                $form.find(".required-note").css("cssText", "display: none !important");
                $form.find(".invalid-imei").css("cssText", "display: inline-block !important");
                track_submit("invalid");
              }
            },
            error: function(xhr, textStatus, errorThrown) {
              $form.find(".required-note").css("cssText", "display: none !important");
              $form.find(".request-error").css("cssText", "display: inline-block !important");
              track_submit("error");
            }
        });
      }
      return false;
    };

    function track_submit(status) {
        if (window.isTrackingAvailable) {
        	utag.view({ pName: nkT.pName + ":imei validator:" + status });
        }
    }

    var startLiveChat = function(event){
      event.preventDefault();
      window.open(I18n.live_chat.launch_url, 'ChatWindow',
                  'location=no,status=no,toolbar=no,menubar=no,directories=no,scrollbars=no,width=700,height=580,top=20,left=20'
      );
    };

    function load_dynamic_support_contacts(valid_phone_param, callback) {
      var data_string = 'validCountry=' + contact_support_valid_country;
      var displayed_imei;
      if($.cookies.get("nkValidPhoneModel")) {
        data_string += '&deviceStatus=' + $.cookies.get("nkValidPhoneModel").valid;
        displayed_imei = $.cookies.get("nkValidPhoneModel").imei
      } else if (jQuery.isPlainObject(valid_phone_param) && valid_phone_param.hasOwnProperty('valid')) {
        data_string += '&deviceStatus=' + valid_phone_param.valid;
        displayed_imei = valid_phone_param.imei;
      }
      data_string = I18n.IMEI_checker.product_screening_url.indexOf('?') !== -1 ? "&" + data_string : "?" + data_string;
      $("#product_based_screening").load(I18n.IMEI_checker.product_screening_url + data_string, function() {
          var $container = $(this);
          $form = $container.find("form");
          $form.on("submit." + this.namespace, onSubmit);
          $(window).adaptiveImages('doRefresh');
          $container.find(".do-fade-in").each(function (i) {
            $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);
          });

          $container.find("p.imei").append(displayed_imei);
          $container.find(".change-imei a").on('click', function(event){
            event.preventDefault();
            if($.cookies.get("nkValidPhoneModel")) {
              $.cookies.del("nkValidPhoneModel",{path: I18n.IMEI_checker.cookie_path});
            }
            load_dynamic_support_contacts();
          });

          if ($.isFunction(callback)) {
              callback();
          }
          loadLiveChat();
      });
    }

    function loadLiveChat(){
      if(I18n.live_chat && I18n.live_chat.status_url.length > 0 && $(".live-chat").length > 0) {
        $.ajax({
            url: I18n.live_chat.status_url,
            dataType: "jsonp",
            cache: true,
            timeout: 5000,
            jsonp: false
        });
      }
    }

    // called by Live Chat status check
    window.chatStateSelector = function(data){
      var data_string = (I18n.live_chat.load_url.indexOf('?') !== -1 ? "&" + jQuery.param(data) : "?" + jQuery.param(data))
      $.ajax({
          type: "GET",
          url: I18n.live_chat.load_url + data_string,
          cache: true,
          timeout: 5000,
          success: function(teaserData) {
            if (teaserData) {
              $('.live-chat-default').replaceWith(teaserData);
              var $live_chat = $('.live-chat');
              if ($live_chat.hasClass('.transition-ease-fast'))
                $.delay.apply($live_chat, [window.customFadeIn, parseInt(0, 10)]);
              $(window).adaptiveImages('doRefresh');
              if (data && data.liveChatStatus === "online") {
                  $live_chat.children('a.show-in-tablet').bind('click', function(e) {
                  startLiveChat(e);
                });
              }
            }
          }
      });
    };

    this.init = function($el) {
      $element = $el;
      load_dynamic_support_contacts();
    };

    this.destroy = function($el) {
      $form.off("submit." + this.namespace, onSubmit);
      $('.start-live-chat').off("click." + this.namespace, startLiveChat);
    };

  });

})(jQuery);
(function($) {

  $.plugin('productCompareView', function() {

    var $window = $(window), options, $section;

    this.options = {  
      debounceTime: 250,
      startFromWidth: 640
    };

    // Draw borders
    function draw() {
      $section.find('.product').height('auto').each(function() {
        $(this).css({ 'height': $(this).closest('ul.product-list').outerHeight()+'px' });
      });
    }

    // Undraw
    function unDraw() {
      $section.find('.product').each(function() {
        $(this).css({ 'height': 'auto'});
      });
    }

    var enhanceAreas = function() {
      var $areaLink = $section.find('h3 a'), 
        isDesktop = $window.width() >= options.startFromWidth;


      $('.product-list').toggleClass('bordered-content', isDesktop);

      if(isDesktop) {
        if($areaLink.hasClass('enh-toggle')) {
          $areaLink.removeClass('enh-toggle enh-toggle-active').enhanceToggle('destroy');
          $section.find('.enh-toggle-opened').removeClass('enh-toggle-opened');
        }
        draw();
      } else {
        if(!$areaLink.hasClass('enh-toggle')) {
          $areaLink.addClass('enh-toggle').enhanceToggle({silent: true, closeEvent: 'compare_view'});
        }
        unDraw();
      }
    };

    /*

    */

    this.init = function($el) {
      $section = $el;
      options = this.options;

      var $sectionLink = $section.find('h2').not(':first').find('a');
      $sectionLink.addClass('enh-toggle').enhanceToggle();

      var lazyEnhance = $.debounce(enhanceAreas, options.debounceTime);
      $window.on('resize.' + this.namespace, lazyEnhance).resize();
    };

    this.destroy = function($el) {
      $window.off('resize.' + this.namespace);
    };

  });

})(jQuery);
(function($) {

  $.plugin('productComparison', function() {

    // define plugin variables
    var $compareSelector = $('.compare-selector'),
        $compareSelectorList = $('.compare-selector .wrapper > .content-wrapper > .phone-list > ul'),
        $catalog = $('.catalog .wrapper .content-wrapper > ul'),
        $catalogItems = $('.catalog .wrapper .content-wrapper > ul > li'),
        $compareLinks = $('.catalog > .wrapper .content-wrapper > ul li a.compare'),
        $startComparisonLink = $compareSelector.find('a.start-comparison'),
        uncheckLink = '<a class="uncheck-link" href="#">' + I18n.get('product_comparison', 'remove_from_collection') + '</a>',
        emptyCompareItem = '<li class="empty"><div class="visuals"></div></li>',
        comparisonStorage = false,
        localStorage = null;

    // define plugin options
    this.options = {
      storageName: 'phones_for_comparison'
    };

    // Initialize the storage if it exists
    function getStorage() {
      try {
        var storage = $.cookies.get(options.storageName);
      } catch (e) {}
      return storage ? storage : (localStorage != null ? localStorage : false);
    }

    // Remove the storage
    function deleteStorage() {
      try {
        $.cookies.del(options.storageName);
      } catch (e) {}
      localStorage = null;
      updateComparisonLink();
    }

    // Save the storage
    function saveToStorage(data) {
      try {
        $.cookies.set(options.storageName, data);
        if (!$.cookies.get(options.storageName)) {
          localStorage = data;
        }
      } catch (e) {
        localStorage = data;
      }
      comparisonStorage = getStorage();
      updateComparisonLink();
      if(!$compareSelector.hasClass('open')) {
        $compareSelector.css({ 'display': 'block' }).animate({ 'height': '160px' }, function() {
          $compareSelector.css({ 'height': 'auto' }).addClass('open');
        });
      }
    }

    // Update product compare buttons
    function updateCatalogButtons(pid, state) {
      var $base = $catalog.find('[data-pid="' + pid + '"]');
      switch (state) {
        case 'default':
          $base.find('a.compare').removeClass('selected').find('span').text(I18n.get('product_comparison', 'compare'));
          $base.find('a.uncheck-link').remove();
        break;
        case 'selected':
          if (comparisonStorage && comparisonStorage.length === 1) {
            $base.find('a.compare').addClass('disabled').find('span').text(I18n.get('product_comparison', 'start_comparison_short'));
          } else {
            $base.find('a.compare').addClass('selected').removeClass('disabled').find('span').text(I18n.get('product_comparison', 'start_comparison_short'));
          }
          if ($base.find('a.uncheck-link').length == 0) {
            $base.find('a.compare').parent().append(uncheckLink);
          }
        break;
      }
    }

    function updateAllCatalogButtons(state) {
      $.each(comparisonStorage, function(key, value) {
        updateCatalogButtons(value.pid, state);
      });
    }

    function appendTrayItem($el) {
      $compareSelectorList.find('li.empty').first().removeClass('empty').addClass('selected').attr('data-pid', $el.parent().attr('data-pid')).html('<div class="visuals"><img src="' + $el.parent().attr('data-image-url') + '" /><a class="remove" href="#" title="' + I18n.get('product_comparison', 'remove') + '">' + I18n.get('product_comparison', 'remove') + '</a></div><span>' + $el.parent().attr('data-model-name') + '</span>');
      // Treat the first tray item as a special case
      $compareSelectorList.find('li').first().addClass('first');
    }

    function updateComparisonLink() {
      if (!comparisonStorage || comparisonStorage.length < 1) {
        $startComparisonLink.empty().removeClass('enabled');
      } else if (comparisonStorage.length === 1) {
        var a = $startComparisonLink.empty().append('<span>' + I18n.get('product_comparison', 'add_one_more_product') + '</span>').removeClass('enabled');
        a.attr('href', modifyLinkUrl(a.attr('data-href')));
        a.attr('onclick', 'return false;');
      } else {
        var a = $startComparisonLink.empty().append('<span>' + I18n.get('product_comparison', 'start_comparison') + '</span>').addClass('enabled');
        a.attr('href', modifyLinkUrl(a.attr('data-href')));
        a.removeAttr('onclick');
      }
    }

    function modifyLinkUrl(href) {
      var ids = "";
      $.each(comparisonStorage, function(key, value) {
        if (ids) {
          ids += '-';
        }
        ids += value.pid;
      });
      if (/products=/.test(href)) {
        return href.replace(/products=[^&]*/, 'products=' + ids);
      }
      return href += (/\?/.test(href)?'&':'?') + 'products=' + ids;
    }

    function addToStorage(event) {
      event.preventDefault();
      if($(this).hasClass('disabled')) {
        // do nothing
      } else if($(this).hasClass('selected')) {
        window.location.href = $startComparisonLink.attr('href');
      } else {
        // Storage doesn't exist yet
        if(!comparisonStorage) {
          appendTrayItem($(this));
          var tmpStorage = [];
          tmpStorage.push({ pid: $(this).parent().attr('data-pid'), modelName: $(this).parent().attr('data-model-name'), imageUrl: $(this).parent().attr('data-image-url') });
          saveToStorage(tmpStorage);
          updateAllCatalogButtons('selected');
        // Too many items selected
        } else if(comparisonStorage && comparisonStorage.length >= 3) {
          $(this).addClass('disabled').find('span').text(I18n.get('product_comparison', 'maximum_selected'));
        // Save to storage
        } else {
            appendTrayItem($(this));
            comparisonStorage.push({ pid: $(this).parent().attr('data-pid'), modelName: $(this).parent().attr('data-model-name'), imageUrl: $(this).parent().attr('data-image-url') });
            saveToStorage(comparisonStorage);
            updateAllCatalogButtons('selected');
        }
      }
    }

    function deleteFromStorage(event) {
      // Set variables, get the parent li's data-pid value
      var pid = parseInt($(this).closest('li').data('pid'), 10),
          found = null,
          i;
      // Check the index of the found item
      $.each(comparisonStorage, function(i, e) {
        if (parseInt(e.pid, 10) === pid) {
          found = i;
          return false;
        }
      });
      // Deletion routine if an item index was found
      if(found !== null) {
        comparisonStorage.splice(found, 1);
        if(comparisonStorage.length<1) {
          $compareSelector.animate({ 'height': '0' }, 250, 'easeInOutQuart', function() {
            $compareSelector.removeClass('open').css({ 'display': 'none' });
            deleteStorage();
          });
        } else {
          saveToStorage(comparisonStorage);
        }

        $compareSelectorList.append(emptyCompareItem).find('[data-pid="' + pid + '"]').remove().end().find('li').first().addClass('first');
        $(this).remove();
        updateCatalogButtons(pid, 'default');
        $compareLinks.each(function() {
          if($(this).hasClass('disabled')) {
            $(this).removeClass('disabled').find('span').text(I18n.get('product_comparison', 'compare'));
          }
        });
        updateAllCatalogButtons('selected');
      }
      event.preventDefault();
    }
    
    function loadInPreRendederedItems() {
      var tmpStorage = [];
      $compareSelectorList.find('li.selected').each(function (key, val) {
        tmpStorage.push({ pid: $(val).attr('data-pid'), modelName: $(this).attr('data-model-name'), imageUrl: $(this).find('img').attr('src') });
      });
      if (tmpStorage.length >= 1) {
        $compareSelectorList.find('li.selected').each(function (key, val) {
          $(val).removeClass('selected').addClass('empty').removeAttr('data-pid').empty().append('<div class="visuals">');
        });
        saveToStorage(tmpStorage);
      }
    }

    function initializeMarkup(markup) {
      if (!comparisonStorage) return;
      updateAllCatalogButtons('selected');
    }

    // Initialize the plugin
    this.init = function() {
      options = this.options;

      // Check if we have a storage, if so, store it in a variable, if not return false;
      comparisonStorage = getStorage();

      loadInPreRendederedItems();

      // We have a storage and items in it
      if(comparisonStorage) {
        // Open the tray
        $compareSelector.addClass('open');
        // Build the compare selector and touch the source listing (e.g. catalog) based on what's in the storage
        $.each(comparisonStorage, function(key, value) {
          // Add phone to compare list
          $compareSelectorList.find('li.empty').first().removeClass('empty').addClass('selected').attr('data-pid', value.pid).html('<div class="visuals"><img src="' + value.imageUrl + '" /><a class="remove" href="#" title="' + I18n.get('product_comparison', 'remove') + '">' + I18n.get('product_comparison', 'remove') + '</a></div><span>' + value.modelName + '</span>');
        });
        // Selected state to catalog for the phones in the compare list
        updateAllCatalogButtons('selected');
      }

      updateComparisonLink();
      // Add items to the storage
      $('.catalog').on('click', '.wrapper .content-wrapper > ul > li a.compare', addToStorage);
      // Remove items from the storage
      $('.catalog').on('click', '.wrapper .content-wrapper > ul > li a.uncheck-link', deleteFromStorage);
      $compareSelectorList.on('click', 'a.remove, img', deleteFromStorage);

      loadmore_content_hooks.push(initializeMarkup);
    };

    // destroy the plugin
    this.destroy = function($el) {

    };

  });

})(jQuery);
(function($) {

  //$.fn.productLink = $.plugin('productLink', function() {
  $.plugin('productLink', function() {  

    var $window = $(window), options, namespace, $section, $menu, $dropdown, $focusHelper, $nonjssection, $menuOnTop, $cookieName;

    this.options = {
      debounceTime: 150,
      stopToWidth: 320
    };

    var relocate = function() {
      if($window.width() < options.stopToWidth && $menuOnTop) {
        relocateMenuOnBottom();
        unbindEvents();
      } else if ($window.width() > options.stopToWidth && !$menuOnTop) {
        relocateMenuOnTop();
        bindEvents();
        hideList();
      }
      // offset if list doesn't fit in screen
      if ($menuOnTop) {
        adjustHeightAndOffset();
      }
    };
    
    // on default desktop size -> move dropdown on top of page
    function relocateMenuOnTop() {
      $dropdown.clone().appendTo($menu);
      $nonjssection = $("section.product-link-dropdown").clone();
      $("section.product-link-dropdown").remove();
      $section.find(".enh-select-trigger").attr("href", "#");
      $dropdown = $section.find("ul");
      $menuOnTop = true;
    }
    
    // move dropdown back to bottom on smaller breakpoints akin to no-js
    function relocateMenuOnBottom() {
      $nonjssection.appendTo("#main");
      $menu.find("ul").remove();
      $section.find(".enh-select-trigger").attr("href", "#product-link-dropdown");
      $dropdown = $section.siblings(".product-link-dropdown").find("ul");
      $dropdown.find("a").removeClass('selection');
      $dropdown.show();
      $menuOnTop = false;
    }

    var pageLoad = function() {
      if($(this).attr('value') !== '' && $(this).attr('value') !== undefined)
      window.location = $(this).attr('value');
    };

    function buildBinds() {
      $section.on('change', 'select', pageLoad);
      bindEvents();
    }
    
    // bind events (MOSTLY FROM ENHANCE_SELECT)
    function bindEvents() {
      $("html").bind('click.' + namespace, function(event) {
          if ($menu.length && $.contains($menu.get(0), event.target) && !$menu.hasClass("list-open")) {
            showList();
          } else {
            hideList();
          }
      });
      
      $dropdown.find("li").bind('mouseenter.' + namespace, function(event) {
        $dropdown.find("a").removeClass('selection');
        $(this).find("a").addClass('selection');
      });
      
      $dropdown.find("li").bind('mouseleave.' + namespace, function(event) {
        $dropdown.find("a").removeClass('selection');
      });  
    }
    
    function unbindEvents() {
      $("html").unbind('.' + namespace);
    }
    
    // Show the dropdown list (MOSTLY FROM ENHANCE_SELECT)
    function showList() {
      $menu.addClass("list-open");
      $dropdown.show();
      if (!$dropdown.find("a").filter('.selection').length) {
        // in case nothing has been selected select the first option
        $dropdown.find("a").removeClass('selection').first().addClass('selection');
      }
    }

    // Hide the dropdown list (MOSTLY FROM ENHANCE_SELECT)
    function hideList() {
      $menu.removeClass("list-open");
      $dropdown.hide();
    }

    // adjust the height before adjusting offset,
    // since the offset depends on the correct height (MOSTLY FROM ENHANCE_SELECT)
    function adjustHeightAndOffset() {
      // avoid nullpointer
      if (!$section.find(".enh-select-trigger").length) {
        return;
      }
      
      var $window      = $(window),
        trigger        = $section.find(".enh-select-trigger");
        viewportHeight = $window.height(),
        triggerHeight  = trigger.outerHeight(),
        triggerOffset  = trigger.offset().top - $window.scrollTop(),
        listHeight     = $dropdown.css('height', '').outerHeight();
      // ensure that all options a accessible and visible
      // by the means of scrolling if necessary
      $focusHelper.css({
        width: $section.width(),
        height: trigger.outerHeight()
      });
      if (listHeight > viewportHeight) {
        listHeight = Math.floor(viewportHeight / triggerHeight) * triggerHeight - triggerHeight;
        $dropdown.css('height', listHeight);
      }
      // ensure that the options list is always fully visible
      // list fits by default
      if (viewportHeight - (triggerHeight + triggerOffset) > listHeight) {
        $dropdown.css('top', triggerHeight);
      }
      // list doesn't fit, not enough room beneath
      else {
        var overflow = listHeight - (viewportHeight - (triggerHeight + triggerOffset));
        // push the list up an nth of the height of the trigger for looks
        var offset = Math.floor(overflow / triggerHeight) * triggerHeight * -1;
        // ensure that the list is always glued to the trigger,
        // this handles the top
        $dropdown.css('top', Math.max(offset, -listHeight));
      }
    }  

    this.init = function($el) {
      $section = $el;
      options = this.options;
      // Doesn't the namespace get declared automatically?
      namespace = this.namespace;
      $menu = $section.find(".product-link-menu");
      // TODO: Make the plugin search for the appropriate menu based on the DOM a.enh-select-trigger's href id value
      $dropdown = $("#product-link-dropdown").find("ul").hide();  // hide dropdown on init
      $focusHelper = $section.find(".focus-helper").hide();  // focus helper can be hidden, used to relocate dropdown when window scrolled
      $menuOnTop = false;
      $cookieName = 'product_selector';

      // relocates menu from non-js version bottom to the top of the page
      relocateMenuOnTop();
      
      // build binds after menu relocation
      buildBinds();
      
      // relocate based on screen resolution
      var lazyRelocate = $.debounce(relocate, options.debounceTime);
      $window.on('resize.' + this.namespace, lazyRelocate).resize();
    };

    this.destroy = function($el) {
      $window.off('resize.' + this.namespace);
    };

  });

})(jQuery);

// TODO: Refactor these as methods of the plugin
$.fn.productLink.deleteCookie = function() {
  try {
    $.cookies.del('product_selector');
  } catch(e) {}  
};

$.fn.productLink.setCookie = function($pid, $selectorURL) { 
  try {
    $.cookies.set('product_selector', {pid: $pid, url: $selectorURL});
  } catch(e) {}  
};

$.fn.productLink.renderProductlinkFromCookie = function() {
  try {
      var cookieUrl = $.cookies.get('product_selector')['url'];
      $.get(cookieUrl, function(data) {
        if ($("#main .page-actions-wrapper").length == 0) {
           $("#main h1").after('<div class="page-actions-wrapper"/>');
        }
       	$("#main .page-actions-wrapper").append(data);
        $('section.product-link').productLink();
      });
  } catch(e) {}     
};
(function($) {

  $.plugin('productSelector', function() {

    var _self = this,
        $window = $(window),
        options,
        needle,
        $section,
        $filters = $('.filters'),
        $loadMore = $('.load-support'),
        phoneListToggle = 'a.view-all-phones.toggle',
        $phoneListWrapper = $('.phone-list-wrapper'),
        trackSearch = true;

    // Define options and their defaults
    this.options = {
      phoneListUrl: '//' + window.location.host + window.location.pathname + '?action=accessorysearch&showproducts=true',
      debounceTime: 500,
      itemsPerLoad: I18n.get('product_selector', 'itemsperload')
    };

    var buildSearch = function () {
      $section.find('.search').show().css('opacity', '1');

      // custom tracking
      if (window.isTrackingAvailable) {
        $('div.search input').on("focus", function(){
          if (trackSearch) {
            utag.link({ link_id:window.location, link_text: nkT.pName + ":search product", linkEvent: nkT.pName + ":search product" });
            trackSearch = false;
          }
        });
      }
    };

    // Load in the phone list and append the phone list only (basically we reload the same page via AJAX and append a fragment)
    // Clone the phone list without an id as the haystack in the quick search results
    var buildPhoneList = function() {
      if ($phoneListWrapper.size() === 0) {
        $(".product-selector .content-wrapper").append("<div class='phone-list-wrapper'></div>");
        $phoneListWrapper = $('.phone-list-wrapper');
      }

      if (options.dynamic & $section.hasClass('product-list-open')) {
        $phoneListWrapper.find('.adaptive-exclude').removeClass('adaptive-exclude').show();
        $(window).adaptiveImages('doRefresh');
      } else {
        if ($section.hasClass('product-list-open')){
          var $pwrapper = $section.find('.phone-list-wrapper');
          $pwrapper.find('li').filter(':visible').find('.adaptive-exclude').removeClass('adaptive-exclude');
          $(window).adaptiveImages('doRefresh');
          $pwrapper.show();
        }
      }
    };

    var openPhoneList = function(event) {
      $element = $(this);
      if(!$section.hasClass('product-list-open')) {
        var height = $phoneListWrapper.outerHeight();
        $phoneListWrapper.css({ 'height': '0', 'display': 'block' }).stop().animate({ 'height': height }, 250, 'easeInOutQuart', function () {
          $phoneListWrapper.css({ 'height': 'auto' });
        });
        $element.addClass('open');
        $section.addClass('product-list-open');
        $('.results-wrapper').hide();
        $phoneListWrapper.find('.adaptive-exclude').removeClass('adaptive-exclude').show();
        $(window).adaptiveImages('doRefresh');
      } else {
        return;
      }
      event.preventDefault();
    };

    var togglePhoneList = function(event) {
      $element = $(this);
      if(!$section.hasClass('product-list-open')) {
        var height = $phoneListWrapper.outerHeight();
        $phoneListWrapper.css({ 'height': '0', 'display': 'block' }).stop().animate({ 'height': height }, 250, 'easeInOutQuart', function () {
          $phoneListWrapper.css({ 'height': 'auto' });
        });
        $element.addClass('open');
        $section.addClass('product-list-open');
        $phoneListWrapper.find('.adaptive-exclude').removeClass('adaptive-exclude').show();
        $(window).adaptiveImages('doRefresh');
      } else {
        $phoneListWrapper.animate({ 'height': '0' }, 250, 'easeInOutQuart', function () {
          $phoneListWrapper.css({ 'height': 'auto', 'display': 'none' });
          $element.removeClass('open');
          $section.removeClass('product-list-open');
        });
      }
      event.preventDefault();
    };

    // Reset the quick search field
    var blurSearch = function(event) {
      $section.find('input[type="text"]').val('').blur();
      // TODO: chain these
      $('.results-wrapper').find('li').hide();
      $('.results-wrapper').find('.notification').hide();
      $('.results-wrapper').hide();
      //$(options.resultsWrapper).hide();
      if($section.hasClass('product-list-open')) {
        if (options.dynamic) {
          $phoneListWrapper.find('li').show();
        } else {
          $phoneListWrapper.find('li[data-type='+$section.find('a.checked[category]').attr('category')+']').hide().slice(0,options.itemsPerLoad).show();
        }
      }

    };

    var escapeHTML = function(s) {
      return s.split('&').join('&amp;').split('<').join('&lt;').split('"').join('&quot;');
    };

    // Quick search the phone lists – hide results from the big list or filter results from the search field list
    var quickSearch = function(event) {
      $element = $(this);
      var newNeedle = $element.val();
      if ($element.attr('placeholder') == newNeedle) {
        newNeedle = "";
      }
      newNeedle = $.trim(newNeedle.toLowerCase());
      if (newNeedle == needle) {
        return;
      }
      needle = newNeedle;
      var $quickResultsWrapper = $('.results-wrapper'),
        $allPhones = $phoneListWrapper.find('.view-all-phones-list'),
        $notification = $phoneListWrapper.find('.notification'),
        $items = $phoneListWrapper.find('li'),
        needles = needle.split(' '),
        value = $section.find('a.checked[category]').attr('category'),
        padding = (options.dynamic) ? {} : { 'padding-bottom': '0.75em' }; // rly?

      if (needle.length > 0 && event.keyCode !== 27) {
        // Perform the search. Two options: filter the phone list or do a quick search.
        // Filter the phone list: Check if the product list is open and filter
        var $selector = (options.dynamic) ? $items : $items.filter('[data-type='+value+']'),
          foundSome = false;
        $selector.show().each(function(){
          // if item doesnt match search term, hide it. otherwise load its image
          var modelName = $(this).attr('data-model-name').toString().toLowerCase(),
            found = true;
          for (var i = 0; i < needles.length; i++) {
            found &= modelName.indexOf(needles[i]) >= 0;
          }
          if (found) {
            $(this).find('.adaptive-exclude').removeClass('adaptive-exclude');
            foundSome = true;
          } else {
            $(this).hide();
          }
        });

        $section.css(padding);
        $loadMore.hide();

        if (foundSome) {
          $(window).adaptiveImages('doRefresh');
          $allPhones.show();
          $notification.hide();
        } else {
          $allPhones.hide();
          $notification.find('em').html(escapeHTML(needle));
          $notification.show();
        }
      // 0 characters in the needle
      } else if (needle.length < 1) {
        if (options.dynamic) {
          $items.show();
          $section.css({ 'padding-bottom': '0' });
          $loadMore.show();
        } else {
          $items.filter('[data-type='+value+']').hide().slice(0,options.itemsPerLoad).show();
          if (options.itemsPerLoad < $items.filter('[data-type='+value+']').length) {
            $section.css({ 'padding-bottom': '0' });
            $loadMore.show();
          }
        }
        $allPhones.show();
        $notification.hide();
        
        
      // User hit ESC
      } else if(event.keyCode === 27) {
        $allPhones.show();
        $notification.hide();
        if (options.dynamic) {
          $section.css({ 'padding-bottom': '0' });
          $loadMore.show();  
        } else if (options.itemsPerLoad < $items.filter('[data-type='+value+']').length) {
          $section.css({ 'padding-bottom': '0' });
          $loadMore.show();
        }
        
        blurSearch();
      }
    };

    // change between two (or more) lists
    var radioSwitch = function(event) {
      var value = $(this).attr('category'),
        $items = $phoneListWrapper.find('li');

        event.preventDefault();

      $('.product-selector a[category]').removeClass("checked");
      $('.product-selector a[category]').children('.enh-radio-selected').removeClass("enh-radio-selected");
      $(this).addClass('checked');
      $(this).children('.enh-radio-wrapper').addClass('enh-radio-selected');

      // reset the search when switching categories
      if (options.dynamic) {
        $items.show();
      } else {
        $items.filter('[data-type='+value+']').hide().slice(0, options.itemsPerLoad).show();
      }
      $phoneListWrapper.find('.view-all-phones-list').show();
      $phoneListWrapper.find('.notification').hide();
      $section.css({ 'padding-bottom': '0' });
      $loadMore.show();
      blurSearch();
      
      $items.hide().filter('[data-type='+value+']').slice(0, options.itemsPerLoad).show().find('img').removeClass('adaptive-exclude');
      $(window).adaptiveImages('doRefresh');
      if ($items.filter(':hidden[data-type='+value+']').length > 0) {
        $section.css({ 'padding-bottom': '0' });
        $loadMore.show();
      }

      if ($items.filter('[data-type='+value+']').length > options.itemsPerLoad) {
        $loadMore.show();
        $section.css({ 'padding-bottom': '0' });
      } else {
        $loadMore.hide();
        $section.css({ 'padding-bottom': '0.75em' });
      }

      if (window.isTrackingAvailable) {
        utag.link({ link_id:window.location, link_text: nkT.pName + ":" + value + " filter", linkEvent: nkT.pName + ":" + value + " filter" });
      }
    };

    var buildBinds = function() {
      // Quick searching the cloned phone list
      var lazyQuickSearch = $.debounce(quickSearch, options.debounceTime);
      $section.on('keyup focusin', 'input[type="text"]', lazyQuickSearch);
      // Phone list toggle click
      $section.on('click', phoneListToggle, togglePhoneList);
      // Open view all phones with search field focus
      $section.on('focus', 'input[type="text"]', openPhoneList);
      // Radio button switch
      $section.find('.radios a').on('click', radioSwitch);
      // disable form submit in all cases
      $section.find('form').attr('onSubmit', 'return false;');
    };

    this.init = function($el) {
      options = this.options;
      $section = $el;
      buildSearch();
      buildPhoneList();
      buildBinds();
    };

    this.destroy = function($el) {
      // Unbinds
    };

  });

})(jQuery);
(function($) {

  $.plugin('simpleSlide', function() {

    var options = {
        triggerNext: '.next', 
        triggerPrev: '.prev', 
        slides: '.slide', 
        animation: 'slideRight',
        allowLoop: true,
        speed: 500, 
        autoPlay: false,
        autoPlayDelay: 7000, 
        minAnimatedResolution: 640 // same as tablet-lite
        // speed: 'slow', 
        // transition_class_prefix: 'transition-ease-'
      },
      $el,  
      _this, 
      $container, 
      $slides, 
      $slides_container, 
      $nextTrigger,
      $prevTrigger, 
      $animationInterval,
      $current_slide,
      $window = $(window),
      isLecasyIE = (BrowserDetect.browser == 'Explorer' && BrowserDetect.version <= 8), 
      slideAnimationProperty = (function() { return property = $('body').is('.rtl') ? 'right' : 'left'; })(),
      videoIsPlaying;
    
    this.slideRight = function(e) {
      slideElements(slideAnimationProperty, 'width', !isInverse(e));
    };

    this.slideLeft = function(e) {
      slideElements(slideAnimationProperty, 'width', isInverse(e));
    };


    /*
    * Handles control button classes. 
    * 1. if looping is enabled, it just returns. 
    * 2. if looping is disabled, it up updates controls classes depending on which state slides are. 
    */
    var updateControls = function() {
      
      
      if($slides.size() === 1) {
        
        $prevTrigger.hide();
        $nextTrigger.hide();

      } else if(!options.allowLoop) {
      // if looping is enabled, do your tricks

        // if first slide is visible, disable 'prev' control
        ($current_slide.is(':first-child') ? $.fn.addClass : $.fn.removeClass)
          .apply($prevTrigger, ['disabled']);
        
        // if last slide is visible, disable 'next' control
        ($current_slide.is(':last-child') ? $.fn.addClass : $.fn.removeClass)
          .apply($nextTrigger, ['disabled']);
      } 

   };

    var isInverse = function(e) {
      return e && e.target && $(e.target).is('.prev');
    };
    /*
    * Default animation function that handles currenty all animation direction
    * @direction tells which css value should be changed
    * @window_measure difines which orientation of window should be measired
    */
    var slideElements = function(direction, window_measure, inverse) {
      var current_from  = {'opacity':1}, 
          current_to    = {'opacity':0}, 
          next_from     = {'opacity':0},
          window_measure;
    
      var next_slide = getNextSlide(!inverse); 
      window_measure  = $current_slide[window_measure]();

      // have to set map values like this. 
      // {variable_left: 0} sets map key as variable_left, not as content value of variable_left,
      if(!inverse) {
      
        current_from[direction] = 0;
        current_to[direction]   = parseInt(window_measure * 0.7);
        next_from[direction]    = window_measure * -1;

      } else {
        current_from[direction] = 0;
        current_to[direction]   = parseInt(window_measure * 0.7 * -1);
        next_from[direction]    = window_measure;
     }
   
      // if animation is enabled for current screen size
      if(options.minAnimatedResolution && $(window).width() >= options.minAnimatedResolution && !isLecasyIE) {
        // animate old slide
        $slides_container.height($current_slide.outerHeight());
        $current_slide.css(current_from).animate(current_to, {speed: options.speed,
          complete: function() {
            $current_slide.hide();
          }}
        );

        // add little delay so next slide wont go top of old one
        setTimeout(function() {
          // animate new slide

          // $slides_container.height('auto');
          next_slide.css(next_from).show().animate(current_from, {speed: options.speed,
            complete: function() {
              $current_slide = next_slide;
              $slides_container.height($current_slide.outerHeight());
              updateControls();
            }}
          );
        }, options.speed * 1);
      } else { // just change next slide 

        $current_slide.css(current_from).hide();
        next_slide.css(current_from).show();
        $current_slide = next_slide;
        updateControls();
      
      }
    };



    var getNextSlide = function(inverse){
      var ret
      if (options.allowLoop) {
        ret = inverse ?
          ( $current_slide.prev()[0] || $slides.last()[0]  ) : 
          ( $current_slide.next()[0] || $slides.first()[0] )
      } else {
        ret = inverse ? 
          ( $current_slide.prev()[0] || $slides.first()[0] ) : 
          ( $current_slide.next()[0] || $slides.last()[0]  )
      }
    
      return $(ret);
    };


    // set default values for elements
    var setElementDefaults = function() {
      // set current slide as first one on startup
      // or if slides have changed and current slide is detached from tree
      if(!$current_slide || !$current_slide.parent()[0]) {
        $current_slide = $slides.first();
        $slides.hide();
        $slides.first().show();
      } 
      $nextTrigger.show();
      $prevTrigger.show();
      
      // set all slides as same height as first visible one
      $slides.width($slides.filter(':visible').first().width('100%').width());
      if(!videoIsPlaying) {
        $slides_container.height('auto');
      }
      
      updateControls();
    };

    var collectElements = function(el) {
      $container        = $(el);
      $slides           = $container.find(options.slides);
      $slides_container = $slides.parent(); 
      $nextTrigger      = $container.find(options.triggerNext);
      $prevTrigger      = $container.find(options.triggerPrev);
    };
 

    var handleVideoStart = function() {
      videoIsPlaying = true;
      $slides_container.height('auto');
    };
      
    var handleVideoStop = function() {
      videoIsPlaying = false;
      $slides_container.height('auto');
    };



    // resets 
    var resetInterval = function() {
   
      clearInterval($animationInterval);
      $animationInterval = setInterval(function() {
        triggersSlide();
      }, options.autoPlayDelay);
    };


    var triggersSlide = function(e) {
      
      if($(e.target).is('.disabled')) {
        return;
      }
      // if current element is visible. Just ensure that other scripts won't interfere this one.  
      if($current_slide.is(':visible')) {
        // triggers animation
        _this[options.animation](e);
      }
      // if triggers comes from event, stop propagagation
      if(e) {
        e.stopPropagation();
      }
    }

    var bindEvents = function() {
      $nextTrigger.on('click.' + this.namespace, triggersSlide);
      $prevTrigger.on('click.' + this.namespace, triggersSlide);
      $el.on('videoStarting.' + this.namespace, handleVideoStart);
      $el.on('videoStopped.' + this.namespace, handleVideoStop);

      if(options.autoPlay) {
        $nextTrigger.on('click.' + this.namespace, resetInterval);
        resetInterval();
      }
      
      $(window).on('resize.' + this.namespace, $.debounce(setElementDefaults, 150));
      $slides_container.find('img').on('load.' + this.namespace , $.debounce(setElementDefaults, 150));

      $el.on('contentReload.' + this.namespace, function(){
        initView();
      });
    };

    var initView = function() { 
      collectElements($el);
      setElementDefaults();
    };

    this.init = function(el) {
      $el = el;
      _this = this;
      // combine options
      $.extend(options, this.options);
      initView();
      bindEvents();
    };

    this.destroy = function() {
   
      // unbind events 
      $nextTrigger.off('click.' + this.namespace);
      $prevTrigger.off('click.' + this.namespace);
      $el.on('videoStarting.' + this.namespace);
      $el.on('videoStopped.' + this.namespace);
      $el.off('contentReload.' + this.namespace);
      $slides_container.find('img').off('load.' + this.namespace);
      $(window).off('resize.' + this.namespace);
    };
    
  });
})(jQuery);
(function($) {

  $.plugin('slideshow2', function() {

    this.VERSION = '2.0.0';

    var options,
      $wrap,
      $content,
      $prev,
      $next, 
      $arrowControls,
      $progressBarTrack,
      $navigation,
      $slides,
      $active,
      $previous,
      $loadingIndicator,
      paused,
      slideshowInterval,
      progressBarAnimationInterval, 
      activeSlideIndex,
      $slides; 
 
     this.options = {
        duration: 700,
        easing: 'easeInOutQuart',
        externalControls: false,
        arrows: false,
        navigation : true,
        autoPlay: false,
        videoAutoPlay: false,
        slideInterval: 8000,
        progressBar: false,
        progressBarHeight: '3px',
        richContent: false,
        forwardOnSlideTap: false,
        showLoadingIndicator: true, 
        runOnce: false
      };


    this.init = function(el) {
      
      options = this.options;
      paused = false;
      activeSlideIndex = -1;
   
      $wrap = $(el);
      $content = $wrap.find('div:first');
   
      $loadingIndicator = $('<div class="loading" />');
      initNavigationBar();
      initArrowNavigation();
      initLoadingIndicator();
      initProgressBar();
      initializeSlidesContent();
      bindElements();

      if (options.autoPlay) {
        startAutoPlay();
      } else {
        $navigation.find('li:first a').trigger('click');
      }
    };

    this.destroy = function($el) {

    };


    function initProgressBar() {
      if (!options.progressBar) return; // if progressbar is disabled, do nothing.
   
      $progressBarTrack = $('<div class="progress-bar-track"><div class="progress-bar" /></div');
      $progressBarTrack.css({ 'position': 'absolute', 'top': 0, 'height': options.progressBarHeight, 'width': $navigation.find('li:first-child').outerWidth() });
      $progressBarTrack.find('.progress-bar').css({ 'position': 'absolute', 'bottom': 0, 'width': 0, 'height': options.progressBarHeight, 'background': '#124191' });
      $progressBarTrack.appendTo($navigation.find('li'));
    }


    function initLoadingIndicator() {
      if(!options.showLoadingIndicator)  return;
      $loadingIndicator.hide().appendTo($content.parent());
    } 


    function initArrowNavigation() {
      // Arrow navigation

      if (options.arrows && $navigation.children().size() > 1) {
        $prev = $('<a href="#" class="next">&larr;</a>');
        $next = $('<a href="#" class="previous">&rarr;</a>');
        $arrowControls = $('<div class="arrow-controls" />');
    
        $prev.appendTo($arrowControls);
        $next.appendTo($arrowControls);
        $arrowControls.appendTo($wrap);
      }
    }
  

    function initNavigationBar() {

      // Slideshow navigation
      if (!options.externalControls) {
        $navigation = $wrap.find('ul.controls');
      } else {
        $navigation = $(options.externalControls);
      }
      // if navigationBar is disabled, remove it from DOM
      if (!options.navigation) {
        $navigation.remove();
        return;
      }
      // If there are no slides to show, stop.
      if(!$navigation.length) {
        return false;
      }

      initResponsiveImages($navigation);
  
      if ($navigation.children().length >= 2 && $navigation.children().length <= 5) {
        $navigation.addClass(['two', 'tree', 'four', 'five'][$navigation.children().length - 2])
      }

      $navigation.find('li:first').addClass('active');
    }


    function initializeSlidesContent() {
            // Create content div if it doesn't exist
      // if (!$content.length) {
      //   $content = $('<div/>').prependTo($el);
      // }

      if ($navigation.length) {
        $navigation.find('li').each(function(index) {
          var slides = $content.children(':eq(' + index + ')');
          var slide;
          if (slides.length) {
            slide = $(slides[0]);
          } else {
            slide = $('<div class="slide"></div>');
            slide.css({'height':'0', 'opacity':'0'});
            slide.appendTo($content);
          }
          slide.data('url', $(this).find('a').attr('href'));
          slide.data('class', $(this).attr('class'));
        });
      }

       // Assign slides to $content
      $slides = $content.find('.slide');
      $slides.first().show().height('auto');
    };

    function moveBy(delta) {
      if(options.runOnce && $active.index() === $slides.length-1)  {
        stopAutoPlay(); 
        moveTo(0);
        return;
      }
      if (!$active) {
        $active = $slides.first();
      }
      moveTo(($active.index() + delta) % $slides.length);
    }

    function moveTo(index) {

      // clicking active index won't do anything
      if (index == activeSlideIndex) {
        return;
      }

      activeSlideIndex = index;
      
      // if there is active player, just stop it
      if(App.Video.currentPlayer) {
        App.Video.currentPlayer.stop();
      }
      

      if ($active) {


        // $content.animate({ 'height': $active.outerHeight() }); // set height -> auto on contentLoad callback
        $active.animate({ 'opacity': 0 }, options.duration, options.easing, function() {
         
          $previous = $active.height(0);
          
          $active = $slides.eq(index % $slides.length);
          $active.css({ 'height': 'auto', 'opacity': 1  });
          
          loadContent($active);
         
          if ($active.index() === 0) {
            $navigation.children().find('.progress-bar').stop().width(0);
          }

          $navigation.children().removeClass('active').eq($active.index()).addClass('active');
          if (options.autoPlay && paused === false) {
            animateProgressBar();
          } else {
            highlightProgressBar();
          }
        });
      } else {
        // first time use case (on page load)
        $active = $slides.eq(index % $slides.length);
        loadContent($active);
        $active.css({ 'opacity': 0 }).animate({ 'opacity': 1 }, options.duration, options.easing, function() {
          $navigation.children().removeClass('active').eq($active.index()).addClass('active');
          if (options.autoPlay && paused === false) {
            animateProgressBar();
          }
        });
      }
    }

    function animateProgressBar() {

      if(!options.progressBar) return; // return if progressbar disabled
      var $activeNavigationItem = $navigation.children().eq($active.index());
      $activeNavigationItem.find('.progress-bar').stop().width(0).animate({ 'width': '100%' }, options.slideInterval, "linear");
    }

    function highlightProgressBar() {
      if(!options.progressBar) return; // return if progressbar disabled
    
      var $activeNavigationItem = $navigation.children().eq($active.index());
      $activeNavigationItem.find('.progress-bar').stop().css({ 'width': '100%' });
    };

    function loadContent(slide) {
      var url = slide.data('url');
      var type = slide.data('class');

      // $content.height($content.height('auto').height());

      // stop current player 
      if (App.Video.currentPlayer) {
        App.Video.currentPlayer.stop();
      }

      if (slide.find('img').size() === 1) {
        initResponsiveImages(slide);
        onImageReady(slide.find('img'), function() { 
          $content.css('height', '');
        });
        $loadingIndicator.hide();
      } else if (url) {
        $loadingIndicator.css({'opacity': 0 }).animate({ 'opacity': '1' }, 250, 'easeInOutQuart');
        repositionLoadingIndicator();
        $.get(url, function(data) {
          slide.css({ 'opacity': 0 });
          if (url) slide.removeData('url').append(data);
          initResponsiveImages(slide);
          onImageReady(slide.find('img'), function() { 
            $content.css('height', 'auto');
            $loadingIndicator.hide();
            slide.animate({ 'opacity': 1 });
           // call resize to alight arrows on smaller screen
            if($arrowControls) {
              onResize()
            }
            $loadingIndicator.hide();
         });
        });
      }
      contentLoadReady();
    };


    function initResponsiveImages(content) {
      
      $(content).find('.adaptive-exclude').removeClass('adaptive-exclude');
      $(window).adaptiveImages('forceRefresh');
    }


    function contentLoadReady() {
      
      if(BrowserDetect.browser === 'Explorer' && BrowserDetect.version < 9) {
        $active.find('video, object, iframe').css({position: 'absolute', left: -9999}); 
      }

      if ($previous) {
        $previous.css({ 'height': '0' });
      }

      if (options.videoAutoPlay && $active.is('.video')) {
        $active.find('a.video-trigger').trigger('click');
      }
 
      // if slide contains internal videos, align them back
      //$active.find('video').css({position: 'relative', left: 'auto'});
    }

    function stopAutoPlay() {
      clearInterval(slideshowInterval);
      clearInterval(progressBarAnimationInterval);
      $navigation.children().find('.progress-bar').stop().width(0);
      paused = true;
    };

    function startAutoPlay() {
      moveTo(0);
      slideshowInterval = setInterval(function() { moveBy(1); }, options.slideInterval);
      paused = false;
    };

    function repositionLoadingIndicator() {
      $loadingIndicator.css({ 'top': $content.outerHeight()/2 + 'px' });
    };

    function onResize() {
      $navigation.find('.progress-bar-track').width($navigation.find('li:first-child').outerWidth());
      var $visuals = $content.find('.visuals:visible:first'), top;
      if ($visuals.length) {
        top = Math.floor((($visuals.height() - $arrowControls.height()) / 2));
      }
      repositionLoadingIndicator();
      if($arrowControls && top) {
        $arrowControls.css({ 'top': top + 'px' });
      }
     // $content.css('height', $active.height() + 'px');
    };

    function unbindElements() {
      clearInterval(slideshowInterval);
      $navigation.off('click');
      $content.off('click');
      $wrap.off('click');   
    };

    function bindElements() {
      // Thumbnail click
      $navigation.on('click', 'a', function(event) {
        event.preventDefault();
        moveTo($(this).parent().index());
        if (options.autoPlay) stopAutoPlay();
      });

      if (options.forwardOnSlideTap) {

        $content.on('click', 'div.slide:not(.video)', function(event) {
          event.preventDefault();
          moveBy(1);
          if (options.autoPlay) stopAutoPlay();
        });
      }

      $wrap.on('click', 'a.previous, a.next', function(event) {
        event.preventDefault();
        var disabled = $(this).is('.disabled');
        if (!disabled) {
          if ($('html').attr('dir') === 'rtl') {
            moveBy($(this).is('.previous') ? 1 : -1);
          } else {
            moveBy($(this).is('.previous') ? -1 : 1);
          }
        }
        
        if (options.autoPlay) stopAutoPlay();
      });

      $(window).on('resize', $.debounce(onResize, 100));
    };


    function onImageReady(selector, handler) {
      var list, imageCount, imagesLeft;

      // If given a string, use it as a selector; else use what we're given
      list = typeof selector === 'string' ? $(selector) : selector;

      imagesLeft = list.size();

      // Hook up each image individually
      list.each(function(index, element) {
        if (element.complete) {
          // Already loaded, fire the handler (asynchronously)
          imagesLeft -= 1;        
          if(!imagesLeft) {
            setTimeout(function() {
                fireHandler.call(element);
            }, 10); // Won't really be 0, but close
          }
        }
        else {
          // Hook up the handler
          $(element).on('load', fireHandler);
        }
      });

      function fireHandler(event) {
        // Unbind us if we were bound
        $(this).off('load', fireHandler);


        // Call the handler
        handler.call(this);
      }
    };

  })
})(jQuery);


(function($) {

  // ---------------------------------------------------------------------------
  // Auto scroll the feeds, and click the title to change feeds.

  $.plugin('socialStream', function() {

    // This can be extended to take care of animiation direction (slide left, right, up, down), circular etc.
    this.options = {
      speed: 4000,
      circular: false,
      itemsInDisplay: 1
    };

    var $stream, options, autoPlayInterval;

    function autoScroll() {
      // Option 1
      // clearInterval(autoPlayInterval);
      // autoPlayInterval = setInterval(function(){
      //   var $firstChild = $stream.children(":first");
      //   $firstChild.animate({'marginTop': '-' + $firstChild.height()}, 'slow', function(){
      //     $firstChild.removeAttr('style');
      //     $stream.append($firstChild);
      //   });
      // }, options.speed);
      
      // Option 2
      clearInterval(autoPlayInterval);
      autoPlayInterval = setInterval(function(){
        var streamOffsetTop = $stream.offset().top;
        $stream.children('li').each(function(){

          if($(this).is(":nth-last-child(" + options.itemsInDisplay + ")")) {
            if(options.circular) {
              // scroll to top by default, this can be be extended by different directioins
              $stream.animate({scrollTop: 0}, 'slow');
            } else {
              clearInterval(autoPlayInterval);
            }
            return false;
          }

          var totop = 0;
          if ($(this).offset().top === streamOffsetTop) {
            totop = $(this).height() + $stream.scrollTop() + 1;
          // } else if($(this).offset().top > streamOffsetTop) {
          //   totop = $(this).offset().top - $stream.offset().top + $stream.scrollTop();
          // }
          } else if(($(this).offset().top + $(this).height()) > streamOffsetTop && $(this).offset().top < streamOffsetTop) {
            totop = $(this).height() +$(this).offset().top - streamOffsetTop + $stream.scrollTop() + 1;
          }

          if(totop > 0) {
            $stream.animate({scrollTop: totop}, 'slow');
            return false;
          }
          
        });

      }, options.speed);
    }

    this.init = function($el) {
      options = this.options;
      $.extend(options,this.options);

      $stream = $el;
      setTimeout(autoScroll, options.speed);
      
      $stream.on('mouseover.'+ this.namespace, function(){
        clearInterval(autoPlayInterval);
      });
      $stream.on('mouseout.'+ this.namespace, autoScroll);
      $(window).on('resize.'+ this.namespace, autoScroll);
    };

    this.destroy = function($el) {
      $stream.off('mouseover.'+ this.namespace);
      $stream.off('mouseout.'+ this.namespace);
      $(window).off('resize.'+ this.namespace);
      clearInterval(autoPlayInterval);
    };

  });




})(jQuery);
(function($) {

  $.plugin('splitToSlides', function() {

    var $window = $(window), 
        options, 
        $section, 
        $original_tiles, 
        $current_tiles,
        $tileCount,  
        $tile_container,
        $slide_before_video, 
        videoIsPlaying;

    this.options = {
      slide_class: 'slide', 
      tiles: '.content_wrapper',
      singleClass: 'single',  
      resolutions: {0: 1, 480: 2, 768: 3, 1024: 4}
    };

    var bindEvents = function() {
      $section.on('videoStarting.' + this.namespace, handleVideoStart);
      $section.on('videoStopped.' + this.namespace, handleVideoStop);
      $(window).on('resize.' + this.namespace, $.debounce(initTiles, 500));
    };

    var initTiles = function() {
      if(videoIsPlaying) {
        return;
      }
      var newTileCount = getTileCountForCurrentResolution();
      // if tilecount have not changed, dont do anything. 
      // Slides should not been changed.
      
      if(newTileCount !== $tileCount) {
        $tileCount = newTileCount; 
        $current_tiles = groupVideos($tileCount);
        updateDomSlides($current_tiles);
      }
    };
    
    /*
    * Calcules tilecount for current screen size. 
    * It uses options.resolutions to define how many tiles there should be.  
    */
    var getTileCountForCurrentResolution = function() {
      
      var ret, 
          windowSize = $(document).width();
      
      for (var reso in options.resolutions) {
        if (reso < windowSize) {
          ret = reso;
        } else {
          break;
        }
      }
    
      return Math.min(options.resolutions[ret], $original_tiles.size());
    };


    var handleVideoStart = function() {
      $slide_before_video = $section.find('.' + options.slide_class).filter(':visible');
      if( !(BrowserDetect.browser === 'IEMobile') ) {
        $slide_before_video.hide();
      }
      videoIsPlaying = true;
    };
    
    var handleVideoStop = function() {
      $slide_before_video.show();
      videoIsPlaying = false;
    };
    

    var initElements = function() {
      
      $original_tiles = $section.find(options.tiles);
      $tile_container = $original_tiles.parent();
      $original_tiles.detach();

      // if there is only one slide. Add class for it
      if($original_tiles.size() === 1) {
        $original_tiles.addClass(options.singleClass);
      }
    };

 
    var updateDomSlides = function(groupedVideos) {
      var i, len;
      // create DOM elemments
      for(i = 0, len = groupedVideos.length; i < len; i++) {
        groupedVideos[i] = $('<div class="'  +options.slide_class + '"/>').append(groupedVideos[i]);
      }
      // attach elements to dom
      $tile_container.html(groupedVideos);

      $section.trigger('contentReload');
    };


    var groupVideos = function(groupSize) {
      var isLecasyIE = (BrowserDetect.browser === 'Explorer' && BrowserDetect.version < 9);
      var i, len, index, slides = [], video, 
          width = (100 / groupSize).toFixed(isLecasyIE ? 0:2) + '%';
    
      // group elements
      for (i = 0, len = $original_tiles.length; i < len; i++) {
        
        // create group pointer
        index = parseInt(i / groupSize);
        
        // init group id not exist
        if(slides[index] === undefined) { slides[index] = []; }
         
        video = $($original_tiles[i]).clone(true);
        
        // add devided size for image
        video.width(width);

        // push element to group 
        slides[index].push(video);
      }

     return slides;
    };

    this.init = function($el) {
      $section = $el;
      options = this.options;
      initElements();
      bindEvents();
      initTiles();

      $el.show();
    };

    this.destroy = function($el) {
      $section.off('videoStopped.' + this.namespace);
      $section.off('videoStarting.' + this.namespace);
    };

 });
})(jQuery);

(function($) {

  $.plugin('stickyNavigation', function() {

    var self = this, $el, offset = 0, sticky = false;

    this.options = {
      breakpoint: 640,
      'sticky': {
        'position' : 'fixed',
        'top'      : '0',
        'z-index'  : '1000'
      },
      'normal': {
        'position' : 'static',
        'top'      : 'auto',
        'z-index'  : 'auto'
      }
    };

    function scroll() {
      var diff = offset - $(window).scrollTop(), windowWidth = $(window).width();
      if (diff < 0 && !sticky && windowWidth > parseInt(self.options.breakpoint-1, 10)) {
        $el.css(self.options.sticky);
        sticky = true;
        resize();
      } else if (diff >= 0 && sticky) {
        $el.css(self.options.normal);
        sticky = false;
        resize();
      } else if (diff < 0 && sticky && windowWidth < self.options.breakpoint) {
          $el.css(self.options.normal);
          sticky = false;
          resize();
      }
    }

    function resize() {
      if (sticky) {
        offset = $el.css('position', self.options.normal.position).offset().top;
        $el.css('position', self.options.sticky.position);
      } else {
        offset = $el.offset().top;
      }
      $el.css({
        'width': sticky ? $el.parent().width() + 'px' : 'auto'
      }).next().css({
        'padding-top': sticky ? $el.height() + 'px' : '0'
      });
    }

    function onClick(event) {
      var $target = $($(this).attr('href'));
//      $('html,body').animate({'scrollTop': $target.position().top - $el.height()}, 300, resize);
      $('html,body').animate({'scrollTop': $target.position().top - 5}, 300, resize);
      return false;
    }

    this.init = function(el) {
      $el = el;
      $el.on('click.' + this.namespace, 'a', onClick);
      $(window).on('scroll.' + this.namespace, $.debounce(scroll, 10)).trigger('scroll');
      $(window).on('resize.' + this.namespace, resize);
    };

    this.destroy = function($el) {
      $el.off('click.' + this.namespace);
      $(window).off('scroll.' + this.namespace);
      $(window).off('resize.' + this.namespace);
    };

  });

})(jQuery);

(function($) {

  $.plugin('swipe', function() {

    var options = {
      on_drag_start: function() {},
      on_drag:        function() {},
      on_drag_stop:  function() {},
      preventDefaultEvents: true, 
      debug: false
    };
    
    var $el,
        startX, 
        startY, 
        pos_diff_X = 0, 
        pos_diff_Y = 0, 
        trackable, 
        isMoving = false, 
        speedSamplerTimer,
        current_speed_X = 0,
        current_speed_Y = 0, 
        pluginBinded = false, 
        usePointEvents = false;


    this.init = function(el) {
      $el = $(el);
      usePointEvents = window.navigator.msPointerEnabled;

      $.extend(options, this.options);

      this.bind();
    }

    this.bind = function() {
      if (pluginBinded) {
        return;
      }

      if(usePointEvents) {
        $el.on("MSPointerDown." + this.namespace, onTouchStart);
        $el.on('MSPointerUp.' + this.namespace, onTouchEnd);
      } else {
        $el.on('touchstart.' + this.namespace , onTouchStart);
        $el.on('touchend.' + this.namespace, onTouchEnd);
      }
      
      pluginBinded = true;
    }

    this.unbind = function() {

      $el.off('touchstart.' + this.namespace);
      $el.off('touchend.' + this.namespace);
      $el.off('MSPointerDown.' + this.namespace);
      $el.off('MSPointerUp.' + this.namespace);
      pluginBinded = false;
    }

    function cancelTouch() {
    
      $el.off('touchmove.' + this.namespace);
      $el.off('MSPointerMove.' + this.namespace);
      
      startX = null;
      isMoving = false;
      clearInterval(speedSamplerTimer);
    }

    function onTouchEnd() {
      cancelTouch();
      options.on_drag_stop(pos_diff_X, pos_diff_Y);
    }


    function onTouchMove(e) {
      e.preventDefault();
      if (isMoving) {
        var x = trackable(e).pageX;
        var y = trackable(e).pageY;
        pos_diff_X = startX - x;
        pos_diff_Y = startY - y;
        options.on_drag(pos_diff_X, pos_diff_Y)
      }
    }
    
    var trackable = function(e) {
      
      if(e.originalEvent) {
        e = e.originalEvent;
      }

      if (e.targetTouches && e.targetTouches.length === 1) {
        return e.touches[0];
      } else {
        return e;
      }
    }
    
    function onTouchStart(e) {
      // e.preventDefault();
      startX = trackable(e).pageX;
      startY = trackable(e).pageY;
      isMoving = true;

      if(usePointEvents) {
        $el.on('MSPointerMove.' + this.namespace, onTouchMove);
      } else {
        $el.on('touchmove.' + this.namespace, onTouchMove);
      }
      
      options.on_drag_start();
    }
  });

})(jQuery);
(function($) {

  $.plugin('tooltip', function() {

    var $window = $(window), options, $section, $tooltip, $targetDiv, $root;

    this.options = {
    	tooltipOffset: 10,
      debounceTime: 150
    };

    var positionTooltip = function() {

      // calculate left and top position
      var tooltipOffsetTop = parseInt($section.offset().top - parseInt($tooltip.outerHeight(), 10), 10) - parseInt($section.outerHeight()/4, 10);
      var tooltipOffsetLeft = parseInt($section.offset().left-$tooltip.outerWidth()+$section.outerWidth()/2, 10);
      
      // align tooltip by defined values
      $tooltip.css({ 'top': tooltipOffsetTop + 'px', 'left': tooltipOffsetLeft }).hide();
    };

   
    var buildTooltip = function() {

      // try to define get id from trigger id 
      var id = $section.attr('id');
      id = ( id === undefined ? '' : ('-' + id) );

      // build tooltip and create unique id for it
      $tooltip = $('<div id="tooltip-'+ $targetDiv.attr('id') + id + '" class="tooltip" />').hide();
      $tooltip.prepend($targetDiv.clone().show());
      
      // put it to body
      $('body').append($tooltip);
    };

    
    var bindEvents = function() {

      $section.on('click', function() { $tooltip.toggle(); });
      $tooltip.on('click', function() { $tooltip.toggle(); });
      $window.on('resize.' + this.namespace, $.debounce(positionTooltip, options.debounceTime));
    };


    this.init = function($el) {

      // collect elements
      options = this.options;
      $section = $el;
      $targetDiv = $($section.attr('href')).hide();
      
      // build and bind
      buildTooltip();
      positionTooltip();
      bindEvents();
    };


    this.destroy = function($el) {
      //Destroys here
      $window.off('resize.' + this.namespace);
    };


  });
})(jQuery);
(function( $ ){

  $.plugin('touchScroll', function() {

  // $.fn.touchScroll = function( params ) {
     
    var $section,
        
      options = { 
        // controls
        triggerNext: '.control.next',
        triggerPrev: '.control.prev',
        controlTiles: '.controls > li',
        // existing elements
        viewport_class: '.slides-viewport',
        slides: '.slide',
        // generated elements
        scroll_container_class: 'scroll_container', 
        snapToElements: false, 
        minResolution: 0,
        maxResolution: 99999
      }, 

      $component_viewport,
      $scroll_container,
      $slides,
      $elementsToSnap, 
      $trigger_next,
      $trigger_prev,
      $control_tiles,
      elementsToSnapTimer, 
      component_viewport_width, 
      tilesOnViewport,
      scrollDirection = 0, // 0 undefined, 1 horizonal, 2 vertical. This for optimize moveEvents, so it can use numeral comparison, not string compare. 
      $last_slide, // use to calculate limits of scrill
      $currentX = 0,
      element_pos,
      $end_pos,
      $current_slide,
      isLecasyIE = (BrowserDetect.browser == 'Explorer' && BrowserDetect.version <= 8), 
      gesturesEnabled = false;



    var pluginDisabled = function() {
      var current_document_width = $(document).width();
   
      return (options.minResolution && current_document_width < options.minResolution) 
          || (options.maxResolution && current_document_width > options.maxResolution);
    }

    var collectElements = function() {

      $scroll_container = $('<div class="'+ options.scroll_container_class +'"/>');
      $component_viewport = $section.find(options.viewport_class);
      $slides = $component_viewport.find(options.slides);      
      $last_slide = $slides.last();

      $trigger_next = $section.find(options.triggerNext);
      $trigger_prev = $section.find(options.triggerPrev);
      $control_tiles = $section.find(options.controlTiles);   

      $slides.detach().appendTo($scroll_container);
      $component_viewport.append($scroll_container);

      if(options.snapToElements) {
        $elementsToSnap = $scroll_container.find(options.snapToElements);
      }

    };

    var setElementDefaults = function() {

      component_viewport_width = parseInt($component_viewport.width());
      tilesOnViewport = getTileCountForCurrentResolution();
      $end_pos = parseInt(($slides.size()-1) / tilesOnViewport) * component_viewport_width * -1;
      
      var newWidth = parseInt(parseInt($component_viewport.width()) / tilesOnViewport);
      $slides.width(newWidth);
  
      $component_viewport.hide();
      // $component_viewport.hide().addClass('touchScrollViewport');
      
      $slides.css({ 'float': 'left', 'display': 'block' });
      if($slides.size() === 1) {
        $slides.addClass('single');
      }

      $component_viewport.css({'position': 'relative', 'overflow': 'hidden'}).show();
      
      if(pluginDisabled()) {
        $scroll_container.width('auto');
        $scroll_container.stop().css('margin-left', '0');
        setLumiaGesturesEnabled(true);
      } else {

        $scroll_container.width(component_viewport_width * $slides.size());
        setLumiaGesturesEnabled(false);
      }
      setControlDefaults();
    };

    var setLumiaGesturesEnabled = function(enabled) {
      $component_viewport.css('-ms-touch-action', enabled ? 'auto' : 'none');
      gesturesEnabled = enabled;
    }

    var initTouch = function() {
      if (pluginDisabled()) {
        $component_viewport.swipe('unbind');
      } else {
        $component_viewport.swipe('bind');
      }   
    }

    var setControlDefaults = function() {
      
      $trigger_next.toggleClass('disabled', $currentX === $end_pos);
      $trigger_prev.toggleClass('disabled', $currentX === 0);
      var active_index = $slides.index(getClosestElementToSnap());
      $($control_tiles.removeClass('active').get(active_index)).addClass('active');
    }

    var startContainerMove = function() {
      clearTimeout(elementsToSnapTimer);
      $scroll_container.stop();
    }

    var moveContainer = function(pos_X, pos_Y) {

      switch (scrollDirection) {
        case 0:
          scrollDirection = (Math.abs(pos_X) > Math.abs(pos_Y)) ? 1:2;
          // setLumiaGesturesEnabled(scrollDirection === 2);
          moveContainer(pos_X, pos_Y);
          break;
        case 1:
          $scroll_container.css('margin-left', $currentX - pos_X);
          break;
        case 2:
          // if(!gesturesEnabled) {
            window.scroll(window.scrollX, $(window).scrollTop() + pos_Y);
          // }
          break;
      }
    }

    var disableGesturesForaWhite = function() {
      // setTimeout(function(){setLumiaGesturesEnabled(false)}, 100);
    }

    var stopContainerMove = function(pos_diff_X, pos_diff_Y) {
      setLumiaGesturesEnabled(false);
      
      if(scrollDirection === 1) {
        $currentX -= pos_diff_X;
      }
      scrollDirection = 0;
      
      adjustContainerPosition(pos_diff_X);
      setControlDefaults();
    }

    var adjustContainerPosition = function(pos_diff_X) {
      if(($currentX) > 0 ) {
        snapToPosition(0);
      } else if($end_pos > $currentX) {
        snapToPosition($end_pos);
      } else {
        if(options.snapToElements) {
          clearTimeout(elementsToSnapTimer);
          elementsToSnapTimer = setTimeout(function(){
            snapToElement(getClosestElementToSnap(), setControlDefaults);
          }, 750);
        }
      }
    }

    var getClosestElementToSnap = function() {
      var i, len = $elementsToSnap.size(), 
        snapTo = 999999,
        element, 
        prev_element;        

      for(i = 0; i < len; i++) {
      
        element = $($elementsToSnap[i]);
        element_pos = element.position().left;

        if(snapTo > Math.abs(element_pos)) {
          snapTo = Math.abs(element_pos);
          prev_element = element;       
        } else {
          return prev_element;
       }
      }
      return $elementsToSnap.last();
    }

    var snapToElement = function(elem, callback) {
      if($elementsToSnap.index(elem) === ($slides.size() - $slides.size() % tilesOnViewport) - 1) {
        snapToPosition($end_pos, callback);
      } else {
        snapToPosition($scroll_container.offset().left - $component_viewport.offset().left - elem.position().left, callback);
      }
    }

    var snapToPosition = function(pos_X, callback) {
      $scroll_container.stop().animate({'margin-left':  pos_X}, 500, 'easeInOutQuart', callback);
      $currentX = pos_X;
    }

    /*
    * Calcules tilecount for current screen size. 
    * It uses options.resolutions to define how many tiles there should be.  
    */
    var getTileCountForCurrentResolution = function() {
      
      var ret, 
          windowSize = $(document).width();
      
      for (var reso in options.resolutions) {
        if (reso < windowSize) {
          ret = reso;
        } else {
          break;
        }
      }
      return Math.min(options.resolutions[ret], $slides.size());
    };

    var triggerNextSlide = function(e) {
      if(!$trigger_next.is('.disabled')){
        clearTimeout(elementsToSnapTimer);
        snapToPosition($currentX - component_viewport_width, function(){stopContainerMove(0,0)});
      }
      e.preventDefault();
    }

    var triggerPrevSlide = function(e) {
      if(!$trigger_prev.is('.disabled')){
        clearTimeout(elementsToSnapTimer);
        snapToPosition($currentX + component_viewport_width, function(){stopContainerMove(0,0)});
      }
      e.preventDefault();
     }


    var triggerFromControl = function(e) {
      if(e && e.data) {
        snapToElement($($slides.get(e.data.index)), setControlDefaults);
      }
      e.preventDefault();
    }

    var onRezise = function() {

      setElementDefaults();
      if (!isLecasyIE) {
        snapToElement(getClosestElementToSnap())
      }
      initTouch();
    }

    var onVideoStart = function() {
      $scroll_container.hide();     
    }
    
    var onVideoStop = function() {
      $scroll_container.show();     
    }

    var bindEvents = function() {

      $component_viewport.swipe({
         on_drag_start: startContainerMove, 
         on_drag: moveContainer,
         on_drag_stop: stopContainerMove,
         preventDefaultEvents: true
      }); 

      $trigger_next.on('click', triggerNextSlide);
      $trigger_prev.on('click', triggerPrevSlide);
      $control_tiles.each(function(i){
        $(this).on('click', {index: i}, triggerFromControl); 
      });
      
      $section.on('videoStarting', onVideoStart);
      $section.on('videoStopped', onVideoStop);
      $(window).on('resize', $.debounce(onRezise, 100));
    }


    this.init = function(el) {
     
      $section = $(el);
      
      $.extend(options, this.options);

      collectElements();
      setElementDefaults();
      bindEvents();
      initTouch();
      $section.show();
    };

  });
})( jQuery );
(function($) {

  $.plugin('transitionOrAnimate', function() {

    var $window = $(window), options, $this;

    this.options = {
      classNames: '',
      properties: {},
      duration: '150',
      callback: function(){}
    };

    var cb = function() {
      options.callback.apply($this, arguments);
    };

    this.init = function($el) {
      var transitionEvent;
      $this = $el;
      options = this.options;
      
      if('ontransitionend' in window) {
        transitionEvent = 'transitionend';
      } else if('onwebkittransitionend' in window) {
        transitionEvent = 'webkitTransitionEnd';
      } else if('onotransitionend' in $el.get(0) || navigator.appName == 'Opera') {
        transitionEvent = 'oTransitionEnd';
      } else {
        transitionEvent = false;
      }
      
      // if transition event found, it is suported. 
      // Also start listen to it for callback triggering
      if (transitionEvent) {
        $el.addClass(options.classNames).on(transitionEvent, cb);
        $el.css(options.properties);
      
      } else { // otherwise use to jQuery animate
        $el.animate(options.properties, options.duration, cb);
      }
    };

    this.destroy = function($el) {
      // Unbinds
    };

  });


    /*******************************************\
      THIS JUST TRANSITION EVENT SPIKING
    \*******************************************/
    $.fn.extend({ 
       
      //This is where you write your plugin's name
      customAnimate: function(_prop, speed, easing, callback) {

          var defaults = {
              transition_class_prefix: 'transition-ease' 
            }, 
            prop = {
              speed: 'slow'
            }; 

          $.extend(prop, _prop);


          if(!Modernizr.csstransitions) {
              return jQuery.fn.animate.apply(this, arguments);
          } else {
            //Iterate over the current set of matched elements
            return this.each(function() {
              
              // pick first elemenet
              var $el = $(this); //  might need loop to handle all 

              // start listen event to trigger callpack
              var cb = new transitionCallback(($.isFunction(easing) ? easing : callback));
              $el.on(transitionEndEventName() + '.customAnimate', cb);
              
              // add class that defines animation type
              $el.addClass(defaults.transition_class_prefix + '-' + prop.speed);    
              
              // trigger animate
              $el.css(prop);
          
            });
            return $el;
          }
        
          function transitionCallback(cb) {
            var callback = cb;
            
            return function(e){
              var $el = $(e.target);
              $el.removeClass(defaults.transition_class_prefix + '-' + prop.speed); 
              if($.isFunction(callback))callback();
              e.stopPropagation();
              $el.off(transitionEndEventName()+ '.customAnimate');
            };
          };

          function transitionEndEventName() {

            var transEndEventNames = {
              'WebkitTransition' : 'webkitTransitionEnd',
              'MozTransition'    : 'transitionend',
              'OTransition'      : 'oTransitionEnd',
              'msTransition'     : 'MSTransitionEnd',
              'transition'       : 'transitionend'
            };
            return transEndEventNames[ Modernizr.prefixed('transition') ];
        };
      }
    });
   

     
 
  
})(jQuery);



window.App       = window.App || {};
window.App.Video = window.App.Video || {};

BrowserDetect.dataOS.unshift({
  string: navigator.userAgent,
  subString: 'iPad',
  identity: 'iPad'
});
BrowserDetect.init();


// TODO:
// * hidden player for certain browsers
//   and destroy references when hidden ?
// * conditional controls template
// * store player in data

(function($) {
  'use strict';

  /**
   * jQuery video plugin (v2)
   *
   * Convert DOM element into video player.
   * Uses href or data-video-url attribute to determine player type.
   * Find all possible options listed below.
   *
   * The player triggers events on the element:
   * - `videoready` when the player is set-up and all dependencies are loaded
   * - `videostart` when the player has begun playback
   * - `videostop` when the player has stopped or paused playback
   *
   * @example
   *  $('a.video').xvideo({ pluginVersion: 'latest' });
   *
   */
  $.plugin('xvideo', function() {
    this.VERSION = '2.0.0';

    var player, $playerUI, $overlay, self = this;

    this.options = {
      // overrides the URL set via $el's href attribute (if set)
      url: null,
      // show the player when $el is clicked or
      // automatically once the player is ready
      showOnClick: true,
      // automatically start playback
      autoStart: true,
      // show controls (play, pause etc.) for the player
      showNativeControls: true,
      // show the close button
      showCloseButton: true,
      // hide the player when the ESC key is pressed
      hideOnESC: true,
      // display an overlay over page to focus on video
      showOverlay: true,
      // hide $el when showing player
      hideTrigger: false,
      // close player when the overlay is clicked
      closeViaClickOnOverlay: true,
      // the player template, variables will be subsituted by
      // the player instance:
      // - playerID: a unique identifier for each player instance
      template: ['<div class="responsive-video">',
                   '<div id="%playerID%"></div>',
                   '<a class="close"></a>',
                 '</div>'].join(''),
      // the target for the template rendering
      // by default a div with class `video-player` is inserted after
      // $el and used
      target: null,
      // if an overlay is shown, assign this CSS class
      overlayClass: 'responsive-video-overlay',
      // if no $target has been supplied,
      // use this CSS class for the default div
      targetClass: 'video-player',
      // add this class to the trigger if the browser
      // can show videos inline
      triggerClass: 'video-trigger'
    };

    /**
     * Initialize, pseudo constructor through $.plugin
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.init = function($el) {
      //console.log('xvideo init');
      // if the current browser can't show our player
      // don't do anything and let the browser take over
      //if (!browserCan('showInlinePlayer')) { alert('Nope!'); return; }
      //if (!browserCan('showInlinePlayer')) { return; }
      
      // if the browser can't auto start the video (iOS) don't even
      // try as this might e.g. hide the play button completely
      if (!browserCan('autoStart')) { this.options.autoStart = false; }

      //if (!browserCan('autoStart')) { console.log('no autostart'); }

      // select a player class and initialize based on URL
      this.player = createPlayerForURL({
        videoURL      : this.options.url || determineURLforElement($el),
        videoTitle    : determineVideoTitleForElement($el),
        template      : this.options.template,
        namespace     : this.namespace,
        showControls  : this.options.showNativeControls,
        autoStart     : this.options.autoStart,
        data          : $el.data('video')
      });

      // delegate player events to UI
      $.each(['ready', 'start', 'stop', 'mute', 'unmute'], function(i, event) {
        self.player.on('player' + event, function(e) {
          self.$el.trigger(e.type.replace(/^player/, 'video'), [$playerUI, self.$el]);
          //self.$el.trigger(e.type.replace(/^player/, 'video'), [$playerUI]);
        });
      });

      // initialize the UI once the player is good to go
      this.player.on('playerready', initPlayerUI);

      // when started, stop any other currently running player
      this.player.on('playerstart', function() {
        stopCurrent();
        App.Video.currentPlayer = self;
      });

      // create all necessary DOM elements, insert them etc.
      createPlayerUI();

      // set-up the player
      this.player.build();

      // track how much of the video a user has been watching
      new App.Video.Analytics(this.player);
    };

    /**
     * Hide the UI and stop the player
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.hide = function($el) {
      this.player.stop();
      if (this.options.showOnClick) { hide(); }
    };

    /**
     * Start the playback
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.start = function($el) {
      this.player.start();
    };

    /**
     * Stop the playback
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.stop = function($el) {
      this.player.pause();
    };

    /**
     * Toggle the playback
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.toggle = function($el) {
      this.player.isPlaying() ? this.player.pause() : this.player.start();
    };

    /**
     * Set volume to 0
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.mute = function($el) {
      this.player.mute();
      //console.log('mute method');
    };

    /**
     * Set volume back to level before muting
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.unmute = function($el) {
      this.player.unmute();
      //console.log('unmute method');
    };

    /**
     * Toggle the volume between muted and unmuted
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.volumeToggle = function($el) {
      this.player.isMuted() ? this.player.unmute() : this.player.mute();
      //console.log('volumeToggle method');
    };

    /**
     * Show the player UI
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.show = function($el) {
      return show();
    };

    /**
     * Hide the player UI
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.hide = function($el) {
      return hide();
    };

    /**
     * Enter fullscreen mode
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.enterFullscreen = function($el) {
      $playerUI.fullScreen(true);
      //console.log('enter fullscreen...');
    };
    
    /**
     * Exit fullscreen mode
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.exitFullscreen = function($el) {
      $playerUI.fullScreen(false);
      //console.log('exit fullscreen...');
    };

     /**
     * Toggle fullscreen mode
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.toggleFullscreen = function($el) {
      $playerUI.fullScreen() ? this.exitFullscreen() : this.enterFullscreen();
    };

    /**
     * Remove all events and UI created by the plugin
     * @param {jQuery object} $el - The element the plugin is executed on
     */
    this.destroy = function($el) {
      $el.off('click.' + this.namespace);
      $(document).off('keyup.key27' + this.namespace);
      $playerUI.remove();
      $overlay.remove();
      // remove analytics ?
      // remove player reference ?
    };

    // -------------------------------------------------------------------------

    // if there's another player open and running, stop (and hide it)
    function stopCurrent() {
      if (App.Video.currentPlayer && App.Video.currentPlayer != self) {
        App.Video.currentPlayer.stop();
        App.Video.currentPlayer.hide();
      }
    }

    // create UI and insert it into $target
    function createPlayerUI() {
      var $target = $(self.options.target);
      if (!self.options.target) {
        $target = $('<div/>', { 'class': self.options.targetClass });
        $target.insertAfter(self.$el);
      }

      $playerUI = $(renderPlayerUI());
      $target.append($playerUI);
      hide();

      self.$el.addClass(self.options.triggerClass);

      if (self.options.showOverlay)     { createOverlay();     }
      if (self.options.showCloseButton) { enableCloseButton(); }
    }

    // show and start the player directly or bind click events to do so
    function initPlayerUI() {
      // show the player only on click
       if (self.options.showOnClick) {
        self.$el.on('click.' + self.namespace, function(e) {
          e.preventDefault();
          show();
          if (self.options.autoStart) { self.player.start(); }
        });

      // inline player
      } else {

        // start the player if auto start is enabled
        if (self.options.autoStart) {
          self.player.start();

        // if autostart is not enabled, start the player
        // also when the trigger is clicked
        } else {
          self.$el.on('click.' + self.namespace, function(e) {
            e.preventDefault();
            self.toggle();
          });
        }
        if (!self.options.showOnClick) { show(); }
      }

      // // bind control events
      // $playerUI.on('click', function(e) {
      //   e.preventDefault();
      //   console.log(e.target);
      //   for (var id in self.options.eventMap) {
      //     if ($(e.target).hasClass(id)) {
      //       self.player[self.options.eventMap[id]].call(self.player);
      //     }
      //   }
      // });


      // bind control events
      var respondWith = function(action) {
        return function(e) {
          e.preventDefault();
          self.player[action].call(self.player);
        };
      };
       
      $playerUI
        .on('click', '.start',  respondWith('start'))
        .on('click', '.stop',   respondWith('stop'))
        .on('click', '.pause',  respondWith('pause'))
        .on('click', '.mute',   respondWith('mute'))
        .on('click', '.unmute', respondWith('unmute'))
        .on('click', '.enter-fullscreen', self.enterFullscreen)
        .on('click', '.exit-fullscreen', self.exitFullscreen)
        .on('click', '.toggle', function(e) {
          e.preventDefault();
          var action = self.player.isPlaying() ? 'pause' : 'start';
          self.player[action].call(self.player);
        })
        .on('click', '.volume-toggle', function(e) {
          e.preventDefault();
          var action = self.player.isMuted() ? 'unmute' : 'mute';
          self.player[action].call(self.player);
          //console.log(action);
        })
        .on('click', '.fullscreen-toggle', function(e) {
          e.preventDefault();
          $(document).fullScreen() ? self.exitFullscreen() : self.enterFullscreen();
        });


      $(document).on('fullscreenchange', function() {
        var event = $playerUI.fullScreen() ? 'videoenterfullscreen' : 'videoexitfullscreen';
        self.$el.trigger(event, [$playerUI]);
        //console.log('fullscreenchange called...');
        //console.log('fsc event: ' + event);
      });

      // stop + hide when ESC key pressed
      if (self.options.hideOnESC) {
        $(document).on('keyup.key27' + self.namespace, self.hide.bind(self));
      }
    }




    // append overlay and attach events
    function createOverlay() {
      $overlay = $('<div/>', { 'class': self.options.overlayClass });
      $('#main').prepend($overlay.hide());

      if (self.options.closeViaClickOnOverlay) {
        $overlay.on('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          self.hide();
        });
      }
    }

    // show the close button and attach event
    function enableCloseButton() {
      $playerUI
        .find('a.close')
        .show()
        .on('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          self.hide();
        });
    }

    // render the UI using the template (via option) and templateData (via player)
    function renderPlayerUI() {
      var data = self.player.templateData();
      return self.options.template.replace(/%([^%]+)%/g, function(_, key) {
        return data.hasOwnProperty(key) ? data[key] : '';
      });
    }

    function show() {
      //if (self.options.showOnClick) { $playerUI.show(); }
      if (BrowserDetect.version === 8) {
        if (self.options.showOnClick) { $playerUI.css({ 'height': 'auto', 'width': 'auto', 'padding-bottom': '56.25%', 'display': 'block' }); }
      } else {
        if (self.options.showOnClick) { $playerUI.css({ 'height': 'auto', 'width': 'auto', 'padding-bottom': '56.25%', 'opacity': '1' }); }
      }  
      if ($overlay) {
        $overlay.show();
        if (browserCan('fade')) { $overlay.animate({ 'opacity': 0.85 }); }
        scrollToPlayer();
      }
      if (self.options.hideTrigger) { self.$el.hide();  }
    }

    function hide() {
      //if (self.options.showOnClick) { $playerUI.hide(); }
      if (BrowserDetect.version === 8) {
        if (self.options.showOnClick) { $playerUI.css({ 'height': '10px', 'width': '10px', 'padding-bottom': '0', 'display': 'none' }); }
      } else {   
        if (self.options.showOnClick) { $playerUI.css({ 'height': '10px', 'width': '10px', 'padding-bottom': '0', 'opacity': '0' }); }
      }  
      if ($overlay)                 { $overlay.hide();  }
      if (self.player.isPlaying())  { self.stop();      }
      if (self.options.hideTrigger) { self.$el.show();  }
    }

    function scrollToPlayer() {
      //console.log('top: ' + self.$el.offset().top);
      // Calculate the height based on width and the 16:9 ratio
      // var height    = parseInt($playerUI.outerWidth()*0.5625, 10),
      //     offset    = $playerUI.offset().top,
      //     // height-48 is the height - control height
      //     scrollTop = offset - Math.max(($(window).height() - (height+48)) / 2, 0);

      // Get the trigger position
      var triggerPosition = parseInt(self.$el.offset().top, 10),
          windowHeight = $(window).height(),
          playerHeight = parseInt($playerUI.outerWidth()*0.5625, 10),
          scrollTop = triggerPosition,
          triggerAdjustment = 10,
          documentAdjustment = 16;

      $('.overlay-video-container').css({ 'top': triggerPosition - triggerAdjustment + 'px' });

      scrollTop = (triggerPosition + parseInt(documentAdjustment, 10)) - (parseInt(windowHeight/2, 10) - parseInt(playerHeight/2, 10));

      $('html, body').animate({ 'scrollTop': scrollTop });
    }

    function createPlayerForURL(options) {
      var player;
      if (/youtube/.test(options.videoURL)) {

        // options.autoStart = false;
        // console.log(options);

        player = new App.Video.Players.Youtube(options);

        
      /* Further example:
      } else if (/vimeo/.test(options.videoURL)) {
        player = new App.Video.Players.Vimeo(options);
      */
      } else {
        player = new App.Video.Players.VideoJS(options);
      }
      return player;
    }

    // find video URL for $el either through it's href
    // or data-video-url attributes
    function determineURLforElement($el) {
      var url;
      if ($el.is('a') && $el.attr('href') !== undefined) {
        url = $el.attr('href');
      } else if ($el.data('video-url') !== undefined) {
        url = $el.data('video-url');
      }
      return url;
    }

    function determineVideoTitleForElement($el) {
      var title;
      if ($el.attr('title') !== undefined) {
        title = $el.attr('title');
      } else {
        title = determineURLforElement($el);
      }
      return title;
    }

    // wrapper for browser detection for brevity and
    // improved readability
    function browserCan(action) {
      var is = BrowserDetect;
      switch (action) {
        case 'autoStart':
          return !($.inArray(is.OS, ['iPhone/iPod', 'iPad']) > -1);
          break;
        case 'showInlinePlayer':
          return !(is.browser === 'IEMobile');
          break;
        case 'fade':
          return !(is.browser === 'Explorer' && is.version === 7);
          break;
        default:
          return true;
      }
      return true;
    }

  });

})(jQuery);
var currentlyActiveYTPlayer = null,
  isYTApiLoaded = false,
  ytVideoCount = 0;

(function ($) {
  "use strict";
  $.fn.video = function (options) {
    var context = this,
      ytVideoNumber = ytVideoCount++,
    $video_footer = undefined;
    this.playerRef = null;
    
    
    this.insertContent = function (_self) {
      var $clickedTile = _self.parent(),
        $overlay = $('<div class="responsive-video-overlay"><div>'),
        _origScrollTop = $(window).scrollTop(),
        $link = ($clickedTile.find('a.tile-content-wrapper, a.youtube-link').size() === 1) ? $clickedTile.find('a.tile-content-wrapper, a.youtube-link') : _self.find('a.tile-content-wrapper, a.youtube-link');

      // TODO: figure out why is this run in some devices also when no videos are being initialized
      // break if no videoId is found - happens in Symbians sometimes
      if ((typeof(options.videoId) === 'undefined') && (typeof($link.attr('href')) === 'undefined')) {
        return false;
      }

      var videoId = (typeof(options.videoId) !== 'undefined') ? options.videoId : $link.attr('href'),
        videoId = videoId.indexOf("http") > -1 ? videoId.match(/[\\?&]v=([^&#]*)/)[1] : videoId,
        $tileVideoPlayer = $(
          '<div class="video-player"> \
            <div class="responsive-video"> \
              <div id="ytvideo-' + videoId + '-' + ytVideoNumber + '"></div> \
              <a class="close"></a> \
            </div> \
          </div>'),
        videoTitle = $link.attr('title'),
        $target = $clickedTile,
        videoTrackedUntil = -1,
        videoTracking = false,
        playerHidden = (BrowserDetect.browser === 'IEMobile') ? true : false,
        doFade = (BrowserDetect.browser === 'Explorer' && BrowserDetect.version == 7) ? false : true,
        player;

      // pause any currently playing videos before creating a new one
      if (currentlyActiveYTPlayer) {
        try {
          currentlyActiveYTPlayer.pauseVideo();
        } catch (e) {
          // noop -> contentWindow of current player might be thrown away
        } 
      }

      // Override target element for the video if specified
      if ($(options.targetParent).length > 0) {
        $target = $($target.parents(options.targetParent).get(0));
      }

      // Override target element for the video if specified
      if ($(options.target).length > 0) {
        $target = $(options.target);
      }
      $video_footer = _self.find('.video-footer');

      if (BrowserDetect.browser === 'Symbian') {
        var mobileLink = 'http://m.youtube.com/#/watch?v=' + videoId;
        if (!options.overlay) {
          $tileVideoPlayer = $('<div class="video-player" id="video-wrapper"><div class="responsive-video" style="overflow:hidden;"><a href="'+
             mobileLink+'"><img class="yt-mobile-thumb" src="//i.ytimg.com/vi/'+videoId+'/hqdefault.jpg" style="margin-top: -11%;"></img></a></div></div>'),
          $target.append($tileVideoPlayer);
          $target.on('click', function (event) {
            event.stopPropagation();
            event.preventDefault();
            window.location.href=$target.find('a').attr('href');
          });
        } else {
          $link.attr('href', mobileLink);
          $link.removeAttr('target');
        }
        return false;
      }

      if (options.hideTrigger && !playerHidden) {
        _self.hide();
      }

      loadYTApi();

      if (!playerHidden) {
        $target.addClass('video-player-tile');
      } else if (playerHidden && options.overlay) {
        $tileVideoPlayer.hide();
      }

      // Create the player
      if ($(window).width() > 640) {
        $target.prepend($video_footer);
        $target.children('.video-footer').show();
      }
      $target.prepend($tileVideoPlayer);
      
      function closeAndCleanup() {
        destroyPlayerReferences();
        $target.removeClass('video-player-tile');
        $tileVideoPlayer.remove();
        $overlay.remove();
        $('.aside-navigation').show();
        if ($(window).width() > 640) {
          _self.append($video_footer);
          if ($target.children('.video-footer').length > 0) {
            $target.children('.video-footer').hide();
          } else {
            $video_footer.hide();
          }
        }
        _self.show();
        $(window).scrollTop(_origScrollTop);
        $video_footer.hide();
      }
      
      // create overlay and scroll to middle of the screen
      if (options.overlay && !playerHidden) {
        if (doFade) {
          $('.aside-navigation').hide();
          $(options.overlayTarget || '#main').prepend($overlay);
          $overlay.animate({ 'opacity': '.85' });
          $target.animate({ 'opacity': '1' });
        }
        $tileVideoPlayer.find('a.close').show();
        setTimeout(setPlayPositionToMiddle, 150);

        // esc key will also shut down the player
        $(document).bind("keyup.key27", function(event) {
          $(document).unbind("keyup.key27");
          closeAndCleanup();
        });
      }

      // Destroy the video when overlay/close button is clicked
      $('.responsive-video a.close, .responsive-video-overlay').on('click', function (event) {
        $target.trigger('videoStopped');
        closeAndCleanup();
        event.preventDefault();
      });

      function setPlayPositionToMiddle() {
        var width = $target.find('.responsive-video').width(),
          height = width * 9 / 16;
        $('html,body').animate({'scrollTop': Math.floor($tileVideoPlayer.offset().top - Math.max(($(window).height() - height) / 2, 0)) });
      };

      function destroyPlayerReferences() {
        $(window).off('resize.video');
        player.destroy();
        player = undefined;
        _self.playerRef = undefined;
        currentlyActiveYTPlayer = null;
      }

      function onPlayerReady(e) {
        _self.playerRef = e.target;
        _self.data('playerRef', e.target);

        var iOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/g));

        if (currentlyActiveYTPlayer) {
          currentlyActiveYTPlayer.pauseVideo();
        }

        currentlyActiveYTPlayer = e.target;
        if (options.overlay && !iOS) {
          e.target.playVideo();
        }

        // destroy player reference 2sec after video starts playing, this is required in devices that launch video in native player
        if (playerHidden && options.overlay) {
          setTimeout(destroyPlayerReferences, 2000);
        }
      }

      function trackVideoProgress() {
        if (!player) {
          return;
        }

        var total = player.getDuration(),
          state = player.getPlayerState(),
          time = player.getCurrentTime(),
          progress = time * 100 / total;

        if (total === 0) {
          if (state === YT.PlayerState.PLAYING) {
            setTimeout(trackVideoProgress, 1000);
          }
          return;
        }

        if (progress >= videoTrackedUntil) {
          if (progress >= 99) {
            videoTrackedUntil = 101;
            videoTracking = false;
            utag.link({ link_id: videoId, link_text: "video complete", linkEvent: "video complete", videoName: videoTitle });
            return;
          }
          utag.link({ link_id: videoId, link_text: "video " + videoTrackedUntil, linkEvent: "video " + videoTrackedUntil, videoName: videoTitle });
          if (progress >= 75) {
            videoTrackedUntil = 99;
          } else if (progress >= 50) {
            videoTrackedUntil = 75;
          } else if (progress >= 25) {
            videoTrackedUntil = 50;
          }
        }
        if (state !== YT.PlayerState.PLAYING) {
          videoTracking = false;
        } else {
          setTimeout(trackVideoProgress, (total * videoTrackedUntil / 100.0 - time + 0.5) * 1000);
        }
      }

      function onPlayerStateChange(event) {
       if (event.data === YT.PlayerState.PLAYING) {
         $target.trigger('videoStarted');
          if (currentlyActiveYTPlayer && currentlyActiveYTPlayer !== event.target) {
            currentlyActiveYTPlayer.pauseVideo();
          }
          currentlyActiveYTPlayer = event.target;
         }
       
        if (window.utag === undefined) {
          return;
        }
        if (event.data === YT.PlayerState.PLAYING && !videoTracking) {
          if (videoTrackedUntil < 0) {
            if (!videoTitle) {
              videoTitle = videoId;
            }
            videoTracking = true;
            videoTrackedUntil = 25;
            utag.link({ link_id: videoId, link_text: "video start", linkEvent: "video start", videoName: videoTitle });
            setTimeout(trackVideoProgress, 1000);
          } else {
            videoTracking = true;
            setTimeout(trackVideoProgress, 1);
          }
        }
      }

      function createPlayer() {
        $target.trigger('videoStarting');
        player = new YT.Player('ytvideo-' + videoId + '-' + ytVideoNumber, {
          videoId: videoId,
          playerapiid: 'ytplayer-' + videoId + '-' + ytVideoNumber,
          playerVars: {
            wmode: 'opaque',
            autohide: 1,
            enablejsapi: 1,
            rel: 0,
            iv_load_policy: 1,
            autoplay: (options.autoplay) ? 1 : 0,
            cc_load_policy: 1,
            modestbranding: 1,
            origin: window.location.host,
            showinfo: 0,
            fs: 1,
            theme: 'light'
            // subtitle language
            // hl=fr
            // cc_lang_pref=fr
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // if youtube api is not loaded (or is still loading) chain the video onYouTubePlayerAPIReady functions
      // otherwise just create the player
      if (typeof(YT) !== 'undefined') {
        createPlayer();
      } else {
        var prev = window.onYouTubePlayerAPIReady;
        window.onYouTubePlayerAPIReady = function() {
          if (typeof(prev) !== 'undefined') {
            prev();
          }
          createPlayer();
        }
      }
      return true;
    }

    // video initializer for embeds, this will just embed video into page with no overlay
    if (!options.noclick) {
      $(this).on('click', function (event) {
        if (context.insertContent($(this))) {
          event.stopPropagation();
          event.preventDefault();
        }
      });

      if (!options.overlay) {
        if (BrowserDetect.browser == 'Symbian') {
          context.insertContent($(this));
        } else {
          $(this).find('a.youtube-link').click();
        }
      }
    }

    function loadYTApi() {
      // load dynamically the youtube api if it is not already loaded
      if (!isYTApiLoaded) {
        var tag = document.createElement('script');
        tag.src = "//www.youtube.com/player_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); 
        isYTApiLoaded = true;
      }
    }
  };

}(jQuery));
'use strict';

window.App       = window.App || {};
window.App.Video = window.App.Video || {};

/**
 * Analytics
 *
 * Keeps track of how much of a video shown through
 * a `player` has been watched and reports the numbers
 * via `window.utag` to the analytics server.
 *
 * This class requires the `player` to implement the methods
 * '#videoInfo', `#currentTime` and `#totalTime` as well as trigger
 * events `start` (when the playback begins) and `stop` (when the
 * playback ends).
 *
 * @constructor
 * @param {player} player - The player to keep track of.
 * @example
 *   new App.Video.Analytics(player);
 */
App.Video.Analytics = function(player) {
  //if (!window.hasOwnProperty('utag')) return;

  if (!window.hasOwnProperty || window.hasOwnProperty('utag') === false || window.hasOwnProperty('utag') === undefined) {
    return;
  }

  this.player           = player;
  this.percentagePlayed = 0;

  this.player.on('playerstart', this.startTracking.bind(this));
  this.player.on('playerstop', this.stopTracking.bind(this));
};


/**
 * Calls `#trackTime` on a regular interval.
 * Stores interval reference.
 */
App.Video.Analytics.prototype.startTracking = function() {
  // ensure a 100 ticks per video, no matter how short
  var interval = Math.floor(this.player.totalTime() * 10);

  this.tick = setInterval((function() {
    this.trackTime();
  }).bind(this), interval);
};


/**
 * Removes interval, don't call `#trackTime` anymore.
 */
App.Video.Analytics.prototype.stopTracking = function() {
  if (this.tick !== undefined) {
    clearInterval(this.tick);
  }
};


/**
 * Requests the current time the player's playhead is at.
 * Converts time to percentage value in relation to the total length
 * of the video.
 * Compares percentage with previously recorded highest value,
 * if the video has been fully watched or the calculated value is
 * higher and exceeds one of four markers (25%, 50%, 75% and 99%)
 * inform the analytics server.
 */
var counter = 0;
App.Video.Analytics.prototype.trackTime = function() {
  var time = this.player.currentTime();
  var percentagePlayed = time * 100 / this.player.totalTime();

  if (percentagePlayed >= 99) {
      this.report('video complete');
      this.percentagePlayed = 100;
      this.stopTracking();
  } else {
    if      (percentagePlayed > 75) { percentagePlayed = 99; }
    else if (percentagePlayed > 50) { percentagePlayed = 75; }
    else if (percentagePlayed > 25) { percentagePlayed = 50; }
    else if (percentagePlayed > 0)  { percentagePlayed = 25; }

    if (percentagePlayed > this.percentagePlayed) {
      this.percentagePlayed = percentagePlayed;
      this.report('video ' + this.percentagePlayed);
    }
  }
};


/**
 * Pings the analytics server about an event.
 * @param {string} event
 * @param {string} [message]
 */
App.Video.Analytics.prototype.report = function(event, message) {
  window.utag.link({
    link_id  : this.player.videoInfo().url,
    link_text: message || event,
    linkEvent: event,
    videoName: this.player.videoInfo().title
  });
};
'use strict';

window.App       = window.App || {};
window.App.Video = window.App.Video || {};

(function($) {

  /**
   * Video Player super class
   *
   * Provides a common interface for new Video player classes.
   * Don't instantiate this class directly but rather extend it
   * when defining your player type, using `Object.create`.
   * Will throw errors for instance methods which haven't been
   * implemented
   *
   * @constructor
   * @param {object} options - Player options, show controls, etc..
   * @example
   *   MyPlayer = function(options) {
   *     // call to super constructor
   *     App.Video.Player.call(this, options);
   *   }
   *   MyPlayer.prototype = Object.create(App.Video.Player.prototype);
   *   // Define your own instance methods on `MyPlayer.prototype`
   */
  App.Video.Player = function(options) {
    this.options = options;
    this.player  = {};

   // sanity check
    if (!this.options.videoURL) {
      $.error('No video URL provided.');
    }
  };

  /**
   * Convenience wrapper for jQuery's event binding,
   * binds a namespaced event for the player instance at hand
   * @param {string} event - Name of the event.
   * @param {function} callback - Call when the event is triggered.
   * @example
   *   player.on('start', function() {
   *     $.log('Player started');
   *   });
   */
  App.Video.Player.prototype.on = function(event, callback) {
    $(document).on([event, this.playerID()].join('.'), callback);
  };


  /**
   * Convenience wrapper for jQuery's event triggering,
   * triggers a namespaced event for the player instance at hand
   * @param {string} event - Name of the event.
   * @param {object} [data]- Data to pass along with the event.
   * @example
   *   player.trigger('start');
   */
  App.Video.Player.prototype.trigger = function(event, data) {
    $(document).trigger([event, this.playerID()].join('.'), [data]);
  };


  /**
   * Convenience method for e.g. the analytics instance
   * @returns {object}
   */
  App.Video.Player.prototype.videoInfo = function() {
    return {
      title: this.options.videoTitle,
      url: this.options.videoURL
    };
  };

  /**
   * Creates an unqiue identifer for a player instance
   * @returns {string}
   * @example
   *   // returns 'ytvideo-UUx10KOWIE-video-1'
   *   player.playerID();
   */
  App.Video.Player.prototype.playerID = function() {
    return [
      this.playerNamespace(),
      this.videoID(),
      this.options.namespace
    ].join('-');
  };


  /**
   * Define template data for player, used when rendered the player UI
   * @returns {object} template data
   */
  App.Video.Player.prototype.templateData = function() {
    return { playerID: this.playerID() };
  };


  // Interface for sub classes ------------------------------------------------

  // All of these methods will throw errors informing that the inheritor
  // doesn't implement them when called.

  /**
   * @abstract
   */
  App.Video.Player.prototype.build = function() {
    return $.error('#build is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.playerNamespace = function() {
    return $.error('#playerNamespace is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.currentTime = function() {
    return $.error('#currentTime is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.totalTime = function() {
    return $.error('#totalTime is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.start = function() {
    return $.error('#start is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.stop = function() {
    return $.error('#stop is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.pause = function() {
    return $.error('#pause is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.isPlaying = function() {
    return $.error('#isPlaying is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.mute = function() {
    return $.error('#mute is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.unmute = function() {
    return $.error('#unmute is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.isMuted = function() {
    return $.error('#isMuted is not implemented.');
  };

  /**
   * @abstract
   */
  App.Video.Player.prototype.videoID = function() {
    return $.error('#videoID is not implemented.');
  };

})(jQuery);
'use strict';

window.App                = window.App || {};
window.App.Video          = window.App.Video || {};
window.App.Video.Players  = window.App.Video.Players || {};

// TODO: Move out, do properly or something
// We can't change the world, we can only change ourselves.
window.App.slowConnection = window.slowConnection;


(function($) {

  /**
   * Video.js Player
   *
   * Wraps the Video.js (http://videojs.com/) player provided
   * and equalizes it's functionality for usage with the
   * jQuery video plugin (2.0.0).
   * .
   * @constructor
   * @param {object} options - Player options, show controls, etc..
   * @augments App.Video.Player
   * @example
   *  var player = new App.Video.Players.Youtube();
   *  player.on('ready', player.start);
   *
   */
  App.Video.Players.VideoJS = function(options) {
    // call super constructor
    App.Video.Player.call(this, options);
  }

  // Inheritance
  App.Video.Players.VideoJS.prototype = Object.create(App.Video.Player.prototype);

  /**
   * Main set-up for instance.
   * Loads the API unless it's already loaded via `#loadAPI`.
   * Creates the actual player, attaches event handlers and
   * finally triggers a ready event.
   */
  App.Video.Players.VideoJS.prototype.build = function() {
    var self = this;

    this.createDOM();
    // define Flash fallback location
    //videojs.options.flash.swf = '//' + window.location.host + '/javascripts/vendor/video-js.swf';
    
    // TEMP swf sources for testing & debugging
    //videojs.options.flash.swf = 'http://ad:gjm@rpro-beta.dev.nokia.com/internal-videos/javascripts/vendor/video-js.swf';
    //swf:u.Pb+"vjs.zencdn.net/c/video-js.swf
    videojs.options.flash.swf = 'http://vjs.zencdn.net/c/video-js.swf';
    // allow developer to force flash usage
    if (this.options.data._dev && this.options.data._dev.forceFlash) {
      videojs.options.techOrder = ['flash', 'html5'];
    }

    // initialize player and set ready-handler
    videojs(self.playerID() + '-player', {}, function() {
      self.player = this;

      this.on('play', function() {
        self.trigger('playerstart');
      });

      this.on('pause', function() {
        self.trigger('playerstop');
      });

      self.trigger('playerready');
    });
  };

  /**
   * Create <video/> and <source/> tags
   * required by VideoJS and inserts it into target
   * with id of this.playerID
   */
  App.Video.Players.VideoJS.prototype.createDOM = function() {
    var $video = $('<video/>').attr({
      'id'        : this.playerID() + '-player',
      'class'     : 'video-js',
      'controls'  : this.options.showControls,
      'preload'   : 'none'
    });

    var self      = this,
        formats   = this.formats();

    // if no formats have been defined
    // the video url will provide the only source
    if (!formats.length) {
      // extract file format from url to be able to build the type
      var format = this.options.videoURL.match(/\.([0-9a-z]+)(?:[\?#]|$)/i)[1];
      var $source = $('<source/>').attr({
        'type'    : self.type(format),
        'src'     : self.options.videoURL
      });
      $video.append($source);

    } else {
      $.each(formats, function(i, format) {
        var $source = $('<source/>').attr({
          'type'    : self.type(format),
          'src'     : self.selectSizeURL.call(self, format)
        });
        $video.append($source);
      });
    }

    $('#' + this.playerID()).append($video);
  };


  /**
   * Defines classes name space, used in e.g. `#playerID`
   * @returns {string} namespace
   */
  App.Video.Players.VideoJS.prototype.playerNamespace = function() {
    return 'videojs';
  };


  /**
   * Remove extension and size portion from `videoURL`
   * @returns {string} base path
   * @example
   *   // for videoURL: "/foo/bar/bat.mp4"
   *   -> "bat"
   */
  App.Video.Players.VideoJS.prototype.fileBase = function() {
    return this.options.videoURL.match(/([^\/]+)(?=\.\w+$)/)[0]
  }


  /**
   * Retrieve available video formats from data
   * @returns {array} formats
   */
  App.Video.Players.VideoJS.prototype.formats = function() {
    var formats = [],
        versions;
    if (!this.options.data || !(versions = this.options.data.versions)) { 
      return formats;
    }

    // the formats are basically just the keys of the data
    for(var format in versions) {
      if (versions.hasOwnProperty(format)) { formats.push(format); }
    }
    return formats;
  };

  /**
   * Retrieve available video sizes from data
   * @returns {array} sizes
   */
  App.Video.Players.VideoJS.prototype.sizes = function() {
    var sizes   = [],
        formats = this.formats(),
        data;
    // all formats must support all sizes so we can just check
    // which sizes the first format supports as it must be
    // representative for all other formats
    if (!formats.length || !(data = this.options.data.versions[formats[0]])) { 
      return sizes;
    }

    for(var size in data) {
      if (data.hasOwnProperty(size)) { sizes.push(size); }
    }

    // ensure we only return integers
    sizes = $.map(sizes, function(size) { return parseInt(size, 10); });
  
    return sizes;
  };


  /**
   * Pick an appropriate URL from the options based on format
   * and size return by `this.size()`
   * @returns {string} source URL
   */
  App.Video.Players.VideoJS.prototype.selectSizeURL = function(format) {
    var size = this.size();
    return this.options.data.versions[format][size];
  };

  /**
   * Select an appropriate size for the video based on
   * the containers width from the available sizes
   * @returns {null|integer} size or null if no sizes available
   */
  App.Video.Players.VideoJS.prototype.size = function() {
    var containerWidth, 
        available = this.sizes().slice(0).sort(function(a, b) { return a - b; });
    
    // no sizes have bene defined
    if (!this.sizes().length) { return null; }

    // if order IE, use predefined screen size  
    if (BrowserDetect.browser === 'Explorer' && BrowserDetect.version <= 7) {
      containerWidth = 1024;
    } else {
      //containerWidth = $('#' + this.playerID()).width();
      containerWidth = $(window).width();
    }
    
    // connection has been detected to be slow, use smaller sizes
    if (App.slowConnection) {
      var max = this.options.data.slowConnectionMaxSize;
      if (max !== undefined) {
        // if a max size has been defined, use all sizes beneath that limit
        available = $.grep(available, function(el) { return el <= max; });
      } else {
        // else just use the smallest (first) size
        available = available[0];
      }
    }

    var pointer = available.shift();
    while (pointer < containerWidth && available.length > 0) {
      pointer = available.shift();
    }
    return pointer;
  };

  /**
   * Look-up proper video type by format
   * @param {string} format - A file extension
   * @returns {string} type
   */
  App.Video.Players.VideoJS.prototype.type = function(format) {
    //var extension = this.options.videoURL.match(/.*\.(.*)+$/)[1];
    var extensionTypeMapping = {
      'ogv': 'video/ogg',
      'mp4': 'video/mp4',
      //'mp4': 'video/x-m4v', // IE testing
      'webm': 'video/webm'
    };
    if (extensionTypeMapping.hasOwnProperty(format)) {
      return extensionTypeMapping[format];
    }
    $.error('[VideoJS player] No type mapping found for format "' + format + '"');
  };

 /**
   * Extracts Youtube video ID from `videoURL`
   * @returns {string} video ID
   */
  App.Video.Players.VideoJS.prototype.videoID = function() {
    return this.fileBase().replace(/\W/g, '-');
  };

  /**
   * Get the current position of the playhead.
   * @returns {integer} current time
   */
  App.Video.Players.VideoJS.prototype.currentTime = function() {
    return this.player.currentTime();
  };

  /**
   * Get the full length of the video.
   * @returns {integer} total duration
   */
  App.Video.Players.VideoJS.prototype.totalTime = function() {
    return this.player.duration();
  };

  /**
   * Start playback.
   */
  App.Video.Players.VideoJS.prototype.start = function() {
    this.player.play();
  };

  /**
   * Stop playback.
   */
  App.Video.Players.VideoJS.prototype.stop = function() {
    this.player.pause();
  };

  /**
   * Pause playback.
   */
  App.Video.Players.VideoJS.prototype.pause = function() {
    this.player.pause();
  };

  /**
   * Get state of player - currently playing?
   * @return {Boolean} playing?
   */
  App.Video.Players.VideoJS.prototype.isPlaying = function() {
    //return !this.player.paused();
    return this.player.paused !== undefined && !this.player.paused();
  };

  /**
   * Set the player volume to 0
   */
  App.Video.Players.VideoJS.prototype.mute = function() {
    this.previousVolume = this.player.volume();
    this.player.volume(0);
    this.trigger('playermute');
  };

  /**
   * Set volume back to previous volume level
   */
  App.Video.Players.VideoJS.prototype.unmute = function() {
    this.player.volume(this.previousVolume || 0.5);
    this.previousVolume = null;
    this.trigger('playerunmute');
  };

  /**
   * Get state of player - currently muted?
   * @return {Boolean} muted?
   */
  App.Video.Players.VideoJS.prototype.isMuted = function() {
    return parseInt(this.player.volume(), 10) === 0;
  };

})(jQuery);
'use strict';

window.App               = window.App || {};
window.App.Video         = window.App.Video || {};
window.App.Video.Players = window.App.Video.Players || {};

(function($) {

  /**
   * Youtube Player
   *
   * Wraps the iframe player provided through the Youtube player
   * API and equalizes it's functionality for usage with the
   * jQuery video plugin (2.0.0).
   * .
   * @constructor
   * @param {object} options - Player options, show controls, etc..
   * @augments App.Video.Player
   * @example
   *  var player = new App.Video.Players.Youtube();
   *  player.on('ready', player.start);
   *
   */
  App.Video.Players.Youtube = function(options) {
    // call super constructor
    App.Video.Player.call(this, options);
  };

  // Inheritance
  App.Video.Players.Youtube.prototype = Object.create(App.Video.Player.prototype);

  /**
  * Main set-up for instance.
  * Loads the Youtube API unless it's already loaded via `#loadAPI`.
  * Creates the actual player via `#createPlayer`.
  * Attaches an `onReady` handler and as it's callback an 'onStateChange' handler to communicate player states.
  * Finally triggers a ready event.
  */
  App.Video.Players.Youtube.prototype.build = function() {
    this.loadAPI(function() {
      var self = this;

      self.player = this.createPlayer();

      // events
      self.player.addEventListener('onReady', function(){
        // TODO: move into method?
        self.player.addEventListener('onStateChange', function(event) {
          switch (event.data) {
            case YT.PlayerState.ENDED:
            case YT.PlayerState.PAUSED:
              self.trigger('playerstop');
              break;
            case YT.PlayerState.PLAYING:
              self.trigger('playerstart');
              break;
          }
        });

        self.trigger('playerready');
      });
    });
  };


  /**
   * Defines classes name space, used in e.g. `#playerID`
   * @returns {string} namespace
   */
  App.Video.Players.Youtube.prototype.playerNamespace = function() {
    return 'ytvideo';
  };


  /**
   * Extracts Youtube video ID from `videoURL`
   * @returns {string} video ID
   */
  App.Video.Players.Youtube.prototype.videoID = function() {
    return this.options.videoURL.match(/[\\?&]v=([^&#]*)/)[1];
  };


  /**
   * Creates the actual player using the Youtube API
   * @returns {object} instance of `YT.Player`
   */
  App.Video.Players.Youtube.prototype.createPlayer = function() {
    // build iframe and insert to avoid some security issues
    return new YT.Player(this.playerID(), {
      videoId   : this.videoID(),
      playerVars: {
        wmode         : 'opaque',
        autohide      : 1,
        enablejsapi   : 1,
        rel           : 0,
        iv_load_policy: 1,
        autoplay      : 0,
        cc_load_policy: 1,
        modestbranding: 1,
        showinfo      : 0,
        color         : 'white',
        origin        : window.location.protocol + '//' + window.location.host,
        fs            : 1,
        controls      : this.options.showControls ? 1 : 0,
        theme         : 'light'
      }
    });
  };


  /**
   * Load the Youtube API by attaching a new script tag
   * unless already loaded. Callback will always be called
   * in scope of the instance.
   * @param {function} callback
   */
  App.Video.Players.Youtube.prototype.loadAPI = function(callback) {
    if (!App.Video.Players.Youtube.apiLoaded) {
      $('<script/>', { src: '//www.youtube.com/player_api' })
        .insertBefore($(document).find('script:first'));

      // to avoid race conditions and multiple API includes, set a flag
      // when loading the API for the first time
      App.Video.Players.Youtube.apiLoaded = true;
    }

    if (typeof YT == 'undefined') {
      // since the YT API calls a function on window when ready
      // instead of triggering an event, we have queue previously bound
      // callbacks and call them in row
      var existingCallback = window.onYouTubePlayerAPIReady;
      window.onYouTubePlayerAPIReady = (function() {
        if (typeof existingCallback !== 'undefined') { existingCallback(); }
        callback.apply(this);
        this.ready = true;
      }).bind(this);

    } else {
      callback.apply(this);
    }
  };


  /**
   * Get the current position of the playhead.
   * @returns {integer} current time
   */
  App.Video.Players.Youtube.prototype.currentTime = function() {
    return this.player.getCurrentTime();
  };


  /**
   * Get the full length of the video.
   * @returns {integer} total duration
   */
  App.Video.Players.Youtube.prototype.totalTime = function() {
    return this.player.getDuration();
  };


  /**
   * Start playback.
   */
  App.Video.Players.Youtube.prototype.start = function() {
    if (this.player.playVideo !== undefined) { this.player.playVideo(); }
  };


  /**
   * Stop playback.
   */
  App.Video.Players.Youtube.prototype.stop = function() {
    if (this.player.stopVideo !== undefined) { this.player.stopVideo(); }
  };


  /**
   * Pause playback.
   */
  App.Video.Players.Youtube.prototype.pause = function() {
    if (this.player.pauseVideo !== undefined) { this.player.pauseVideo(); }
  };

  /**
   * Get state of player - currently playing?
   * @return {Boolean} playing?
   */
  App.Video.Players.Youtube.prototype.isPlaying = function() {
    return this.player.getPlayerState !== undefined && this.player.getPlayerState() === 1;
  };

  /**
   * Set the player volume to 0
   */
  App.Video.Players.Youtube.prototype.mute = function() {
    this.player.mute();
    this.trigger('playermute');
  };

  /**
   * Set volume back to previous volume level
   */
  App.Video.Players.Youtube.prototype.unmute = function() {
    this.player.unMute();
    this.trigger('playerunmute'); 
  };

  /**
   * Get state of player - currently muted?
   * @return {Boolean} muted?
   */
  App.Video.Players.Youtube.prototype.isMuted = function() {
    return this.player.isMuted();
  };

})(jQuery);
/*
 * Nokia Account authentication implementation
 */


window.App = window.App || {};

App.NokiaAccount = function () {
  // Not until NoA supports CORS
  //this.useCORS = $.support.cors;
  this.useCORS = false;
}

// If login is required on this page, then check if the user is logged in and redirect to login page if not
App.NokiaAccount.prototype.loginCheck = function() {
  if (I18n.noa.loginRequired) {
    this.isLoggedIn(this.stayOnCurrentPage, this.redirectToLoginPage);
  }
}

// Check if the user is currently logged in, based on  AJAX call (or JSONP) to WAL
App.NokiaAccount.prototype.isLoggedIn = function(trueCallback, falseCallback) {
  $.ajax({
    url : 'https://' + window.location.hostname + '/wal/account/isLoggedInWithPassive',
    dataType : this.useCORS ? "json" : "jsonp",
    cache : true,
    xhrFields: {
      withCredentials: true
    },
    success : function(data) {
      if (data == true) {
        trueCallback();
      } else {
        falseCallback();
      }
    }
  });
}

App.NokiaAccount.prototype.stayOnCurrentPage = function() {
  // Nothing here
}

App.NokiaAccount.prototype.redirectToLoginPage = function() {
  window.location = I18n.noa.loginUri;
}

// Show the Login Widget (Nokia Account Embedded UI)
App.NokiaAccount.prototype.showLogin = function() {
  var self = this;

  // Get Nokia Account settings from WAL
  $.getJSON('/wal/account/settings', function(settings) {

    // Nokia Account object
    self.redirectUri = decodeURIComponent((location.search.match(RegExp("[?|&]redir=(.+?)(&|$)"))||[,null])[1]);
    self.orientation = self.getOrientation();

    // asynchronously load Nokia Account SDK script
    self.getScriptCached(settings.accountUrl + '/js/v1/sdk.js', function() {

      self.$target = $('section.nokia-account-login');

      // initiate Nokia Account SDK for further use, different instances will share this part of the configuration
      self.sdk = new NOKIA.sso.SDK();
      self.sdk.init({
        authenticationMethod: settings.nokiaAccountAuthenticationMethod,
        callbackUrl: settings.nokiaAccountCallbackUrl,
        serviceId: settings.nokiaAccountServiceId,
        oauth2ClientId: settings.nokiaAccountConsumerKey,
        oauth2RedirectUri: settings.nokiaAccountBaseUrl + settings.nokiaAccountSuccessUrl
      });
      NOKIA.sso.Logging.setEnabled(true);

      var sdkOpts = {
        uiMode: "lightbox",
        branding: false,
        lang: document.documentElement.lang,
        frameType: self.orientation,
        businessMessage: I18n.noa.loginMessage
      };
  
      self.sdk.registerCallback("authentication", function(data) {
        //console.log("redirect me now to " + self.redirectUri);
        window.location = self.redirectUri;
      });
  
      self.sdk.registerCallback("newFrame", function(data) {
        self.$target.find(".content-wrapper").append('<iframe class="' + self.orientation + '" frameBorder="0" style="display:none" src="' + data["url"] + '" name="NoA-frame"></iframe>');
        self.$target.find(".content-wrapper iframe").show();
      });

      self.sdk.registerCallback("resizeFrame", function(data) {
        $('iframe[name=NoA-frame]').height(data["height"]);
      });

      $(window).on('resize', $.debounce(function() {
        var oldOrientation = self.orientation;
        self.orientation = self.getOrientation();
        if (self.orientation != oldOrientation) {
          $('iframe[name=NoA-frame]').remove();
          sdkOpts.frameType = self.orientation;
          self.sdk.performSignIn(sdkOpts);
        }
      }, 100));

      self.sdk.registerCallback("close", function(data) {
        $('iframe[name=NoA-frame]').remove();
        self.sdk.performSignIn(sdkOpts);
      });

      // if we're on login page, failure does nothing -> NOA shows a message
      self.sdk.registerCallback("failure", function(data) {
        //console.log(data, data.reason);
      });
  
      // Login is required, so open the actual login widget
      self.sdk.performSignIn(sdkOpts);
    });
  });
}

App.NokiaAccount.prototype.getOrientation = function() {
  return ($(window).width() > 1024) ? "embedded_landscape" : "embedded_portrait";
}

App.NokiaAccount.prototype.getScriptCached = function(url, success) {
  return $.ajax({
    url : url,
    cache : true,
    dataType : "script",
    success : success
  });
}

var nokiaAccount = new App.NokiaAccount();

// If login is required on this page, then check if the user is logged in and redirect to login page if not
nokiaAccount.loginCheck();

// If this is the login page, then show the Nokia Account Embedded UI
if ($('.nokia-account-login.gray').length > 0) {
  nokiaAccount.showLogin();
}
;
var util = {
  /* Static function for extending JS objects */
  /* Input: ({x:1, a:{y:2}}, "a.b.c", 3), Output: {x:1, a:{y:2, b:{c:1}}}, Return: true */
  /* Input: ({x:1}, "x.a", 1), Output: unchanged, Return: false */
  createLeafValue: function(obj, key, val) {
    var fields = key.split(".");
    var current = obj;
    var i;
    for (i = 0; i < fields.length-1; i++) {
      if (current[fields[i]] === undefined)
        current[fields[i]] = {};
      else if (typeof(current[fields[i]]) !== 'object')
        return false;
      current = current[fields[i]];
    }
    current[fields[i]] = val;
    return true;
  }
};
$(function() {
  //console.profile();

  function viewport() {
    var e = window, a = 'inner';
    if (!('innerWidth' in window )) {
        a = 'client';
        e = document.documentElement || document.body;
    }
    return { width : e[ a+'Width' ] , height : e[ a+'Height' ] };
  }

  $('noscript').remove();

  // Execute whatever is in window.onloadFunctions
  $(window.onloadFunctions).each(function() { this(); });

  $('body').append('<div class="overlay-video-container"><div class="wrapper"></div></div>');
  //console.log('cerate video div');

  // IE6-8 detection
  var legacyIE = BrowserDetect.browser == 'Explorer' && BrowserDetect.version <= 8;

  // Limit animation framerate to 20fps
  $.fx.interval = 30;

  if (!legacyIE) {
    if ($(window).width() > 640 && !$('body').hasClass('new-product-page')) {
      $('aside.aside-navigation').stickyNavigation();
    }
    // IE6/7 issue: disable because if there are two select boxes, the z-indexes mess up as dropdowns have parents with relative poisitioning.
    $('select.enh-select').enhanceSelect({'showEmptyValues': true});
  }

  // Cookie notification
  $('#container').cookieNotification();

  // Product link (no section.product-link reference -> ie8)
  $('.product-link').productLink();

  // Product Availability Notifier
  $('section.product-notifier').productAvailabilityNotifier();

  // Open the social sharing in popup
  if($('.social-sharing').length > 0) {
    $('.social-sharing > li > a').each(function(i) {      
      $(this).on('click', function(event) {
        window.open($(this).attr('href'), 'social_sharing', 'status=no,toolbar=0,resizable=1,width=700,height=680,top=0,left=0,location=1');
        event.preventDefault();
      });
    });
  }

  // Default image mapping for adaptive images
  window.defaultImageMap = [
    { key: 'xs',      value: 160  }, // 160  (low-end)  -> 159
    { key: 's',       value: 320  }, // 320  (smartphone-portrait)  -> 319
    { key: 'm',       value: 480  }, // 480  (smartphone-landscape) -> 639 (we don't adapt images for the tablet lite breakpoint (640))
    { key: 'l',       value: 768  }, // 768  (tablet-landscape)     -> 767
    { key: 'xl',      value: 1024 }, // 1024 (desktop)              -> 1023
    { key: '120x120', value: 160  },
    { key: '200x200', value: 480  }
  ];

  // List of all breakpoints, for tracking purposes (must be in order from largest to smallest)
  window.breakpoints = [ 240, 640 ];
  for (var i = 0; i < window.defaultImageMap.length; i++) {
    var breakpoint = window.defaultImageMap[i].value;
    if ($.inArray(breakpoint, window.breakpoints) < 0) {
      window.breakpoints.push(breakpoint);
    }
  }
  window.breakpoints.sort(function(a, b) {
    return b - a;
  });

  if (window.slowConnection) {
    window.defaultImageMap = [];
  }

  // Collection of elements that need traslateZ applied to them when live tile flips
  window.translateZelements = [
    $('section.hero-area p'),
    $('section.highlight-tiles a'),
    $('section.navigation-tiles p.social-media'),
    $('nav.site-navigation ul li'),
    $('.social-media .default li'),
    $('li.change-country'),
    $('.tile-link .caption')
  ];

  if (BrowserDetect.OS == 'Mac') {
    $(window.translateZelements).each(function() { $(this).addClass('zero-translate-z'); });
  }

  window.isTrackingAvailable = (typeof utag !== 'undefined' && typeof nkT !== 'undefined' && typeof nkT.pName !== 'undefined');

  window.customFadeIn = function() {
    $(this).transitionOrAnimate({
      classNames: 'transition-ease-fast full-opacity',
      properties: { 'opacity': '1' },
      callback: function() {
        // Remove the class once the animation is done so we don't end up transitioning every size change etc.
        // TODO: the callback now gets attached to the live tiles and for some reason, live tiles transitionend events get called in the cb.
        // This makes sense and needs to be fixed.
        $(this).removeClass('transition-ease-fast');
      }
    });
  };

  $('#main > section:last-child').addClass('last-component');

  // Fade components (and some component's content) in one by one.
  // Refer to _layout.sass to see the body.js dependent opacity settings
  $('.do-fade-in').each(function(i) {
    if (window.location.search.indexOf("debugmode=screenshot")>0) {
      $(this).css({'opacity': '1'});
    } else {
      $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);
    }
  });

  // Enhance sub navigations
  $('nav.sub-navigation').enhanceSubNavigation();

  // Fix placeholders
  // TODO: needs custom test to figure out if placeholder is already supported
  $('[placeholder].enh-placeholder').enhancePlaceholder();

  // Site search enhancements (mainly for tablet landscapes)
  $('#site-search-field').addClass('visually-enhanced').focus(function() {
    $(this).parent().addClass('focused');
  }).blur(function() {
    $(this).parent().removeClass('focused');
  });

  // Handle menu and search buttons showing/hiding the right ones.
  $('#site-navigation-top').css({ 'display': 'block' });
  $('#masthead a.go-to-tools').attr('href', '#site-navigation-top').addClass('enh-toggle');
  $('#search-form-top').appendTo('#site-navigation-top').css({ 'display': 'block' });
  $('#search-form').remove();
  $('aside.aside-sub-navigation').clone().prependTo('article > .wrapper').addClass('copy');
  $('aside.aside-sub-navigation.copy').hide();
  $('section.aside-sub-navigation-anchor').on('click', 'a', function(event) {
    $('aside.aside-sub-navigation.copy').toggle(250, 'swing');
    event.preventDefault();
  });

  // Site navigation section toggles

  $('#site-navigation-top .site-navigation .wrapper > ul > li.has-children').each(function() {
    $(this).find('ul.children').css({ 'overflow': 'hidden', 'height': '0' });
    $(this).find('a.toggle-children').enhanceToggle({ silent: true, responsiveScrollToTop: false });
    $(this).find('ul.children li.active').parent().parent().find('a.toggle-children').trigger('click');
    if ($(this).hasClass('active')) $(this).find('a.toggle-children').trigger('click');
  });

  // Footer navigation, 2nd level hide
  $('.site-navigation.bottom ul li ul').hide();

  // Convert anchor jumps to toggles if possible
  $('a.enh-toggle, dl.enh-toggle > dt > a').each(function() {
    if ($(this).parents('.filters').size() === 0) {
      $(this).enhanceToggle({ silent: true, responsiveScrollToTop: false });
    }
  });

  $('section.filters a.enh-toggle').enhanceToggle({
    silent: true,
    responsiveScrollToTop: true
  });

  $('ul.enh-toggle:not(.support-categories) > li > a').enhanceToggle();
  $('ul.enh-toggle.support-categories > li > a').enhanceToggle({ closeEvent: 'support_categories', silent: true });
  $('h2.enh-toggle a').enhanceToggle({ silent: true });

  // Article accordions
  $('.article-accordion > div.sub-section > .headline > h3 > a').enhanceToggle({ silent: true });

  // Error page Go back link
  $('div.error-links ul').prepend([
    '<li>',
    '  <a href="javascript:history.go(-1)" title="' + I18n.get('navigation', 'go_back_link_title') + '">',
    '    <strong>' + I18n.get('navigation', 'go_back_link_text') + '</strong>',
    '  </a>',
    '</li>'
  ].join(''));

  // Open the menu by triggering the active page's click
  $('ul.sub-menu.enh-toggle').each(function() {
    $(this).find('li.current a').trigger('click');
  });

  // Enhance inputs
  $('input[type=checkbox].enh-checkbox').enhanceCheckbox();
  $('.radio-group').enhanceRadio();
  $('input[type=file]').enhanceFile();
  $('.search-results .tabs').enhanceAnchors();

  // Hide the submit button for #filters
  // TODO: bind submit event to the filter checkboxes
  $('#filters input[type="submit"]').hide();

  // Adaptive image sizes
  $(window).adaptiveImages(window.defaultImageMap);

  // Calculate and lay out image collections
  $('.layout-enhancer').layoutEnhancer();

  // Slideshow calls
  var useSlideshowAnimations = $(window).width() >= 640;
  $('.slideshow').slideshow({ forwardOnSlideTap: true, arrows: true });
  
  
  $('div.slideshow-rich').slideshow2({ forwardOnSlideTap: true, arrows: true, videoAutoPlay: true });
  

  $('.rich-content-slideshow-standalone').slideshow2({ arrows: true });

  useSlideshowAnimations = useSlideshowAnimations || $('head meta[name="componentContext"]').attr('content') === 'styleguide';
  $('.rich-content-slideshow').slideshow({ autoPlay: useSlideshowAnimations, progressBar: useSlideshowAnimations, arrows: true, runOnce: true});
  $('.video-gallery-slideshow').slideshow({ forwardOnSlideTap: true, autoPlay: false, arrows: false });

  $('.content-block').showOverlay({ overlayContent: '.standalone-slideshow', trigger: 'a.responsive-gallery-trigger' });



  // Prevent page jump when the link isn't supposed to lead anywhere
  $('a[href="#external-link"], a[href="#not-implemented"]').click(function() {
    window.location = '/not_found.html';
  });

  // Content hider
  $('.hidable-block').hideContent({ heightTresholdLines : 4, heightTresholdPixels: '150'});

  // Dynamic product catalog
  $('article.phone-catalog').enhanceLoading({
    container: '.catalog',
    events: {
      click  : '.pagination a',
      change : '#filters'
    }
  });

  // // Dynamic search results
  // $('.search-results').enhanceLoading({
  //   container: '.search-results',
  //   events: {
  //     click: '.pagination a'
  //   },
  //   scrollToTop: true,
  //   callback: function($el) {
  //     $('.do-fade-in').each(function(i) {
  //       $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);
  //     });
  //   }
  // });

  // Dynamic contact info
  $('.contact').enhanceLoading({
    container: '.contact-info.enh-loading',
    events: {
      change: '.location-filter form'
    },
    callback: function($el) {
      if (!legacyIE) $el.find('select.enh-select').enhanceSelect();
      $el.find('form').addClass('enhanced-loading');
    },
    scrollToTop: true
  });

  // Contact us -form
  $('.form').formValidation();

  $('.repair-delivery-methods').enhanceLoading({
    container: '.repair-case-form-container',
    events: {
      change: 'form.delivery-method-form'
    },
    callback: function($el) {
      if (!legacyIE) $el.find('select.enh-select').enhanceSelect();
      $('input[type=checkbox].enh-checkbox').enhanceCheckbox();
      $(window).adaptiveImages('doRefresh');
      $('.form').formValidation();
    },
    scrollToTop: true
  });

  // Align to middle (e.g. for content blocks)
  $('section.text-middle-left header').alignToMiddle();
  $('section.text-middle-right header').alignToMiddle();

  // Align the benefit blocks starting from tablet-portrait (they are not swipeshows until that)
  $('section.benefit-block.center-vertically header, section.benefit-block .center-vertically header').alignToMiddle({ minScreenWidth: 708 });

  // Align the spec snaphot content starting from tablet-portrait
  $('body.new-product-page section.specifications-snapshot ul.info').alignToMiddle({ minScreenWidth: 768 });


  // Product comparison plugin
  $('section.compare-selector').productComparison();

  // Product selector plugin
  $('section.product-selector:not(.support)').productSelector({ dynamic: true });
  $('section.product-selector.support').productSelector({ dynamic: false });

  // Compare view
  $('section.compare').productCompareView();

  // Init load more buttons on page-load
  // TODO: use merge this to one invocation and let the plugin read from data-attributes the correct setup
  $('section.load-more.load-phones').loadmore({ catalog: '.catalog' });
  $('section.load-more.load-accessories').loadmore({ catalog: '.catalog-accessories' });
  $('section.load-more.load-support').loadmore({ preloaded: true, catalog: $('.product-selector.support .phone-list-wrapper') });
  $('section.load-more.load-offers').loadmore({ catalog: '.offers-list' });

  // Expand filters on page load if asked to
  if ($('section.filters').is(':visible') && window.location.href.indexOf('fe=true') > -1) {
    $('section.filters .filters-toggle-wrapper a').trigger('click');
  }

  // Accessory filters
  if ($('.catalog-accessories').is(':visible')) {
    $('.filters a.filter-links').parent().on('click', function(e) {
      e.preventDefault();

      var _self = $(this),
        checkbox = _self.find('.enh-checkbox-wrapper'),
        filterName = $(this).find('a.filter-links').data('filter');
        filterName = filterName.replace('&', '%26');

      // Update filter links
      $('.filters a.filter-links').each(function() {
        if (checkbox.is('.enh-checkbox-selected')) {
          $(this).attr('href', $(this).attr('href').replace('&' + filterName + '=on', '').replace('?' + filterName + '=on', ''));
          if ($(this).attr('href').indexOf('?') === -1 && $(this).attr('href').indexOf('&') > -1) {
            $(this).attr('href', $(this).attr('href').replace('&', '?'));
          }
        } else {
          if ($(this).data('filter') !== filterName) {
            $(this).attr('href', $(this).attr('href') + '&' + filterName + '=on');
          }
        }
      });

      checkbox.toggleClass('enh-checkbox-selected');

      $('.catalog-accessories').load(window.location.pathname + $(this).find('a.filter-links').attr('href') + ' .catalog-accessories > .wrapper', function() {
        $(this).find('.wrapper, li').each(function(index) {
          $(this).delay(parseInt(100 * index, 10)).animate({ 'opacity': '1' }, 150);
        });
        $('.load-more.load-accessories').loadmore({ catalog: '.catalog-accessories' });

        // Init adaptive images for loaded content
        // $(this).adaptiveImages(window.defaultImageMap);
        $(window).adaptiveImages('doRefresh');

        if ($(this).find('li').size() === 0) {
          $('.error-notification').parent().show();
          $('.load-more').hide();
        } else {
          $('.error-notification').parent().hide();
          $('.load-more').show();
        }

        $('.filters a.filter-links').each(function() {
          var filter = $(this).data('filter');
          if ($(this).attr('href').indexOf(filter) === -1) {
            $(this).attr('href', ($(this).attr('href') + '&' + filter + '=on'));
          }
          // Fixup param syntax
          $(this).attr('href', ($(this).attr('href').replace(/\?/g, '&')).replace('&', '?'));
        });
      });
    });
  }

  // Phone filters
  if ($('section.catalog').is(':visible')) {
    $('.filters a.filter-links').parent().on('click', function(e) {
      e.preventDefault();

      var _self = $(this),
        checkbox = _self.find('.enh-checkbox-wrapper'),
        filterName = $(this).find('a.filter-links').data('filter');

      // Update filter links
      $('.filters a.filter-links').each(function() {
        if (checkbox.is('.enh-checkbox-selected')) {
          $(this).attr('href', $(this).attr('href').replace('&' + filterName + '=on', '').replace('?' + filterName + '=on', ''));
          if ($(this).attr('href').indexOf('?') === -1 && $(this).attr('href').indexOf('&') > -1) {
            $(this).attr('href', $(this).attr('href').replace('&', '?'));
          }
        } else {
          if ($(this).data('filter') !== filterName) {
            $(this).attr('href', $(this).attr('href') + '&' + filterName + '=on');
          }
        }
      });

      checkbox.toggleClass('enh-checkbox-selected');

      $('.catalog').load(window.location.pathname + $(this).find('a.filter-links').attr('href') + ' .catalog > .wrapper', function() {
        $(this).find('.wrapper, li').each(function(index) {
          $(this).delay(parseInt(100 * index, 10)).animate({ 'opacity': '1' }, 150);
        });
        $('.load-more.load-phones').loadmore({ catalog: '.catalog' });

        // Init adaptive images for loaded content
        // $(this).adaptiveImages(window.defaultImageMap);
        $(window).adaptiveImages('doRefresh');

        if ($(this).find('li').size() === 0) {
          $('.error-notification').parent().show();
          $('.load-more').hide();
        } else {
          $('.error-notification').parent().hide();
          $('.load-more').show();
        }

        $('.filters a.filter-links').each(function() {
          var filter = $(this).data('filter');
          if ($(this).attr('href').indexOf(filter) === -1) {
            $(this).attr('href', ($(this).attr('href') + '&' + filter + '=on'));
          }
          // Fixup param syntax
          $(this).attr('href', ($(this).attr('href').replace(/\?/g, '&')).replace('&', '?'));
        });
      });
    });
  }

  // Video triggers
  // TODO: make data-driven, only use .responsive-video-trigger class and read rest from data-attributes
  $('section.navigation-tiles li.video-tile a.tile-content-wrapper').video({
    overlay: true,
    hideTrigger: true
  });


  $('section.benefit-block a.youtube-link').append('<div class="play-icon"></div>');
  // Aqua video triggers
  $('section.benefit-block a.youtube-link').video({
    overlay: true,
    hideTrigger: false,
    targetParent: '.wrapper'
  });

  $('section.content-block .responsive-video-trigger').video({
    overlay: true,
    hideTrigger: false,
    targetParent: '.wrapper'
  });

  $('.video .responsive-video-trigger').video({
    overlay: false,
    hideTrigger: false
  });

  $('.video-list .responsive-video-trigger').video({
    overlay: true,
    hideTrigger: false,
    targetParent: '.video-list'
  });

  // if ( !navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ) {
    $('.video-slide a.youtube-link').video({
      overlay: true,
      overlayTarget: '.video-slide',
      hideTrigger: false,
      targetParent: '.wrapper'
    });
  // }

  $('section.page-collections li.video-tile-wide a.tile-content-wrapper').video({
    overlay: true,
    hideTrigger: true
  });

  $('.video-slide').splitToSlides({resolutions: {0: 1, 480: 2, 768: 3, 1024: 4}})
                   .simpleSlide({animation: 'slideRight', triggerNext: '.control.next', triggerPrev: '.control.prev', slides: '.slide', allowLoop: false});

  // Set up a video controls DOM string depending on browser capabilities
  var videoControls;
  if(Modernizr.fullscreen) {
    videoControls = '<a class="control toggle"></a><a class="control fullscreen-placeholder"></a><a class="control volume-toggle"></a>';
  } else {
    videoControls = '<a class="control toggle"></a><a class="control volume-toggle"></a>';
  }
  
  // Overlay videos (new player)
  $('a.overlay-video-trigger')
    // Set the video height on video ready rather than videostart on overlay cases
    .on('videoready', function(event, $ui, $trigger) {
      $ui.find('video, object, iframe').css({ 'position': 'absolute', 'left': 'auto', 'height': '100%' }).parent().css({ 'position': 'relative', 'padding-bottom': '56.25%' });
    })
    .on('videostart', function(event, $ui, $trigger) {
      //$ui.find('video').css({ 'height': 'auto' }).end().find('.controls .toggle').addClass('playing');
      //$ui.find('video, object').css({ 'position': 'absolute', 'left': 'auto', 'height': '100%' }).parent().css({ 'position': 'relative', 'padding-bottom': '56.25%' });
      // Add a class for IEs 6-8 to set the object height to a static
      $ui.addClass('playback-started');
      $ui.find('.controls .toggle').addClass('playing');
      if(Modernizr.fullscreen) {
        $ui.find('.controls .fullscreen-placeholder').removeClass('fullscreen-placeholder').addClass('fullscreen-toggle');
      }
    })
    .on('videostop', function(event, $ui) {
      $ui.find('.controls .toggle').removeClass('playing');
    })
    .on('videomute', function(event, $ui) {
      $ui.find('.controls .volume-toggle').addClass('muted');
    })
    .on('videounmute', function(event, $ui) {
      $ui.find('.controls .volume-toggle').removeClass('muted');
    })
    .on('videoenterfullscreen', function(event, $ui) {
      $ui.addClass('fullscreen-on');
    })
    .on('videoexitfullscreen', function(event, $ui) {
      $ui.removeClass('fullscreen-on');
    })
    .xvideo({
      target: '.overlay-video-container .wrapper',
      showNativeControls: false,
      triggerClass: 'overlay-video-trigger',
      template          : ['<div class="xvideo xvideo-responsive-video">',
                            '<div class="foo">',
                              '<div id="%playerID%" class="toggle">',
                            '</div>',
                            '</div>',
                            '<div class="controls">' + videoControls + '</div>',
                            '<a class="close" style="display: inline;"></a>',
                           '</div>'].join('')
  });

  // Inline videos (new player)
  // TODO: replace the '.standalone-slideshow .video-trigger' with '.inline-video.trigger'
  $('a.inline-video-trigger, .standalone-slideshow .video-trigger')
    /*.on('videoready', function() {
      if (!Modernizr.fullscreen) {
        alert('no fullscreen support');
        $ui.find('.controls .fullscreen-placeholder').hide();
      } else {
        alert('fullscreen support');
      }
    })*/
    .on('videostart', function(event, $ui, $trigger) {
      //$ui.find('video').css({ 'height': 'auto' }).end().find('.controls .toggle').addClass('playing');
      $ui.find('video, object, iframe').css({ 'position': 'absolute', 'left': '0', 'height': '100%' }).parent().css({ 'position': 'relative', 'padding-bottom': '56.25%' });
      // Add a class for IEs 6-8 to set the object height to a static
      $ui.addClass('playback-started');
      $ui.find('.controls .toggle').addClass('playing');
      if(Modernizr.fullscreen) {
        $ui.find('.controls .fullscreen-placeholder').removeClass('fullscreen-placeholder').addClass('fullscreen-toggle');
      }
      $trigger.hide();
    })
    .on('videostop', function(event, $ui) {
      $ui.find('.controls .toggle').removeClass('playing');
    })
    .on('videomute', function(event, $ui) {
      $ui.find('.controls .volume-toggle').addClass('muted');
    })
    .on('videounmute', function(event, $ui) {
      $ui.find('.controls .volume-toggle').removeClass('muted');
    })
    .on('videoenterfullscreen', function(event, $ui) {
      $ui.find('.controls .fullscreen-toggle').addClass('fullscreen-on');
    })
    .on('videoexitfullscreen', function(event, $ui) {
      $ui.find('.controls .fullscreen-toggle').removeClass('fullscreen-on');
    })
    .xvideo({
      autoStart         : false,
      showOnClick       : false,
      showOverlay       : false,
      showCloseButton   : false,
      hideTrigger       : false,
      showNativeControls: false,
      triggerClass      : 'inline-video-trigger',
      template          : ['<div class="xvideo responsive-internal-video">',
                            '<div class="foo">',
                              '<div id="%playerID%" class="toggle">',
                            '</div>',
                            '</div>',
                            '<div class="controls">' + videoControls + '</div>',
                           '</div>'].join('')
    });

  $('section.content-block .standalone-slideshow').slideshow2({ arrows: true });


  // Function to set asset tracking cookie
  function setAssetTrackingCookie(anchor) {
    var hostname = anchor.hostname;
    if (typeof hostname === 'undefined' || hostname.indexOf('nokia.com') === hostname.length - 9) {
      var value = $(anchor).attr('data-intc');
      if (value) {
        var expiryDate = new Date();
        expiryDate.setTime(expiryDate.getTime() + 1000 * 30);
        $.cookies.set('intc_click', value, {
          expiresAt: expiryDate,
          domain: '.nokia.com'
        });
      }
    }
  }

  $('body').on('click', 'a[data-intc]', function(event) {
    setAssetTrackingCookie(this);

    if($(this).data('intc') && I18n && I18n.inT && I18n.inT.trackingUrl) {
                var contentId = $(this).data('intc').split('-').pop();
                var url=this.href;
                event.preventDefault();
                var newImage = new Image();
                newImage.src = I18n.inT.trackingUrl.concat('?i=').concat(contentId);
                setTimeout(function() {
                  window.location = url;
                }, 300);
        }
  });
  

  // Sync heights of product specification snapshots (pss)
  $(window).load(function() {
    var pssItems = $('.product-specification-snapshot .four li');
      if ($(window).width() > 768 && pssItems.length > 0) {
        var pssMaxHeight = 0;
        pssItems.each(function() {
          if ($(this).height() > pssMaxHeight) pssMaxHeight = $(this).height();
        });
        pssItems.height(pssMaxHeight);
      }
  });

  // Toggle for downloads-dropdown
  var enableEnhancedDownload = $(window).width() > 640;
  if (enableEnhancedDownload) {
    $('.download-dropdown').addClass('enhanced').find('> a').on('click', function(e) {
      e = e || window.event;
      e.preventDefault();
      e.stopPropagation();
      e.cancelBubble = true;
      var $ul = $(this).siblings('ul');
      $ul.toggle();
      if ($ul.is(':visible')) {
        $('body').click(function() {
          $('.download-dropdown ul').hide();
        });
      }
      else {
        $('body').unbind();
      }
    });
  } else {
    $('.download-dropdown').each(function(i, pos) {
      $pos = $(pos);
      var markup = '<select style="width: 100%;"><option>' + $pos.find('> a strong').text() + '</option>';
      $pos.find('li a').each(function(j, el) {
        markup += '<option value="' + $(el).attr('href') + '">' + $(el).find('em').text() + ' (' + $(el).find('span').text() +')</option>';
      });
      markup += '</select>';
      $pos.hide();
      var t = $pos.parent().append(markup);
      t.on('change', function(ev) {
        window.location.href=$(ev.target).val();
      });
    });
  }

  // IMEI checker and product based screening
  $('#product_based_screening').productBasedScreening();

  // Ratings and reviews
  var isBazaarvoiceUrlLoaded = false;
  if(($(".ratings-reviews").length > 0 || $(".ratings-reviews-page").length > 0 || $(".write-review").length > 0) && I18n.ratings_reviews.bazaarvoice_url !== undefined) {
    if(!isBazaarvoiceUrlLoaded) {
      var head= document.getElementsByTagName('head')[0];
      var script= document.createElement('script');
      script.type= 'text/javascript';
      script.onreadystatechange= function () {
        if (this.readyState == 'complete') loadRatingsReviews();
      }
      script.onload= loadRatingsReviews;
      script.src= I18n.ratings_reviews.bazaarvoice_url;
      head.appendChild(script);
      isBazaarvoiceUrlLoaded = true;
    }

  }

  function loadRatingsReviews() {
    if($(".ratings-reviews").length > 0 && I18n.ratings_reviews.product_id !== undefined) {
      $BV.ui("rr", "show_summary", {
        productId: I18n.ratings_reviews.product_id
      });
    } else if ($(".ratings-reviews-page").length > 0 && I18n.ratings_reviews.submission_container_url !== undefined && I18n.ratings_reviews.product_id !== undefined) {

      $BV.ui("rr", "show_summary", { productId:  I18n.ratings_reviews.product_id });

      $BV.configure("global", {
        submissionContainerUrl: I18n.ratings_reviews.submission_container_url
      });

      $("#nk-bv-write-review").bind('click', function() {
        $BV.ui("rr", "submit_review", {productId: I18n.ratings_reviews.product_id});
      });

      $BV.ui("rr", "show_reviews", {productId: I18n.ratings_reviews.product_id});
    } else if($(".write-review").length > 0) {
      $BV.ui("submission_container", {userToken: ""});
    }

  }

  // show more FAQs in support category pages
  var $faqShowMore = $('.show-more');
  if ($faqShowMore.length > 0) {

    var $expandList = $faqShowMore.siblings('ul'),
        stepBy = parseInt($expandList.data('stepby'));

    if ($expandList.find('li').length > $expandList.find('li:visible').length) {
      $faqShowMore.show();
    }

    $faqShowMore.on('click', function(event){
      event.preventDefault();

      $expandList.find('li:hidden:lt('+stepBy+')')
        .attr('style', '')
        .css({ opacity: 0, display: 'list-item !important'})
        .each(function (i) {
          $.delay.apply(this, [window.customFadeIn, parseInt(100*i, 10)]);
        });

      if ($expandList.find('li:hidden').length == 0) {
        $(this).hide();
      }

    });
  }

  // Force-feed non-HTML5 browsers with input placeholders
  $('input[placeholder]').each(function() {
    $(this).val($(this).attr('placeholder'));
    $(this).focus(function() {
      if ($(this).val() == $(this).attr('placeholder')) {
         $(this).val('');
      }
    });
    $(this).blur(function() {
      if ($(this).val() === '' || $(this).val() == $(this).attr('placeholder')) {
          $(this).val($(this).attr('placeholder'));
      }
    });
  });

  $('#imei_warranty_check').imeiStatusCheck({
    imei_placeholder: '.imei_placeholder',
    relative_articles_prefix: 'imei_warranty_check'
  });

  $('#imei_repair_check').imeiStatusCheck({
    imei_placeholder: '.imei_placeholder',
    relative_articles_prefix: 'imei_repair_check'
  });



  $('.badge-of-honor .badges').simpleSlide({triggerNext: '.next', slides: '.badge', minAnimatedResolution: 480, animation: 'slideLeft'});

 // $('.video-slide').touchScroll({
 //    viewport_class: '.videos_wrapper .wrapper',
 //    triggerNext: '.control.next',
 //    triggerPrev: '.control.prev',
 //    slides: '.content_wrapper',
 //    snapToElements: '.videos_wrapper .content_wrapper',
 //    resolutions: {0: 1, 480: 2, 768: 3, 1024: 4}
 //  });

  $('.benefit-block.swipeshow').touchScroll({
    viewport_class: '.viewport',
    slides: '.cover, .slide',
    snapToElements: '.cover, .slide',
    resolutions: {0: 1},
    minResolution: 768
  });


  $('section.search-results .map-link').openOnNewWindow();

  $('a.external-tracking[tracking-param]').each(function() {
    $(this).on('click', function(e) {
      var href = $(this).attr('href');
      var trackingParam = $(this).attr('tracking-param') + "=";
      if (href.indexOf(trackingParam) < 0) {
        var trkId = $.cookies.get('s_vi');
        if (trkId) {
          // nokia tracking cookie specific hack to get the 'relevant' bits
          try {
            trkId = trkId.split('|')[1].split('[')[0];
            href = href + "&" + trackingParam + encodeURIComponent(trkId);
            $(this).attr('href', href);
          } catch (e) {}
        }
      }
      // the unique-param must always be the first item in the query (needed by NDW)
      var uniqueParam = $(this).attr('unique-param');
      if (uniqueParam && href.indexOf(uniqueParam) < 0) {
    	var orderedHref = href.replace('?', '?' + uniqueParam + "=" + new Date().getTime() + '&');
        $(this).attr('href', orderedHref);
      }
    });
  });

  $('#offers').normalizeHeights({ elementWrapper: '.list-content-wrapper, .tile-content-wrapper', minScreenWidth: 462})
              .offersTableFilters();

  $('section.feature-tiles').normalizeHeights({ elementWrapper: '.tile-content-wrapper', minScreenWidth: 462 });

  $('.aside-navigation').normalizeHeights({ elementWrapper: 'a', minScreenWidth: 320, animate: true });

  $('section.solution-tree .tiles').normalizeHeights({ elementWrapper: 'a'});




  $('#offers .tooltip-trigger').tooltip();

  // QUICKFIX - on offers fiter changes. offers table ontent is loaded and tooltips are replaced.
  $('#offers').on('contentReload', function(){
    if(!$('#offers .tooltip-trigger').data('tooltip')){
      $('#offers .tooltip-trigger').tooltip();
    }
  });

  if ($(window).width() > 768 && window.location.search.indexOf("opp=") == -1) {
    $('#offers div.page-size a:first').click();
  }

  // $('.page-collections .story-tile').aspectBlock({container: '.tile-content-wrapper'});

//   $('.page-collections').aspectBlock({
//     elements: '.story-tile, .page-collection .video-tile-wide, .navigation-tile-story',
//     allowedCutPercentage: '25',
//     block_limit_to_forgot_dots: 7,
//     cutWithDots: true
// });

  $('ul.streams').socialStream({speed: 4000, itemsInDisplay: 3});

  // Open the social sharing link/button in popup
  $('.social-control').on('click', function(event) {
    var left = (screen.width/2) - 350;
    var top = (screen.height/2) - 170;
    socialWindow = window.open($(this).attr('href'), $(this).attr('title'), 'status=no,toolbar=0,resizable=1,width=700,height=340,top='+ top + ',left=' + left);
    event.preventDefault();
  });


  ////////////////////////////////////////////////////////////////////////////////////////////////
  // do not accidentally add stuff below this line

  // Live tile animation trigger
  $('li.social-media').each(function() {
    if (window.location.search.indexOf("debugmode=screenshot")<0) {
      $(this).livetile();
    }
  });

  // keep this last for test frameworks
  $('body').addClass('done');

  //console.profileEnd();

});
/*
 *  .postmessage handler implementation
 *  use this to talk between multiple documents(e.g. iframes, popups) in the page
 */


$(function () {
  /*
  *  receiveMessage reads the response and checks if it comes from trusted origin
  *  this needs to be attached to message/onmessage event
  */
  function receiveMessage(event) {
    var origin = event.origin;

    if(origin.indexOf('account.nokia.com', origin.length - 17) !== -1) {
      // todo: add noa msg handlers here
      return;
    }

    if(origin.indexOf('.nokia.com', origin.length - 10) !== -1) {
      response = readResponse(event.data);

      try {
        if (response) eval(response.functionCall + "(response)");
      } catch(e) {
        // do nothing if the function call failed
      }
    }
  }

  /*
  * readResponse creates an object out of string passed from child document
  *
  * @parameters:
  *  (String) input
  *
  * @returns Object:
  *    obj.functionCall
  *    obj.property1
  *    obj.property2
  */
  function readResponse(input) {
    var response = input.split(';');
    if (response.length % 2 == 1) {
      var object = {};

      // function to eval
      object["functionCall"] = response[0];

      // key+value pairs, properties for function
      for (var i=1; i<response.length; i+=2) {
        if (response[i+1] == "true")
          object[response[i]] = true;
        else if (response[i+1] == "false")
          object[response[i]] = false;
        else
          object[response[i]] = response[i+1];
      }

      return object;
    } else {
      return false;
    }
  }

  /*
  *  nkResizeWALframe resizes WAL iframe to be as high as its contents
  *  (since the content is generated dynamically we can't know the dimensions before content is loaded, hence this function)
  */
  function nkResizeWALframe(response) {
    $('iframe[name="wal-frame"]')
      .stop()
      .animate({
        height: (parseInt(response.height.split('px')[0], 10) + 40).toString() + "px"
      }, 500);
  }

  /*
   *  nkScrollWALtop scrolls the page to top of WAL iframe
   *  (called e.g. by contact-us thank you page)
   */
  function nkScrollWALtop(response) {
    $('body,html')
      .stop()
      .animate({
          scrollTop: $('iframe[name="wal-frame"]').offset().top - 15
      }, 500);
  }

  /*
   *  nkWALFocusFirstError scrolls (focuses) to first error that is visible in the application
   *  (called e.g. by contact the board application )
   */
  function nkWALFocusFirstError(response) {
      var offset = parseInt($('iframe[name="wal-frame"]').offset().top, 10) + parseInt(response.offset, 10) - 5;
      // only scroll to error if its actually not visible
      if ($(document).scrollTop() > parseInt(response.errorHeight, 10) + offset) {
          $('body,html')
          .stop()
          .animate({
              scrollTop: offset
          }, 500);
      }
  }

  // resize handler for external iframes
  window.iframeActions = {
    resize: function(data, elementSelector) {
      /*if (data.width)
        $(elementSelector).width(data.width);*/
      if (data.height)
        $(elementSelector).height(data.height);
    }
  };

  // bind onmessage(trident)/message(rest) event listeners
  if (window.attachEvent) {
    window.attachEvent("onmessage", receiveMessage);
  } else if (window.addEventListener) {
    window.addEventListener("message", receiveMessage, false);
  }
});


// when adding/removing entries here remember to match the changes also in
// nncom-applications/mauritius-cae-responsive/src/main/webapp/WEB-INF/templates/responsive/com.coremedia.starterkit.common.contentbeans/Page.jsp

//# ext loader.js -->







//# <-- ext loader.js 



















;
